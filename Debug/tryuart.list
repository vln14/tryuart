
tryuart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a68  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003b28  08003b28  00013b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003bd8  08003bd8  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08003bd8  08003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003be0  08003be0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be0  08003be0  00013be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08003be8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  20000070  08003c58  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000228  08003c58  00020228  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a3b5  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000195b  00000000  00000000  0002a44d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000898  00000000  00000000  0002bda8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000007f0  00000000  00000000  0002c640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000126e6  00000000  00000000  0002ce30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ab25  00000000  00000000  0003f516  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00071074  00000000  00000000  0004a03b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb0af  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000021a4  00000000  00000000  000bb100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b10 	.word	0x08003b10

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08003b10 	.word	0x08003b10

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <__aeabi_uldivmod>:
 8000234:	2b00      	cmp	r3, #0
 8000236:	d111      	bne.n	800025c <__aeabi_uldivmod+0x28>
 8000238:	2a00      	cmp	r2, #0
 800023a:	d10f      	bne.n	800025c <__aeabi_uldivmod+0x28>
 800023c:	2900      	cmp	r1, #0
 800023e:	d100      	bne.n	8000242 <__aeabi_uldivmod+0xe>
 8000240:	2800      	cmp	r0, #0
 8000242:	d002      	beq.n	800024a <__aeabi_uldivmod+0x16>
 8000244:	2100      	movs	r1, #0
 8000246:	43c9      	mvns	r1, r1
 8000248:	0008      	movs	r0, r1
 800024a:	b407      	push	{r0, r1, r2}
 800024c:	4802      	ldr	r0, [pc, #8]	; (8000258 <__aeabi_uldivmod+0x24>)
 800024e:	a102      	add	r1, pc, #8	; (adr r1, 8000258 <__aeabi_uldivmod+0x24>)
 8000250:	1840      	adds	r0, r0, r1
 8000252:	9002      	str	r0, [sp, #8]
 8000254:	bd03      	pop	{r0, r1, pc}
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	ffffffd9 	.word	0xffffffd9
 800025c:	b403      	push	{r0, r1}
 800025e:	4668      	mov	r0, sp
 8000260:	b501      	push	{r0, lr}
 8000262:	9802      	ldr	r0, [sp, #8]
 8000264:	f000 f834 	bl	80002d0 <__udivmoddi4>
 8000268:	9b01      	ldr	r3, [sp, #4]
 800026a:	469e      	mov	lr, r3
 800026c:	b002      	add	sp, #8
 800026e:	bc0c      	pop	{r2, r3}
 8000270:	4770      	bx	lr
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_lmul>:
 8000274:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000276:	46ce      	mov	lr, r9
 8000278:	4647      	mov	r7, r8
 800027a:	b580      	push	{r7, lr}
 800027c:	0007      	movs	r7, r0
 800027e:	4699      	mov	r9, r3
 8000280:	0c3b      	lsrs	r3, r7, #16
 8000282:	469c      	mov	ip, r3
 8000284:	0413      	lsls	r3, r2, #16
 8000286:	0c1b      	lsrs	r3, r3, #16
 8000288:	001d      	movs	r5, r3
 800028a:	000e      	movs	r6, r1
 800028c:	4661      	mov	r1, ip
 800028e:	0400      	lsls	r0, r0, #16
 8000290:	0c14      	lsrs	r4, r2, #16
 8000292:	0c00      	lsrs	r0, r0, #16
 8000294:	4345      	muls	r5, r0
 8000296:	434b      	muls	r3, r1
 8000298:	4360      	muls	r0, r4
 800029a:	4361      	muls	r1, r4
 800029c:	18c0      	adds	r0, r0, r3
 800029e:	0c2c      	lsrs	r4, r5, #16
 80002a0:	1820      	adds	r0, r4, r0
 80002a2:	468c      	mov	ip, r1
 80002a4:	4283      	cmp	r3, r0
 80002a6:	d903      	bls.n	80002b0 <__aeabi_lmul+0x3c>
 80002a8:	2380      	movs	r3, #128	; 0x80
 80002aa:	025b      	lsls	r3, r3, #9
 80002ac:	4698      	mov	r8, r3
 80002ae:	44c4      	add	ip, r8
 80002b0:	4649      	mov	r1, r9
 80002b2:	4379      	muls	r1, r7
 80002b4:	4372      	muls	r2, r6
 80002b6:	0c03      	lsrs	r3, r0, #16
 80002b8:	4463      	add	r3, ip
 80002ba:	042d      	lsls	r5, r5, #16
 80002bc:	0c2d      	lsrs	r5, r5, #16
 80002be:	18c9      	adds	r1, r1, r3
 80002c0:	0400      	lsls	r0, r0, #16
 80002c2:	1940      	adds	r0, r0, r5
 80002c4:	1889      	adds	r1, r1, r2
 80002c6:	bcc0      	pop	{r6, r7}
 80002c8:	46b9      	mov	r9, r7
 80002ca:	46b0      	mov	r8, r6
 80002cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ce:	46c0      	nop			; (mov r8, r8)

080002d0 <__udivmoddi4>:
 80002d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002d2:	4657      	mov	r7, sl
 80002d4:	464e      	mov	r6, r9
 80002d6:	4645      	mov	r5, r8
 80002d8:	46de      	mov	lr, fp
 80002da:	b5e0      	push	{r5, r6, r7, lr}
 80002dc:	0004      	movs	r4, r0
 80002de:	000d      	movs	r5, r1
 80002e0:	4692      	mov	sl, r2
 80002e2:	4699      	mov	r9, r3
 80002e4:	b083      	sub	sp, #12
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d830      	bhi.n	800034c <__udivmoddi4+0x7c>
 80002ea:	d02d      	beq.n	8000348 <__udivmoddi4+0x78>
 80002ec:	4649      	mov	r1, r9
 80002ee:	4650      	mov	r0, sl
 80002f0:	f000 f8ba 	bl	8000468 <__clzdi2>
 80002f4:	0029      	movs	r1, r5
 80002f6:	0006      	movs	r6, r0
 80002f8:	0020      	movs	r0, r4
 80002fa:	f000 f8b5 	bl	8000468 <__clzdi2>
 80002fe:	1a33      	subs	r3, r6, r0
 8000300:	4698      	mov	r8, r3
 8000302:	3b20      	subs	r3, #32
 8000304:	469b      	mov	fp, r3
 8000306:	d433      	bmi.n	8000370 <__udivmoddi4+0xa0>
 8000308:	465a      	mov	r2, fp
 800030a:	4653      	mov	r3, sl
 800030c:	4093      	lsls	r3, r2
 800030e:	4642      	mov	r2, r8
 8000310:	001f      	movs	r7, r3
 8000312:	4653      	mov	r3, sl
 8000314:	4093      	lsls	r3, r2
 8000316:	001e      	movs	r6, r3
 8000318:	42af      	cmp	r7, r5
 800031a:	d83a      	bhi.n	8000392 <__udivmoddi4+0xc2>
 800031c:	42af      	cmp	r7, r5
 800031e:	d100      	bne.n	8000322 <__udivmoddi4+0x52>
 8000320:	e078      	b.n	8000414 <__udivmoddi4+0x144>
 8000322:	465b      	mov	r3, fp
 8000324:	1ba4      	subs	r4, r4, r6
 8000326:	41bd      	sbcs	r5, r7
 8000328:	2b00      	cmp	r3, #0
 800032a:	da00      	bge.n	800032e <__udivmoddi4+0x5e>
 800032c:	e075      	b.n	800041a <__udivmoddi4+0x14a>
 800032e:	2200      	movs	r2, #0
 8000330:	2300      	movs	r3, #0
 8000332:	9200      	str	r2, [sp, #0]
 8000334:	9301      	str	r3, [sp, #4]
 8000336:	2301      	movs	r3, #1
 8000338:	465a      	mov	r2, fp
 800033a:	4093      	lsls	r3, r2
 800033c:	9301      	str	r3, [sp, #4]
 800033e:	2301      	movs	r3, #1
 8000340:	4642      	mov	r2, r8
 8000342:	4093      	lsls	r3, r2
 8000344:	9300      	str	r3, [sp, #0]
 8000346:	e028      	b.n	800039a <__udivmoddi4+0xca>
 8000348:	4282      	cmp	r2, r0
 800034a:	d9cf      	bls.n	80002ec <__udivmoddi4+0x1c>
 800034c:	2200      	movs	r2, #0
 800034e:	2300      	movs	r3, #0
 8000350:	9200      	str	r2, [sp, #0]
 8000352:	9301      	str	r3, [sp, #4]
 8000354:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000356:	2b00      	cmp	r3, #0
 8000358:	d001      	beq.n	800035e <__udivmoddi4+0x8e>
 800035a:	601c      	str	r4, [r3, #0]
 800035c:	605d      	str	r5, [r3, #4]
 800035e:	9800      	ldr	r0, [sp, #0]
 8000360:	9901      	ldr	r1, [sp, #4]
 8000362:	b003      	add	sp, #12
 8000364:	bcf0      	pop	{r4, r5, r6, r7}
 8000366:	46bb      	mov	fp, r7
 8000368:	46b2      	mov	sl, r6
 800036a:	46a9      	mov	r9, r5
 800036c:	46a0      	mov	r8, r4
 800036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000370:	4642      	mov	r2, r8
 8000372:	2320      	movs	r3, #32
 8000374:	1a9b      	subs	r3, r3, r2
 8000376:	4652      	mov	r2, sl
 8000378:	40da      	lsrs	r2, r3
 800037a:	4641      	mov	r1, r8
 800037c:	0013      	movs	r3, r2
 800037e:	464a      	mov	r2, r9
 8000380:	408a      	lsls	r2, r1
 8000382:	0017      	movs	r7, r2
 8000384:	4642      	mov	r2, r8
 8000386:	431f      	orrs	r7, r3
 8000388:	4653      	mov	r3, sl
 800038a:	4093      	lsls	r3, r2
 800038c:	001e      	movs	r6, r3
 800038e:	42af      	cmp	r7, r5
 8000390:	d9c4      	bls.n	800031c <__udivmoddi4+0x4c>
 8000392:	2200      	movs	r2, #0
 8000394:	2300      	movs	r3, #0
 8000396:	9200      	str	r2, [sp, #0]
 8000398:	9301      	str	r3, [sp, #4]
 800039a:	4643      	mov	r3, r8
 800039c:	2b00      	cmp	r3, #0
 800039e:	d0d9      	beq.n	8000354 <__udivmoddi4+0x84>
 80003a0:	07fb      	lsls	r3, r7, #31
 80003a2:	0872      	lsrs	r2, r6, #1
 80003a4:	431a      	orrs	r2, r3
 80003a6:	4646      	mov	r6, r8
 80003a8:	087b      	lsrs	r3, r7, #1
 80003aa:	e00e      	b.n	80003ca <__udivmoddi4+0xfa>
 80003ac:	42ab      	cmp	r3, r5
 80003ae:	d101      	bne.n	80003b4 <__udivmoddi4+0xe4>
 80003b0:	42a2      	cmp	r2, r4
 80003b2:	d80c      	bhi.n	80003ce <__udivmoddi4+0xfe>
 80003b4:	1aa4      	subs	r4, r4, r2
 80003b6:	419d      	sbcs	r5, r3
 80003b8:	2001      	movs	r0, #1
 80003ba:	1924      	adds	r4, r4, r4
 80003bc:	416d      	adcs	r5, r5
 80003be:	2100      	movs	r1, #0
 80003c0:	3e01      	subs	r6, #1
 80003c2:	1824      	adds	r4, r4, r0
 80003c4:	414d      	adcs	r5, r1
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	d006      	beq.n	80003d8 <__udivmoddi4+0x108>
 80003ca:	42ab      	cmp	r3, r5
 80003cc:	d9ee      	bls.n	80003ac <__udivmoddi4+0xdc>
 80003ce:	3e01      	subs	r6, #1
 80003d0:	1924      	adds	r4, r4, r4
 80003d2:	416d      	adcs	r5, r5
 80003d4:	2e00      	cmp	r6, #0
 80003d6:	d1f8      	bne.n	80003ca <__udivmoddi4+0xfa>
 80003d8:	9800      	ldr	r0, [sp, #0]
 80003da:	9901      	ldr	r1, [sp, #4]
 80003dc:	465b      	mov	r3, fp
 80003de:	1900      	adds	r0, r0, r4
 80003e0:	4169      	adcs	r1, r5
 80003e2:	2b00      	cmp	r3, #0
 80003e4:	db24      	blt.n	8000430 <__udivmoddi4+0x160>
 80003e6:	002b      	movs	r3, r5
 80003e8:	465a      	mov	r2, fp
 80003ea:	4644      	mov	r4, r8
 80003ec:	40d3      	lsrs	r3, r2
 80003ee:	002a      	movs	r2, r5
 80003f0:	40e2      	lsrs	r2, r4
 80003f2:	001c      	movs	r4, r3
 80003f4:	465b      	mov	r3, fp
 80003f6:	0015      	movs	r5, r2
 80003f8:	2b00      	cmp	r3, #0
 80003fa:	db2a      	blt.n	8000452 <__udivmoddi4+0x182>
 80003fc:	0026      	movs	r6, r4
 80003fe:	409e      	lsls	r6, r3
 8000400:	0033      	movs	r3, r6
 8000402:	0026      	movs	r6, r4
 8000404:	4647      	mov	r7, r8
 8000406:	40be      	lsls	r6, r7
 8000408:	0032      	movs	r2, r6
 800040a:	1a80      	subs	r0, r0, r2
 800040c:	4199      	sbcs	r1, r3
 800040e:	9000      	str	r0, [sp, #0]
 8000410:	9101      	str	r1, [sp, #4]
 8000412:	e79f      	b.n	8000354 <__udivmoddi4+0x84>
 8000414:	42a3      	cmp	r3, r4
 8000416:	d8bc      	bhi.n	8000392 <__udivmoddi4+0xc2>
 8000418:	e783      	b.n	8000322 <__udivmoddi4+0x52>
 800041a:	4642      	mov	r2, r8
 800041c:	2320      	movs	r3, #32
 800041e:	2100      	movs	r1, #0
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	2200      	movs	r2, #0
 8000424:	9100      	str	r1, [sp, #0]
 8000426:	9201      	str	r2, [sp, #4]
 8000428:	2201      	movs	r2, #1
 800042a:	40da      	lsrs	r2, r3
 800042c:	9201      	str	r2, [sp, #4]
 800042e:	e786      	b.n	800033e <__udivmoddi4+0x6e>
 8000430:	4642      	mov	r2, r8
 8000432:	2320      	movs	r3, #32
 8000434:	1a9b      	subs	r3, r3, r2
 8000436:	002a      	movs	r2, r5
 8000438:	4646      	mov	r6, r8
 800043a:	409a      	lsls	r2, r3
 800043c:	0023      	movs	r3, r4
 800043e:	40f3      	lsrs	r3, r6
 8000440:	4644      	mov	r4, r8
 8000442:	4313      	orrs	r3, r2
 8000444:	002a      	movs	r2, r5
 8000446:	40e2      	lsrs	r2, r4
 8000448:	001c      	movs	r4, r3
 800044a:	465b      	mov	r3, fp
 800044c:	0015      	movs	r5, r2
 800044e:	2b00      	cmp	r3, #0
 8000450:	dad4      	bge.n	80003fc <__udivmoddi4+0x12c>
 8000452:	4642      	mov	r2, r8
 8000454:	002f      	movs	r7, r5
 8000456:	2320      	movs	r3, #32
 8000458:	0026      	movs	r6, r4
 800045a:	4097      	lsls	r7, r2
 800045c:	1a9b      	subs	r3, r3, r2
 800045e:	40de      	lsrs	r6, r3
 8000460:	003b      	movs	r3, r7
 8000462:	4333      	orrs	r3, r6
 8000464:	e7cd      	b.n	8000402 <__udivmoddi4+0x132>
 8000466:	46c0      	nop			; (mov r8, r8)

08000468 <__clzdi2>:
 8000468:	b510      	push	{r4, lr}
 800046a:	2900      	cmp	r1, #0
 800046c:	d103      	bne.n	8000476 <__clzdi2+0xe>
 800046e:	f000 f807 	bl	8000480 <__clzsi2>
 8000472:	3020      	adds	r0, #32
 8000474:	e002      	b.n	800047c <__clzdi2+0x14>
 8000476:	0008      	movs	r0, r1
 8000478:	f000 f802 	bl	8000480 <__clzsi2>
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__clzsi2>:
 8000480:	211c      	movs	r1, #28
 8000482:	2301      	movs	r3, #1
 8000484:	041b      	lsls	r3, r3, #16
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0xe>
 800048a:	0c00      	lsrs	r0, r0, #16
 800048c:	3910      	subs	r1, #16
 800048e:	0a1b      	lsrs	r3, r3, #8
 8000490:	4298      	cmp	r0, r3
 8000492:	d301      	bcc.n	8000498 <__clzsi2+0x18>
 8000494:	0a00      	lsrs	r0, r0, #8
 8000496:	3908      	subs	r1, #8
 8000498:	091b      	lsrs	r3, r3, #4
 800049a:	4298      	cmp	r0, r3
 800049c:	d301      	bcc.n	80004a2 <__clzsi2+0x22>
 800049e:	0900      	lsrs	r0, r0, #4
 80004a0:	3904      	subs	r1, #4
 80004a2:	a202      	add	r2, pc, #8	; (adr r2, 80004ac <__clzsi2+0x2c>)
 80004a4:	5c10      	ldrb	r0, [r2, r0]
 80004a6:	1840      	adds	r0, r0, r1
 80004a8:	4770      	bx	lr
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	02020304 	.word	0x02020304
 80004b0:	01010101 	.word	0x01010101
	...

080004bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004bc:	b580      	push	{r7, lr}
 80004be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c0:	f000 fc30 	bl	8000d24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c4:	f000 f832 	bl	800052c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c8:	f000 f922 	bl	8000710 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 80004cc:	f000 f8f2 	bl	80006b4 <MX_LPUART1_UART_Init>
  MX_LPTIM1_Init();
 80004d0:	f000 f8c0 	bl	8000654 <MX_LPTIM1_Init>
  MX_COMP2_Init();
 80004d4:	f000 f894 	bl	8000600 <MX_COMP2_Init>
  /* USER CODE BEGIN 2 */
  LC_Init_GPIO();
 80004d8:	f000 f976 	bl	80007c8 <LC_Init_GPIO>
  HAL_LPTIM_Counter_Start(&hlptim1, (uint32_t) 0xFFFF);
 80004dc:	4a10      	ldr	r2, [pc, #64]	; (8000520 <main+0x64>)
 80004de:	4b11      	ldr	r3, [pc, #68]	; (8000524 <main+0x68>)
 80004e0:	0011      	movs	r1, r2
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 f982 	bl	80017ec <HAL_LPTIM_Counter_Start>
  HAL_COMP_Start(&hcomp2);
 80004e8:	4b0f      	ldr	r3, [pc, #60]	; (8000528 <main+0x6c>)
 80004ea:	0018      	movs	r0, r3
 80004ec:	f000 fe58 	bl	80011a0 <HAL_COMP_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	LcSensorInit();
 80004f0:	f000 fa44 	bl	800097c <LcSensorInit>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3, SET);
 80004f4:	23a0      	movs	r3, #160	; 0xa0
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2201      	movs	r2, #1
 80004fa:	2108      	movs	r1, #8
 80004fc:	0018      	movs	r0, r3
 80004fe:	f001 f8cb 	bl	8001698 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, SET);
 8000502:	23a0      	movs	r3, #160	; 0xa0
 8000504:	05db      	lsls	r3, r3, #23
 8000506:	2201      	movs	r2, #1
 8000508:	2102      	movs	r1, #2
 800050a:	0018      	movs	r0, r3
 800050c:	f001 f8c4 	bl	8001698 <HAL_GPIO_WritePin>
	HAL_Delay(80);
 8000510:	2050      	movs	r0, #80	; 0x50
 8000512:	f000 fc77 	bl	8000e04 <HAL_Delay>
	/*uint32_t counterValue = HAL_LPTIM_ReadCounter(&hlptim1);
	char aMessage[50];
	sprintf(aMessage, "Counter Value: %lu\n", counterValue);
	LPUART_Transmit_String(aMessage);
	HAL_Delay(1000); // Jeda 1 detik*/
	lcmeasure();
 8000516:	f000 fa49 	bl	80009ac <lcmeasure>
	lctransmit();
 800051a:	f000 fa7f 	bl	8000a1c <lctransmit>
	LcSensorInit();
 800051e:	e7e7      	b.n	80004f0 <main+0x34>
 8000520:	0000ffff 	.word	0x0000ffff
 8000524:	20000158 	.word	0x20000158
 8000528:	20000130 	.word	0x20000130

0800052c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b09b      	sub	sp, #108	; 0x6c
 8000530:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000532:	2434      	movs	r4, #52	; 0x34
 8000534:	193b      	adds	r3, r7, r4
 8000536:	0018      	movs	r0, r3
 8000538:	2334      	movs	r3, #52	; 0x34
 800053a:	001a      	movs	r2, r3
 800053c:	2100      	movs	r1, #0
 800053e:	f002 fe75 	bl	800322c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000542:	2320      	movs	r3, #32
 8000544:	18fb      	adds	r3, r7, r3
 8000546:	0018      	movs	r0, r3
 8000548:	2314      	movs	r3, #20
 800054a:	001a      	movs	r2, r3
 800054c:	2100      	movs	r1, #0
 800054e:	f002 fe6d 	bl	800322c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	0018      	movs	r0, r3
 8000556:	231c      	movs	r3, #28
 8000558:	001a      	movs	r2, r3
 800055a:	2100      	movs	r1, #0
 800055c:	f002 fe66 	bl	800322c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000560:	4b25      	ldr	r3, [pc, #148]	; (80005f8 <SystemClock_Config+0xcc>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	4a25      	ldr	r2, [pc, #148]	; (80005fc <SystemClock_Config+0xd0>)
 8000566:	401a      	ands	r2, r3
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <SystemClock_Config+0xcc>)
 800056a:	2180      	movs	r1, #128	; 0x80
 800056c:	0109      	lsls	r1, r1, #4
 800056e:	430a      	orrs	r2, r1
 8000570:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000572:	0021      	movs	r1, r4
 8000574:	187b      	adds	r3, r7, r1
 8000576:	2202      	movs	r2, #2
 8000578:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2201      	movs	r2, #1
 800057e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000580:	187b      	adds	r3, r7, r1
 8000582:	2210      	movs	r2, #16
 8000584:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000586:	187b      	adds	r3, r7, r1
 8000588:	2200      	movs	r2, #0
 800058a:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058c:	187b      	adds	r3, r7, r1
 800058e:	0018      	movs	r0, r3
 8000590:	f001 f9b8 	bl	8001904 <HAL_RCC_OscConfig>
 8000594:	1e03      	subs	r3, r0, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000598:	f000 fa66 	bl	8000a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	2120      	movs	r1, #32
 800059e:	187b      	adds	r3, r7, r1
 80005a0:	220f      	movs	r2, #15
 80005a2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80005a4:	187b      	adds	r3, r7, r1
 80005a6:	2201      	movs	r2, #1
 80005a8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005aa:	187b      	adds	r3, r7, r1
 80005ac:	2200      	movs	r2, #0
 80005ae:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005b0:	187b      	adds	r3, r7, r1
 80005b2:	2200      	movs	r2, #0
 80005b4:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005b6:	187b      	adds	r3, r7, r1
 80005b8:	2200      	movs	r2, #0
 80005ba:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005bc:	187b      	adds	r3, r7, r1
 80005be:	2100      	movs	r1, #0
 80005c0:	0018      	movs	r0, r3
 80005c2:	f001 fd09 	bl	8001fd8 <HAL_RCC_ClockConfig>
 80005c6:	1e03      	subs	r3, r0, #0
 80005c8:	d001      	beq.n	80005ce <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80005ca:	f000 fa4d 	bl	8000a68 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_LPTIM1;
 80005ce:	1d3b      	adds	r3, r7, #4
 80005d0:	2284      	movs	r2, #132	; 0x84
 80005d2:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80005d4:	1d3b      	adds	r3, r7, #4
 80005d6:	2200      	movs	r2, #0
 80005d8:	611a      	str	r2, [r3, #16]
  PeriphClkInit.LptimClockSelection = RCC_LPTIM1CLKSOURCE_PCLK;
 80005da:	1d3b      	adds	r3, r7, #4
 80005dc:	2200      	movs	r2, #0
 80005de:	619a      	str	r2, [r3, #24]

  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80005e0:	1d3b      	adds	r3, r7, #4
 80005e2:	0018      	movs	r0, r3
 80005e4:	f001 ff1c 	bl	8002420 <HAL_RCCEx_PeriphCLKConfig>
 80005e8:	1e03      	subs	r3, r0, #0
 80005ea:	d001      	beq.n	80005f0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005ec:	f000 fa3c 	bl	8000a68 <Error_Handler>
  }
}
 80005f0:	46c0      	nop			; (mov r8, r8)
 80005f2:	46bd      	mov	sp, r7
 80005f4:	b01b      	add	sp, #108	; 0x6c
 80005f6:	bd90      	pop	{r4, r7, pc}
 80005f8:	40007000 	.word	0x40007000
 80005fc:	ffffe7ff 	.word	0xffffe7ff

08000600 <MX_COMP2_Init>:
  * @brief COMP2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_COMP2_Init(void)
{
 8000600:	b580      	push	{r7, lr}
 8000602:	af00      	add	r7, sp, #0
  /* USER CODE END COMP2_Init 0 */

  /* USER CODE BEGIN COMP2_Init 1 */

  /* USER CODE END COMP2_Init 1 */
  hcomp2.Instance = COMP2;
 8000604:	4b11      	ldr	r3, [pc, #68]	; (800064c <MX_COMP2_Init+0x4c>)
 8000606:	4a12      	ldr	r2, [pc, #72]	; (8000650 <MX_COMP2_Init+0x50>)
 8000608:	601a      	str	r2, [r3, #0]
  hcomp2.Init.InvertingInput = COMP_INPUT_MINUS_IO1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <MX_COMP2_Init+0x4c>)
 800060c:	2210      	movs	r2, #16
 800060e:	611a      	str	r2, [r3, #16]
  hcomp2.Init.NonInvertingInput = COMP_INPUT_PLUS_IO3;
 8000610:	4b0e      	ldr	r3, [pc, #56]	; (800064c <MX_COMP2_Init+0x4c>)
 8000612:	2280      	movs	r2, #128	; 0x80
 8000614:	0092      	lsls	r2, r2, #2
 8000616:	60da      	str	r2, [r3, #12]
  hcomp2.Init.LPTIMConnection = COMP_LPTIMCONNECTION_IN1_ENABLED;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <MX_COMP2_Init+0x4c>)
 800061a:	2201      	movs	r2, #1
 800061c:	619a      	str	r2, [r3, #24]
  hcomp2.Init.OutputPol = COMP_OUTPUTPOL_NONINVERTED;
 800061e:	4b0b      	ldr	r3, [pc, #44]	; (800064c <MX_COMP2_Init+0x4c>)
 8000620:	2200      	movs	r2, #0
 8000622:	615a      	str	r2, [r3, #20]
  hcomp2.Init.Mode = COMP_POWERMODE_MEDIUMSPEED;
 8000624:	4b09      	ldr	r3, [pc, #36]	; (800064c <MX_COMP2_Init+0x4c>)
 8000626:	2208      	movs	r2, #8
 8000628:	609a      	str	r2, [r3, #8]
  hcomp2.Init.WindowMode = COMP_WINDOWMODE_DISABLE;
 800062a:	4b08      	ldr	r3, [pc, #32]	; (800064c <MX_COMP2_Init+0x4c>)
 800062c:	2200      	movs	r2, #0
 800062e:	605a      	str	r2, [r3, #4]
  hcomp2.Init.TriggerMode = COMP_TRIGGERMODE_NONE;
 8000630:	4b06      	ldr	r3, [pc, #24]	; (800064c <MX_COMP2_Init+0x4c>)
 8000632:	2200      	movs	r2, #0
 8000634:	61da      	str	r2, [r3, #28]
  if (HAL_COMP_Init(&hcomp2) != HAL_OK)
 8000636:	4b05      	ldr	r3, [pc, #20]	; (800064c <MX_COMP2_Init+0x4c>)
 8000638:	0018      	movs	r0, r3
 800063a:	f000 fc1d 	bl	8000e78 <HAL_COMP_Init>
 800063e:	1e03      	subs	r3, r0, #0
 8000640:	d001      	beq.n	8000646 <MX_COMP2_Init+0x46>
  {
    Error_Handler();
 8000642:	f000 fa11 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN COMP2_Init 2 */

  /* USER CODE END COMP2_Init 2 */

}
 8000646:	46c0      	nop			; (mov r8, r8)
 8000648:	46bd      	mov	sp, r7
 800064a:	bd80      	pop	{r7, pc}
 800064c:	20000130 	.word	0x20000130
 8000650:	4001001c 	.word	0x4001001c

08000654 <MX_LPTIM1_Init>:
  * @brief LPTIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPTIM1_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	af00      	add	r7, sp, #0
  /* USER CODE END LPTIM1_Init 0 */

  /* USER CODE BEGIN LPTIM1_Init 1 */

  /* USER CODE END LPTIM1_Init 1 */
  hlptim1.Instance = LPTIM1;
 8000658:	4b13      	ldr	r3, [pc, #76]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 800065a:	4a14      	ldr	r2, [pc, #80]	; (80006ac <MX_LPTIM1_Init+0x58>)
 800065c:	601a      	str	r2, [r3, #0]
  hlptim1.Init.Clock.Source = LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC;
 800065e:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 8000660:	2200      	movs	r2, #0
 8000662:	605a      	str	r2, [r3, #4]
  hlptim1.Init.Clock.Prescaler = LPTIM_PRESCALER_DIV1;
 8000664:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  hlptim1.Init.UltraLowPowerClock.Polarity = LPTIM_CLOCKPOLARITY_RISING;
 800066a:	4b0f      	ldr	r3, [pc, #60]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 800066c:	2200      	movs	r2, #0
 800066e:	60da      	str	r2, [r3, #12]
  hlptim1.Init.UltraLowPowerClock.SampleTime = LPTIM_CLOCKSAMPLETIME_DIRECTTRANSITION;
 8000670:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 8000672:	2200      	movs	r2, #0
 8000674:	611a      	str	r2, [r3, #16]
  hlptim1.Init.Trigger.Source = LPTIM_TRIGSOURCE_SOFTWARE;
 8000676:	4b0c      	ldr	r3, [pc, #48]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 8000678:	4a0d      	ldr	r2, [pc, #52]	; (80006b0 <MX_LPTIM1_Init+0x5c>)
 800067a:	615a      	str	r2, [r3, #20]
  hlptim1.Init.OutputPolarity = LPTIM_OUTPUTPOLARITY_HIGH;
 800067c:	4b0a      	ldr	r3, [pc, #40]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 800067e:	2200      	movs	r2, #0
 8000680:	621a      	str	r2, [r3, #32]
  hlptim1.Init.UpdateMode = LPTIM_UPDATE_IMMEDIATE;
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 8000684:	2200      	movs	r2, #0
 8000686:	625a      	str	r2, [r3, #36]	; 0x24
  hlptim1.Init.CounterSource = LPTIM_COUNTERSOURCE_EXTERNAL;
 8000688:	4b07      	ldr	r3, [pc, #28]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 800068a:	2280      	movs	r2, #128	; 0x80
 800068c:	0412      	lsls	r2, r2, #16
 800068e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_LPTIM_Init(&hlptim1) != HAL_OK)
 8000690:	4b05      	ldr	r3, [pc, #20]	; (80006a8 <MX_LPTIM1_Init+0x54>)
 8000692:	0018      	movs	r0, r3
 8000694:	f001 f81e 	bl	80016d4 <HAL_LPTIM_Init>
 8000698:	1e03      	subs	r3, r0, #0
 800069a:	d001      	beq.n	80006a0 <MX_LPTIM1_Init+0x4c>
  {
    Error_Handler();
 800069c:	f000 f9e4 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN LPTIM1_Init 2 */

  /* USER CODE END LPTIM1_Init 2 */

}
 80006a0:	46c0      	nop			; (mov r8, r8)
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	46c0      	nop			; (mov r8, r8)
 80006a8:	20000158 	.word	0x20000158
 80006ac:	40007c00 	.word	0x40007c00
 80006b0:	0000ffff 	.word	0x0000ffff

080006b4 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 80006b8:	4b13      	ldr	r3, [pc, #76]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006ba:	4a14      	ldr	r2, [pc, #80]	; (800070c <MX_LPUART1_UART_Init+0x58>)
 80006bc:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 9600;
 80006be:	4b12      	ldr	r3, [pc, #72]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006c0:	2296      	movs	r2, #150	; 0x96
 80006c2:	0192      	lsls	r2, r2, #6
 80006c4:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006c6:	4b10      	ldr	r3, [pc, #64]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80006cc:	4b0e      	ldr	r3, [pc, #56]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80006d2:	4b0d      	ldr	r3, [pc, #52]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80006d8:	4b0b      	ldr	r3, [pc, #44]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006da:	220c      	movs	r2, #12
 80006dc:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006de:	4b0a      	ldr	r3, [pc, #40]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e4:	4b08      	ldr	r3, [pc, #32]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ea:	4b07      	ldr	r3, [pc, #28]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <MX_LPUART1_UART_Init+0x54>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 ffce 	bl	8002694 <HAL_UART_Init>
 80006f8:	1e03      	subs	r3, r0, #0
 80006fa:	d001      	beq.n	8000700 <MX_LPUART1_UART_Init+0x4c>
  {
    Error_Handler();
 80006fc:	f000 f9b4 	bl	8000a68 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000700:	46c0      	nop			; (mov r8, r8)
 8000702:	46bd      	mov	sp, r7
 8000704:	bd80      	pop	{r7, pc}
 8000706:	46c0      	nop			; (mov r8, r8)
 8000708:	20000188 	.word	0x20000188
 800070c:	40004800 	.word	0x40004800

08000710 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000710:	b590      	push	{r4, r7, lr}
 8000712:	b08b      	sub	sp, #44	; 0x2c
 8000714:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000716:	2414      	movs	r4, #20
 8000718:	193b      	adds	r3, r7, r4
 800071a:	0018      	movs	r0, r3
 800071c:	2314      	movs	r3, #20
 800071e:	001a      	movs	r2, r3
 8000720:	2100      	movs	r1, #0
 8000722:	f002 fd83 	bl	800322c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000726:	4b27      	ldr	r3, [pc, #156]	; (80007c4 <MX_GPIO_Init+0xb4>)
 8000728:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800072a:	4b26      	ldr	r3, [pc, #152]	; (80007c4 <MX_GPIO_Init+0xb4>)
 800072c:	2104      	movs	r1, #4
 800072e:	430a      	orrs	r2, r1
 8000730:	62da      	str	r2, [r3, #44]	; 0x2c
 8000732:	4b24      	ldr	r3, [pc, #144]	; (80007c4 <MX_GPIO_Init+0xb4>)
 8000734:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000736:	2204      	movs	r2, #4
 8000738:	4013      	ands	r3, r2
 800073a:	613b      	str	r3, [r7, #16]
 800073c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800073e:	4b21      	ldr	r3, [pc, #132]	; (80007c4 <MX_GPIO_Init+0xb4>)
 8000740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000742:	4b20      	ldr	r3, [pc, #128]	; (80007c4 <MX_GPIO_Init+0xb4>)
 8000744:	2180      	movs	r1, #128	; 0x80
 8000746:	430a      	orrs	r2, r1
 8000748:	62da      	str	r2, [r3, #44]	; 0x2c
 800074a:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <MX_GPIO_Init+0xb4>)
 800074c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800074e:	2280      	movs	r2, #128	; 0x80
 8000750:	4013      	ands	r3, r2
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b1b      	ldr	r3, [pc, #108]	; (80007c4 <MX_GPIO_Init+0xb4>)
 8000758:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800075a:	4b1a      	ldr	r3, [pc, #104]	; (80007c4 <MX_GPIO_Init+0xb4>)
 800075c:	2101      	movs	r1, #1
 800075e:	430a      	orrs	r2, r1
 8000760:	62da      	str	r2, [r3, #44]	; 0x2c
 8000762:	4b18      	ldr	r3, [pc, #96]	; (80007c4 <MX_GPIO_Init+0xb4>)
 8000764:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000766:	2201      	movs	r2, #1
 8000768:	4013      	ands	r3, r2
 800076a:	60bb      	str	r3, [r7, #8]
 800076c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b15      	ldr	r3, [pc, #84]	; (80007c4 <MX_GPIO_Init+0xb4>)
 8000770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000772:	4b14      	ldr	r3, [pc, #80]	; (80007c4 <MX_GPIO_Init+0xb4>)
 8000774:	2102      	movs	r1, #2
 8000776:	430a      	orrs	r2, r1
 8000778:	62da      	str	r2, [r3, #44]	; 0x2c
 800077a:	4b12      	ldr	r3, [pc, #72]	; (80007c4 <MX_GPIO_Init+0xb4>)
 800077c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800077e:	2202      	movs	r2, #2
 8000780:	4013      	ands	r3, r2
 8000782:	607b      	str	r3, [r7, #4]
 8000784:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1|GPIO_PIN_3, GPIO_PIN_RESET);
 8000786:	23a0      	movs	r3, #160	; 0xa0
 8000788:	05db      	lsls	r3, r3, #23
 800078a:	2200      	movs	r2, #0
 800078c:	210a      	movs	r1, #10
 800078e:	0018      	movs	r0, r3
 8000790:	f000 ff82 	bl	8001698 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000794:	0021      	movs	r1, r4
 8000796:	187b      	adds	r3, r7, r1
 8000798:	220a      	movs	r2, #10
 800079a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800079c:	187b      	adds	r3, r7, r1
 800079e:	2201      	movs	r2, #1
 80007a0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a2:	187b      	adds	r3, r7, r1
 80007a4:	2200      	movs	r2, #0
 80007a6:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a8:	187b      	adds	r3, r7, r1
 80007aa:	2200      	movs	r2, #0
 80007ac:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ae:	187a      	adds	r2, r7, r1
 80007b0:	23a0      	movs	r3, #160	; 0xa0
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	0011      	movs	r1, r2
 80007b6:	0018      	movs	r0, r3
 80007b8:	f000 fdf8 	bl	80013ac <HAL_GPIO_Init>

}
 80007bc:	46c0      	nop			; (mov r8, r8)
 80007be:	46bd      	mov	sp, r7
 80007c0:	b00b      	add	sp, #44	; 0x2c
 80007c2:	bd90      	pop	{r4, r7, pc}
 80007c4:	40021000 	.word	0x40021000

080007c8 <LC_Init_GPIO>:

/* USER CODE BEGIN 4 */
static void LC_Init_GPIO(void)
{
 80007c8:	b590      	push	{r4, r7, lr}
 80007ca:	b08b      	sub	sp, #44	; 0x2c
 80007cc:	af00      	add	r7, sp, #0
	  GPIO_InitTypeDef GPIO_InitStruct;

	  /* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80007ce:	4b64      	ldr	r3, [pc, #400]	; (8000960 <LC_Init_GPIO+0x198>)
 80007d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007d2:	4b63      	ldr	r3, [pc, #396]	; (8000960 <LC_Init_GPIO+0x198>)
 80007d4:	2180      	movs	r1, #128	; 0x80
 80007d6:	430a      	orrs	r2, r1
 80007d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80007da:	4b61      	ldr	r3, [pc, #388]	; (8000960 <LC_Init_GPIO+0x198>)
 80007dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	4013      	ands	r3, r2
 80007e2:	613b      	str	r3, [r7, #16]
 80007e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80007e6:	4b5e      	ldr	r3, [pc, #376]	; (8000960 <LC_Init_GPIO+0x198>)
 80007e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80007ea:	4b5d      	ldr	r3, [pc, #372]	; (8000960 <LC_Init_GPIO+0x198>)
 80007ec:	2101      	movs	r1, #1
 80007ee:	430a      	orrs	r2, r1
 80007f0:	62da      	str	r2, [r3, #44]	; 0x2c
 80007f2:	4b5b      	ldr	r3, [pc, #364]	; (8000960 <LC_Init_GPIO+0x198>)
 80007f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	60fb      	str	r3, [r7, #12]
 80007fc:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80007fe:	4b58      	ldr	r3, [pc, #352]	; (8000960 <LC_Init_GPIO+0x198>)
 8000800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000802:	4b57      	ldr	r3, [pc, #348]	; (8000960 <LC_Init_GPIO+0x198>)
 8000804:	2102      	movs	r1, #2
 8000806:	430a      	orrs	r2, r1
 8000808:	62da      	str	r2, [r3, #44]	; 0x2c
 800080a:	4b55      	ldr	r3, [pc, #340]	; (8000960 <LC_Init_GPIO+0x198>)
 800080c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800080e:	2202      	movs	r2, #2
 8000810:	4013      	ands	r3, r2
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000816:	4b52      	ldr	r3, [pc, #328]	; (8000960 <LC_Init_GPIO+0x198>)
 8000818:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800081a:	4b51      	ldr	r3, [pc, #324]	; (8000960 <LC_Init_GPIO+0x198>)
 800081c:	2104      	movs	r1, #4
 800081e:	430a      	orrs	r2, r1
 8000820:	62da      	str	r2, [r3, #44]	; 0x2c
 8000822:	4b4f      	ldr	r3, [pc, #316]	; (8000960 <LC_Init_GPIO+0x198>)
 8000824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000826:	2204      	movs	r2, #4
 8000828:	4013      	ands	r3, r2
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800082e:	4b4c      	ldr	r3, [pc, #304]	; (8000960 <LC_Init_GPIO+0x198>)
 8000830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000832:	4b4b      	ldr	r3, [pc, #300]	; (8000960 <LC_Init_GPIO+0x198>)
 8000834:	2108      	movs	r1, #8
 8000836:	430a      	orrs	r2, r1
 8000838:	62da      	str	r2, [r3, #44]	; 0x2c
 800083a:	4b49      	ldr	r3, [pc, #292]	; (8000960 <LC_Init_GPIO+0x198>)
 800083c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800083e:	2208      	movs	r2, #8
 8000840:	4013      	ands	r3, r2
 8000842:	603b      	str	r3, [r7, #0]
 8000844:	683b      	ldr	r3, [r7, #0]

	/* Allows to release NJTRST pin and to use PB5 pin for LC sensor*/
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000846:	2414      	movs	r4, #20
 8000848:	193b      	adds	r3, r7, r4
 800084a:	2202      	movs	r2, #2
 800084c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Alternate = GPIO_AF7_COMP2;
 800084e:	193b      	adds	r3, r7, r4
 8000850:	2207      	movs	r2, #7
 8000852:	611a      	str	r2, [r3, #16]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	193b      	adds	r3, r7, r4
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	193b      	adds	r3, r7, r4
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000860:	193b      	adds	r3, r7, r4
 8000862:	2220      	movs	r2, #32
 8000864:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000866:	193b      	adds	r3, r7, r4
 8000868:	4a3e      	ldr	r2, [pc, #248]	; (8000964 <LC_Init_GPIO+0x19c>)
 800086a:	0019      	movs	r1, r3
 800086c:	0010      	movs	r0, r2
 800086e:	f000 fd9d 	bl	80013ac <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_2 | GPIO_PIN_4
 8000872:	193b      	adds	r3, r7, r4
 8000874:	4a3c      	ldr	r2, [pc, #240]	; (8000968 <LC_Init_GPIO+0x1a0>)
 8000876:	601a      	str	r2, [r3, #0]
							| GPIO_PIN_5 | GPIO_PIN_6| GPIO_PIN_8| GPIO_PIN_9
							| GPIO_PIN_10 | GPIO_PIN_11  ;
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2203      	movs	r2, #3
 800087c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800087e:	193b      	adds	r3, r7, r4
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	193a      	adds	r2, r7, r4
 8000886:	23a0      	movs	r3, #160	; 0xa0
 8000888:	05db      	lsls	r3, r3, #23
 800088a:	0011      	movs	r1, r2
 800088c:	0018      	movs	r0, r3
 800088e:	f000 fd8d 	bl	80013ac <HAL_GPIO_Init>

	GPIO_InitStruct.Pin = GPIO_PIN_All;
 8000892:	193b      	adds	r3, r7, r4
 8000894:	4a35      	ldr	r2, [pc, #212]	; (800096c <LC_Init_GPIO+0x1a4>)
 8000896:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	193b      	adds	r3, r7, r4
 800089a:	2203      	movs	r2, #3
 800089c:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800089e:	193b      	adds	r3, r7, r4
 80008a0:	2202      	movs	r2, #2
 80008a2:	609a      	str	r2, [r3, #8]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a4:	193b      	adds	r3, r7, r4
 80008a6:	4a2f      	ldr	r2, [pc, #188]	; (8000964 <LC_Init_GPIO+0x19c>)
 80008a8:	0019      	movs	r1, r3
 80008aa:	0010      	movs	r0, r2
 80008ac:	f000 fd7e 	bl	80013ac <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008b0:	193b      	adds	r3, r7, r4
 80008b2:	4a2f      	ldr	r2, [pc, #188]	; (8000970 <LC_Init_GPIO+0x1a8>)
 80008b4:	0019      	movs	r1, r3
 80008b6:	0010      	movs	r0, r2
 80008b8:	f000 fd78 	bl	80013ac <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008bc:	193b      	adds	r3, r7, r4
 80008be:	4a2d      	ldr	r2, [pc, #180]	; (8000974 <LC_Init_GPIO+0x1ac>)
 80008c0:	0019      	movs	r1, r3
 80008c2:	0010      	movs	r0, r2
 80008c4:	f000 fd72 	bl	80013ac <HAL_GPIO_Init>
	HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80008c8:	193b      	adds	r3, r7, r4
 80008ca:	4a2b      	ldr	r2, [pc, #172]	; (8000978 <LC_Init_GPIO+0x1b0>)
 80008cc:	0019      	movs	r1, r3
 80008ce:	0010      	movs	r0, r2
 80008d0:	f000 fd6c 	bl	80013ac <HAL_GPIO_Init>

	/*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_10 | GPIO_PIN_11;
 80008d4:	0021      	movs	r1, r4
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	22c0      	movs	r2, #192	; 0xc0
 80008da:	0112      	lsls	r2, r2, #4
 80008dc:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	000c      	movs	r4, r1
 80008e0:	193b      	adds	r3, r7, r4
 80008e2:	2202      	movs	r2, #2
 80008e4:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2200      	movs	r2, #0
 80008ea:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2203      	movs	r2, #3
 80008f0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 80008f2:	193b      	adds	r3, r7, r4
 80008f4:	2204      	movs	r2, #4
 80008f6:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008f8:	193b      	adds	r3, r7, r4
 80008fa:	4a1a      	ldr	r2, [pc, #104]	; (8000964 <LC_Init_GPIO+0x19c>)
 80008fc:	0019      	movs	r1, r3
 80008fe:	0010      	movs	r0, r2
 8000900:	f000 fd54 	bl	80013ac <HAL_GPIO_Init>

	/* Configure COMP2 non-inverting input pin configuration */
	GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000904:	193b      	adds	r3, r7, r4
 8000906:	2203      	movs	r2, #3
 8000908:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Speed = GPIO_SPEED_HIGH;
 800090a:	193b      	adds	r3, r7, r4
 800090c:	2203      	movs	r2, #3
 800090e:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000910:	193b      	adds	r3, r7, r4
 8000912:	2200      	movs	r2, #0
 8000914:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2220      	movs	r2, #32
 800091a:	601a      	str	r2, [r3, #0]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800091c:	193b      	adds	r3, r7, r4
 800091e:	4a11      	ldr	r2, [pc, #68]	; (8000964 <LC_Init_GPIO+0x19c>)
 8000920:	0019      	movs	r1, r3
 8000922:	0010      	movs	r0, r2
 8000924:	f000 fd42 	bl	80013ac <HAL_GPIO_Init>

	/* Configure COMP2 output pin configuration for debug*/
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000928:	0021      	movs	r1, r4
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	601a      	str	r2, [r3, #0]
	GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000930:	187b      	adds	r3, r7, r1
 8000932:	2202      	movs	r2, #2
 8000934:	605a      	str	r2, [r3, #4]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	187b      	adds	r3, r7, r1
 8000938:	2200      	movs	r2, #0
 800093a:	609a      	str	r2, [r3, #8]
	GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800093c:	187b      	adds	r3, r7, r1
 800093e:	2202      	movs	r2, #2
 8000940:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Alternate = GPIO_AF7_COMP2;
 8000942:	187b      	adds	r3, r7, r1
 8000944:	2207      	movs	r2, #7
 8000946:	611a      	str	r2, [r3, #16]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000948:	187a      	adds	r2, r7, r1
 800094a:	23a0      	movs	r3, #160	; 0xa0
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	0011      	movs	r1, r2
 8000950:	0018      	movs	r0, r3
 8000952:	f000 fd2b 	bl	80013ac <HAL_GPIO_Init>
}
 8000956:	46c0      	nop			; (mov r8, r8)
 8000958:	46bd      	mov	sp, r7
 800095a:	b00b      	add	sp, #44	; 0x2c
 800095c:	bd90      	pop	{r4, r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	40021000 	.word	0x40021000
 8000964:	50000400 	.word	0x50000400
 8000968:	00000f75 	.word	0x00000f75
 800096c:	0000ffff 	.word	0x0000ffff
 8000970:	50000800 	.word	0x50000800
 8000974:	50000c00 	.word	0x50000c00
 8000978:	50001c00 	.word	0x50001c00

0800097c <LcSensorInit>:
void LPUART_Transmit_String(const char *str) {
	HAL_UART_Transmit(&hlpuart1, (uint8_t*)str, strlen(str), HAL_MAX_DELAY);
   }

void LcSensorInit(void)
{
 800097c:	b580      	push	{r7, lr}
 800097e:	af00      	add	r7, sp, #0
  /* Initialize Lc status variables */
  LcStatus.MeasuresCount = 0;                   /* Reset measures counter to 0 */
 8000980:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <LcSensorInit+0x28>)
 8000982:	2200      	movs	r2, #0
 8000984:	635a      	str	r2, [r3, #52]	; 0x34
  LcStatus.EdgeCount = 0;                       /* Reset edge counter to 0 */
 8000986:	4b07      	ldr	r3, [pc, #28]	; (80009a4 <LcSensorInit+0x28>)
 8000988:	2200      	movs	r2, #0
 800098a:	639a      	str	r2, [r3, #56]	; 0x38
  /* Initialize LcSensor status */
  LcSensor1.Status = NO_METAL;                  /* Variable used to store sensor status - 0 = NO_METAL , 1 = METAL*/
 800098c:	4b06      	ldr	r3, [pc, #24]	; (80009a8 <LcSensorInit+0x2c>)
 800098e:	2200      	movs	r2, #0
 8000990:	775a      	strb	r2, [r3, #29]
  LcSensor1.PreviousStatus = NO_METAL;          /* Variable used to store previous sensor status (for transition detection)- 0 = NO_METAL , 1 = METAL*/
 8000992:	4b05      	ldr	r3, [pc, #20]	; (80009a8 <LcSensorInit+0x2c>)
 8000994:	2200      	movs	r2, #0
 8000996:	771a      	strb	r2, [r3, #28]
  LcSensor1.CountDetect = 2;
 8000998:	4b03      	ldr	r3, [pc, #12]	; (80009a8 <LcSensorInit+0x2c>)
 800099a:	2202      	movs	r2, #2
 800099c:	609a      	str	r2, [r3, #8]
}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	200000b0 	.word	0x200000b0
 80009a8:	2000008c 	.word	0x2000008c

080009ac <lcmeasure>:

void lcmeasure(void)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
	uint32_t counterValue = HAL_LPTIM_ReadCounter(&hlptim1);
 80009b2:	4b17      	ldr	r3, [pc, #92]	; (8000a10 <lcmeasure+0x64>)
 80009b4:	0018      	movs	r0, r3
 80009b6:	f000 ff61 	bl	800187c <HAL_LPTIM_ReadCounter>
 80009ba:	0003      	movs	r3, r0
 80009bc:	607b      	str	r3, [r7, #4]
	/* If oscillations are damped more than Count_detect then update Sensor 1 status */
	if (counterValue < LcSensor1.CountDetect)
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <lcmeasure+0x68>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	687a      	ldr	r2, [r7, #4]
 80009c4:	429a      	cmp	r2, r3
 80009c6:	d203      	bcs.n	80009d0 <lcmeasure+0x24>
	{
	    LcSensor1.Status = METAL;
 80009c8:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <lcmeasure+0x68>)
 80009ca:	2201      	movs	r2, #1
 80009cc:	775a      	strb	r2, [r3, #29]
 80009ce:	e002      	b.n	80009d6 <lcmeasure+0x2a>
	  }
	  else
	  {
	    LcSensor1.Status = NO_METAL;
 80009d0:	4b10      	ldr	r3, [pc, #64]	; (8000a14 <lcmeasure+0x68>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	775a      	strb	r2, [r3, #29]
	}
	/* Process edge count for Demo1*/
	/* Detect sensors transitions for Counting demo with 1 LC sensor*/
	if ((LcSensor1.Status || LcSensor1.PreviousStatus) && !(LcSensor1.Status && LcSensor1.PreviousStatus ))
 80009d6:	4b0f      	ldr	r3, [pc, #60]	; (8000a14 <lcmeasure+0x68>)
 80009d8:	7f5b      	ldrb	r3, [r3, #29]
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d103      	bne.n	80009e6 <lcmeasure+0x3a>
 80009de:	4b0d      	ldr	r3, [pc, #52]	; (8000a14 <lcmeasure+0x68>)
 80009e0:	7f1b      	ldrb	r3, [r3, #28]
 80009e2:	2b00      	cmp	r3, #0
 80009e4:	d00c      	beq.n	8000a00 <lcmeasure+0x54>
 80009e6:	4b0b      	ldr	r3, [pc, #44]	; (8000a14 <lcmeasure+0x68>)
 80009e8:	7f5b      	ldrb	r3, [r3, #29]
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d003      	beq.n	80009f6 <lcmeasure+0x4a>
 80009ee:	4b09      	ldr	r3, [pc, #36]	; (8000a14 <lcmeasure+0x68>)
 80009f0:	7f1b      	ldrb	r3, [r3, #28]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d104      	bne.n	8000a00 <lcmeasure+0x54>
	{
	    LcStatus.EdgeCount++;
 80009f6:	4b08      	ldr	r3, [pc, #32]	; (8000a18 <lcmeasure+0x6c>)
 80009f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80009fa:	1c5a      	adds	r2, r3, #1
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <lcmeasure+0x6c>)
 80009fe:	639a      	str	r2, [r3, #56]	; 0x38
	}
	/* Refresh PreviousStatus for next transition detection*/
	  LcSensor1.PreviousStatus = LcSensor1.Status;
 8000a00:	4b04      	ldr	r3, [pc, #16]	; (8000a14 <lcmeasure+0x68>)
 8000a02:	7f5a      	ldrb	r2, [r3, #29]
 8000a04:	4b03      	ldr	r3, [pc, #12]	; (8000a14 <lcmeasure+0x68>)
 8000a06:	771a      	strb	r2, [r3, #28]

}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	b002      	add	sp, #8
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000158 	.word	0x20000158
 8000a14:	2000008c 	.word	0x2000008c
 8000a18:	200000b0 	.word	0x200000b0

08000a1c <lctransmit>:
void lctransmit (void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
	uint8_t aMsgBuffer[30];
	/* local variables from global volatile variables to avoid compilations and executions issues */
	uint8_t status;
	uint32_t edge_count;
	status = LcSensor1.Status;
 8000a22:	2127      	movs	r1, #39	; 0x27
 8000a24:	187b      	adds	r3, r7, r1
 8000a26:	4a0b      	ldr	r2, [pc, #44]	; (8000a54 <lctransmit+0x38>)
 8000a28:	7f52      	ldrb	r2, [r2, #29]
 8000a2a:	701a      	strb	r2, [r3, #0]
	edge_count = LcStatus.EdgeCount;
 8000a2c:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <lctransmit+0x3c>)
 8000a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000a30:	623b      	str	r3, [r7, #32]
	/* Fill buffer */
	sprintf((char*)aMsgBuffer, "S:%d\tE:%lu\r\n", status, edge_count);
 8000a32:	187b      	adds	r3, r7, r1
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	6a3b      	ldr	r3, [r7, #32]
 8000a38:	4908      	ldr	r1, [pc, #32]	; (8000a5c <lctransmit+0x40>)
 8000a3a:	0038      	movs	r0, r7
 8000a3c:	f002 fbfe 	bl	800323c <siprintf>
	/* USART2 Transmit */
	  HAL_UART_Transmit(&hlpuart1, aMsgBuffer, TXBUFFERSIZE(aMsgBuffer), 0xFFFF);
 8000a40:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <lctransmit+0x44>)
 8000a42:	0039      	movs	r1, r7
 8000a44:	4807      	ldr	r0, [pc, #28]	; (8000a64 <lctransmit+0x48>)
 8000a46:	221d      	movs	r2, #29
 8000a48:	f001 fe78 	bl	800273c <HAL_UART_Transmit>
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b00a      	add	sp, #40	; 0x28
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	2000008c 	.word	0x2000008c
 8000a58:	200000b0 	.word	0x200000b0
 8000a5c:	08003b28 	.word	0x08003b28
 8000a60:	0000ffff 	.word	0x0000ffff
 8000a64:	20000188 	.word	0x20000188

08000a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a6c:	b672      	cpsid	i
}
 8000a6e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <Error_Handler+0x8>
	...

08000a74 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a78:	4b07      	ldr	r3, [pc, #28]	; (8000a98 <HAL_MspInit+0x24>)
 8000a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_MspInit+0x24>)
 8000a7e:	2101      	movs	r1, #1
 8000a80:	430a      	orrs	r2, r1
 8000a82:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <HAL_MspInit+0x24>)
 8000a86:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000a88:	4b03      	ldr	r3, [pc, #12]	; (8000a98 <HAL_MspInit+0x24>)
 8000a8a:	2180      	movs	r1, #128	; 0x80
 8000a8c:	0549      	lsls	r1, r1, #21
 8000a8e:	430a      	orrs	r2, r1
 8000a90:	639a      	str	r2, [r3, #56]	; 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a92:	46c0      	nop			; (mov r8, r8)
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40021000 	.word	0x40021000

08000a9c <HAL_COMP_MspInit>:
* This function configures the hardware resources used in this example
* @param hcomp: COMP handle pointer
* @retval None
*/
void HAL_COMP_MspInit(COMP_HandleTypeDef* hcomp)
{
 8000a9c:	b590      	push	{r4, r7, lr}
 8000a9e:	b08b      	sub	sp, #44	; 0x2c
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aa4:	2414      	movs	r4, #20
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	0018      	movs	r0, r3
 8000aaa:	2314      	movs	r3, #20
 8000aac:	001a      	movs	r2, r3
 8000aae:	2100      	movs	r1, #0
 8000ab0:	f002 fbbc 	bl	800322c <memset>
  if(hcomp->Instance==COMP2)
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	4a29      	ldr	r2, [pc, #164]	; (8000b60 <HAL_COMP_MspInit+0xc4>)
 8000aba:	4293      	cmp	r3, r2
 8000abc:	d14c      	bne.n	8000b58 <HAL_COMP_MspInit+0xbc>
  {
  /* USER CODE BEGIN COMP2_MspInit 0 */

  /* USER CODE END COMP2_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abe:	4b29      	ldr	r3, [pc, #164]	; (8000b64 <HAL_COMP_MspInit+0xc8>)
 8000ac0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ac2:	4b28      	ldr	r3, [pc, #160]	; (8000b64 <HAL_COMP_MspInit+0xc8>)
 8000ac4:	2101      	movs	r1, #1
 8000ac6:	430a      	orrs	r2, r1
 8000ac8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000aca:	4b26      	ldr	r3, [pc, #152]	; (8000b64 <HAL_COMP_MspInit+0xc8>)
 8000acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ace:	2201      	movs	r2, #1
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <HAL_COMP_MspInit+0xc8>)
 8000ad8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ada:	4b22      	ldr	r3, [pc, #136]	; (8000b64 <HAL_COMP_MspInit+0xc8>)
 8000adc:	2102      	movs	r1, #2
 8000ade:	430a      	orrs	r2, r1
 8000ae0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000ae2:	4b20      	ldr	r3, [pc, #128]	; (8000b64 <HAL_COMP_MspInit+0xc8>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	4013      	ands	r3, r2
 8000aea:	60fb      	str	r3, [r7, #12]
 8000aec:	68fb      	ldr	r3, [r7, #12]
    /**COMP2 GPIO Configuration
    PA2     ------> COMP2_INM
    PA7     ------> COMP2_OUT
    PB5     ------> COMP2_INP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000aee:	193b      	adds	r3, r7, r4
 8000af0:	2204      	movs	r2, #4
 8000af2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000af4:	193b      	adds	r3, r7, r4
 8000af6:	2203      	movs	r2, #3
 8000af8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	193b      	adds	r3, r7, r4
 8000afc:	2200      	movs	r2, #0
 8000afe:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b00:	193a      	adds	r2, r7, r4
 8000b02:	23a0      	movs	r3, #160	; 0xa0
 8000b04:	05db      	lsls	r3, r3, #23
 8000b06:	0011      	movs	r1, r2
 8000b08:	0018      	movs	r0, r3
 8000b0a:	f000 fc4f 	bl	80013ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000b0e:	193b      	adds	r3, r7, r4
 8000b10:	2280      	movs	r2, #128	; 0x80
 8000b12:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b14:	193b      	adds	r3, r7, r4
 8000b16:	2202      	movs	r2, #2
 8000b18:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	193b      	adds	r3, r7, r4
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b20:	193b      	adds	r3, r7, r4
 8000b22:	2200      	movs	r2, #0
 8000b24:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_COMP2;
 8000b26:	193b      	adds	r3, r7, r4
 8000b28:	2207      	movs	r2, #7
 8000b2a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b2c:	193a      	adds	r2, r7, r4
 8000b2e:	23a0      	movs	r3, #160	; 0xa0
 8000b30:	05db      	lsls	r3, r3, #23
 8000b32:	0011      	movs	r1, r2
 8000b34:	0018      	movs	r0, r3
 8000b36:	f000 fc39 	bl	80013ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000b3a:	193b      	adds	r3, r7, r4
 8000b3c:	2220      	movs	r2, #32
 8000b3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b40:	193b      	adds	r3, r7, r4
 8000b42:	2203      	movs	r2, #3
 8000b44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	193b      	adds	r3, r7, r4
 8000b48:	2200      	movs	r2, #0
 8000b4a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b4c:	193b      	adds	r3, r7, r4
 8000b4e:	4a06      	ldr	r2, [pc, #24]	; (8000b68 <HAL_COMP_MspInit+0xcc>)
 8000b50:	0019      	movs	r1, r3
 8000b52:	0010      	movs	r0, r2
 8000b54:	f000 fc2a 	bl	80013ac <HAL_GPIO_Init>
  /* USER CODE BEGIN COMP2_MspInit 1 */

  /* USER CODE END COMP2_MspInit 1 */
  }

}
 8000b58:	46c0      	nop			; (mov r8, r8)
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	b00b      	add	sp, #44	; 0x2c
 8000b5e:	bd90      	pop	{r4, r7, pc}
 8000b60:	4001001c 	.word	0x4001001c
 8000b64:	40021000 	.word	0x40021000
 8000b68:	50000400 	.word	0x50000400

08000b6c <HAL_LPTIM_MspInit>:
* This function configures the hardware resources used in this example
* @param hlptim: LPTIM handle pointer
* @retval None
*/
void HAL_LPTIM_MspInit(LPTIM_HandleTypeDef* hlptim)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b082      	sub	sp, #8
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  if(hlptim->Instance==LPTIM1)
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	4a06      	ldr	r2, [pc, #24]	; (8000b94 <HAL_LPTIM_MspInit+0x28>)
 8000b7a:	4293      	cmp	r3, r2
 8000b7c:	d106      	bne.n	8000b8c <HAL_LPTIM_MspInit+0x20>
  {
  /* USER CODE BEGIN LPTIM1_MspInit 0 */

  /* USER CODE END LPTIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPTIM1_CLK_ENABLE();
 8000b7e:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <HAL_LPTIM_MspInit+0x2c>)
 8000b80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000b82:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <HAL_LPTIM_MspInit+0x2c>)
 8000b84:	2180      	movs	r1, #128	; 0x80
 8000b86:	0609      	lsls	r1, r1, #24
 8000b88:	430a      	orrs	r2, r1
 8000b8a:	639a      	str	r2, [r3, #56]	; 0x38
  /* USER CODE BEGIN LPTIM1_MspInit 1 */

  /* USER CODE END LPTIM1_MspInit 1 */
  }

}
 8000b8c:	46c0      	nop			; (mov r8, r8)
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	b002      	add	sp, #8
 8000b92:	bd80      	pop	{r7, pc}
 8000b94:	40007c00 	.word	0x40007c00
 8000b98:	40021000 	.word	0x40021000

08000b9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b089      	sub	sp, #36	; 0x24
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba4:	240c      	movs	r4, #12
 8000ba6:	193b      	adds	r3, r7, r4
 8000ba8:	0018      	movs	r0, r3
 8000baa:	2314      	movs	r3, #20
 8000bac:	001a      	movs	r2, r3
 8000bae:	2100      	movs	r1, #0
 8000bb0:	f002 fb3c 	bl	800322c <memset>
  if(huart->Instance==LPUART1)
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	681b      	ldr	r3, [r3, #0]
 8000bb8:	4a18      	ldr	r2, [pc, #96]	; (8000c1c <HAL_UART_MspInit+0x80>)
 8000bba:	4293      	cmp	r3, r2
 8000bbc:	d129      	bne.n	8000c12 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bbe:	4b18      	ldr	r3, [pc, #96]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000bc2:	4b17      	ldr	r3, [pc, #92]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bc4:	2180      	movs	r1, #128	; 0x80
 8000bc6:	02c9      	lsls	r1, r1, #11
 8000bc8:	430a      	orrs	r2, r1
 8000bca:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bcc:	4b14      	ldr	r3, [pc, #80]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bd0:	4b13      	ldr	r3, [pc, #76]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	430a      	orrs	r2, r1
 8000bd6:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bd8:	4b11      	ldr	r3, [pc, #68]	; (8000c20 <HAL_UART_MspInit+0x84>)
 8000bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bdc:	2202      	movs	r2, #2
 8000bde:	4013      	ands	r3, r2
 8000be0:	60bb      	str	r3, [r7, #8]
 8000be2:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PB10     ------> LPUART1_TX
    PB11     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	22c0      	movs	r2, #192	; 0xc0
 8000be8:	0112      	lsls	r2, r2, #4
 8000bea:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bec:	0021      	movs	r1, r4
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	187b      	adds	r3, r7, r1
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bfa:	187b      	adds	r3, r7, r1
 8000bfc:	2203      	movs	r2, #3
 8000bfe:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_LPUART1;
 8000c00:	187b      	adds	r3, r7, r1
 8000c02:	2204      	movs	r2, #4
 8000c04:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c06:	187b      	adds	r3, r7, r1
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <HAL_UART_MspInit+0x88>)
 8000c0a:	0019      	movs	r1, r3
 8000c0c:	0010      	movs	r0, r2
 8000c0e:	f000 fbcd 	bl	80013ac <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	46bd      	mov	sp, r7
 8000c16:	b009      	add	sp, #36	; 0x24
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	46c0      	nop			; (mov r8, r8)
 8000c1c:	40004800 	.word	0x40004800
 8000c20:	40021000 	.word	0x40021000
 8000c24:	50000400 	.word	0x50000400

08000c28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <NMI_Handler+0x4>

08000c2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c32:	e7fe      	b.n	8000c32 <HardFault_Handler+0x4>

08000c34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c38:	46c0      	nop			; (mov r8, r8)
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}

08000c3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c3e:	b580      	push	{r7, lr}
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c42:	46c0      	nop			; (mov r8, r8)
 8000c44:	46bd      	mov	sp, r7
 8000c46:	bd80      	pop	{r7, pc}

08000c48 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c4c:	f000 f8be 	bl	8000dcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c50:	46c0      	nop			; (mov r8, r8)
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
	...

08000c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b086      	sub	sp, #24
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000c60:	4a14      	ldr	r2, [pc, #80]	; (8000cb4 <_sbrk+0x5c>)
 8000c62:	4b15      	ldr	r3, [pc, #84]	; (8000cb8 <_sbrk+0x60>)
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000c6c:	4b13      	ldr	r3, [pc, #76]	; (8000cbc <_sbrk+0x64>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d102      	bne.n	8000c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <_sbrk+0x64>)
 8000c76:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <_sbrk+0x68>)
 8000c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000c7a:	4b10      	ldr	r3, [pc, #64]	; (8000cbc <_sbrk+0x64>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	18d3      	adds	r3, r2, r3
 8000c82:	693a      	ldr	r2, [r7, #16]
 8000c84:	429a      	cmp	r2, r3
 8000c86:	d207      	bcs.n	8000c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000c88:	f002 faa6 	bl	80031d8 <__errno>
 8000c8c:	0003      	movs	r3, r0
 8000c8e:	220c      	movs	r2, #12
 8000c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000c92:	2301      	movs	r3, #1
 8000c94:	425b      	negs	r3, r3
 8000c96:	e009      	b.n	8000cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000c98:	4b08      	ldr	r3, [pc, #32]	; (8000cbc <_sbrk+0x64>)
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000c9e:	4b07      	ldr	r3, [pc, #28]	; (8000cbc <_sbrk+0x64>)
 8000ca0:	681a      	ldr	r2, [r3, #0]
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	18d2      	adds	r2, r2, r3
 8000ca6:	4b05      	ldr	r3, [pc, #20]	; (8000cbc <_sbrk+0x64>)
 8000ca8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000caa:	68fb      	ldr	r3, [r7, #12]
}
 8000cac:	0018      	movs	r0, r3
 8000cae:	46bd      	mov	sp, r7
 8000cb0:	b006      	add	sp, #24
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	20002000 	.word	0x20002000
 8000cb8:	00000400 	.word	0x00000400
 8000cbc:	20000210 	.word	0x20000210
 8000cc0:	20000228 	.word	0x20000228

08000cc4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000cc8:	46c0      	nop			; (mov r8, r8)
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
	...

08000cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 8000cd0:	480d      	ldr	r0, [pc, #52]	; (8000d08 <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 8000cd2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000cd4:	f7ff fff6 	bl	8000cc4 <SystemInit>
  
/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000cd8:	480c      	ldr	r0, [pc, #48]	; (8000d0c <LoopForever+0x6>)
  ldr r1, =_edata
 8000cda:	490d      	ldr	r1, [pc, #52]	; (8000d10 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cdc:	4a0d      	ldr	r2, [pc, #52]	; (8000d14 <LoopForever+0xe>)
  movs r3, #0
 8000cde:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce0:	e002      	b.n	8000ce8 <LoopCopyDataInit>

08000ce2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ce2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ce4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ce6:	3304      	adds	r3, #4

08000ce8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ce8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cec:	d3f9      	bcc.n	8000ce2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cee:	4a0a      	ldr	r2, [pc, #40]	; (8000d18 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cf0:	4c0a      	ldr	r4, [pc, #40]	; (8000d1c <LoopForever+0x16>)
  movs r3, #0
 8000cf2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cf4:	e001      	b.n	8000cfa <LoopFillZerobss>

08000cf6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cf6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cf8:	3204      	adds	r2, #4

08000cfa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cfa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cfc:	d3fb      	bcc.n	8000cf6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cfe:	f002 fa71 	bl	80031e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d02:	f7ff fbdb 	bl	80004bc <main>

08000d06 <LoopForever>:

LoopForever:
    b LoopForever
 8000d06:	e7fe      	b.n	8000d06 <LoopForever>
   ldr   r0, =_estack
 8000d08:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d10:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000d14:	08003be8 	.word	0x08003be8
  ldr r2, =_sbss
 8000d18:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000d1c:	20000228 	.word	0x20000228

08000d20 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d20:	e7fe      	b.n	8000d20 <ADC1_COMP_IRQHandler>
	...

08000d24 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d2a:	1dfb      	adds	r3, r7, #7
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000d30:	4b0b      	ldr	r3, [pc, #44]	; (8000d60 <HAL_Init+0x3c>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b0a      	ldr	r3, [pc, #40]	; (8000d60 <HAL_Init+0x3c>)
 8000d36:	2140      	movs	r1, #64	; 0x40
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d3c:	2003      	movs	r0, #3
 8000d3e:	f000 f811 	bl	8000d64 <HAL_InitTick>
 8000d42:	1e03      	subs	r3, r0, #0
 8000d44:	d003      	beq.n	8000d4e <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000d46:	1dfb      	adds	r3, r7, #7
 8000d48:	2201      	movs	r2, #1
 8000d4a:	701a      	strb	r2, [r3, #0]
 8000d4c:	e001      	b.n	8000d52 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d4e:	f7ff fe91 	bl	8000a74 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d52:	1dfb      	adds	r3, r7, #7
 8000d54:	781b      	ldrb	r3, [r3, #0]
}
 8000d56:	0018      	movs	r0, r3
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	46c0      	nop			; (mov r8, r8)
 8000d60:	40022000 	.word	0x40022000

08000d64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d64:	b590      	push	{r4, r7, lr}
 8000d66:	b083      	sub	sp, #12
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <HAL_InitTick+0x5c>)
 8000d6e:	681c      	ldr	r4, [r3, #0]
 8000d70:	4b14      	ldr	r3, [pc, #80]	; (8000dc4 <HAL_InitTick+0x60>)
 8000d72:	781b      	ldrb	r3, [r3, #0]
 8000d74:	0019      	movs	r1, r3
 8000d76:	23fa      	movs	r3, #250	; 0xfa
 8000d78:	0098      	lsls	r0, r3, #2
 8000d7a:	f7ff f9cf 	bl	800011c <__udivsi3>
 8000d7e:	0003      	movs	r3, r0
 8000d80:	0019      	movs	r1, r3
 8000d82:	0020      	movs	r0, r4
 8000d84:	f7ff f9ca 	bl	800011c <__udivsi3>
 8000d88:	0003      	movs	r3, r0
 8000d8a:	0018      	movs	r0, r3
 8000d8c:	f000 fb01 	bl	8001392 <HAL_SYSTICK_Config>
 8000d90:	1e03      	subs	r3, r0, #0
 8000d92:	d001      	beq.n	8000d98 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000d94:	2301      	movs	r3, #1
 8000d96:	e00f      	b.n	8000db8 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	2b03      	cmp	r3, #3
 8000d9c:	d80b      	bhi.n	8000db6 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d9e:	6879      	ldr	r1, [r7, #4]
 8000da0:	2301      	movs	r3, #1
 8000da2:	425b      	negs	r3, r3
 8000da4:	2200      	movs	r2, #0
 8000da6:	0018      	movs	r0, r3
 8000da8:	f000 fade 	bl	8001368 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000dac:	4b06      	ldr	r3, [pc, #24]	; (8000dc8 <HAL_InitTick+0x64>)
 8000dae:	687a      	ldr	r2, [r7, #4]
 8000db0:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000db2:	2300      	movs	r3, #0
 8000db4:	e000      	b.n	8000db8 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000db6:	2301      	movs	r3, #1
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b003      	add	sp, #12
 8000dbe:	bd90      	pop	{r4, r7, pc}
 8000dc0:	20000000 	.word	0x20000000
 8000dc4:	20000008 	.word	0x20000008
 8000dc8:	20000004 	.word	0x20000004

08000dcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000dd0:	4b05      	ldr	r3, [pc, #20]	; (8000de8 <HAL_IncTick+0x1c>)
 8000dd2:	781b      	ldrb	r3, [r3, #0]
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	4b05      	ldr	r3, [pc, #20]	; (8000dec <HAL_IncTick+0x20>)
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	18d2      	adds	r2, r2, r3
 8000ddc:	4b03      	ldr	r3, [pc, #12]	; (8000dec <HAL_IncTick+0x20>)
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	46c0      	nop			; (mov r8, r8)
 8000de8:	20000008 	.word	0x20000008
 8000dec:	20000214 	.word	0x20000214

08000df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  return uwTick;
 8000df4:	4b02      	ldr	r3, [pc, #8]	; (8000e00 <HAL_GetTick+0x10>)
 8000df6:	681b      	ldr	r3, [r3, #0]
}
 8000df8:	0018      	movs	r0, r3
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	46c0      	nop			; (mov r8, r8)
 8000e00:	20000214 	.word	0x20000214

08000e04 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b084      	sub	sp, #16
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e0c:	f7ff fff0 	bl	8000df0 <HAL_GetTick>
 8000e10:	0003      	movs	r3, r0
 8000e12:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e1e:	4b0a      	ldr	r3, [pc, #40]	; (8000e48 <HAL_Delay+0x44>)
 8000e20:	781b      	ldrb	r3, [r3, #0]
 8000e22:	001a      	movs	r2, r3
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	189b      	adds	r3, r3, r2
 8000e28:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000e2a:	46c0      	nop			; (mov r8, r8)
 8000e2c:	f7ff ffe0 	bl	8000df0 <HAL_GetTick>
 8000e30:	0002      	movs	r2, r0
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	68fa      	ldr	r2, [r7, #12]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	d8f7      	bhi.n	8000e2c <HAL_Delay+0x28>
  {
  }
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46c0      	nop			; (mov r8, r8)
 8000e40:	46bd      	mov	sp, r7
 8000e42:	b004      	add	sp, #16
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000008 	.word	0x20000008

08000e4c <HAL_GetREVID>:
/**
  * @brief Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  return((DBGMCU->IDCODE) >> 16U);
 8000e50:	4b02      	ldr	r3, [pc, #8]	; (8000e5c <HAL_GetREVID+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	0c1b      	lsrs	r3, r3, #16
}
 8000e56:	0018      	movs	r0, r3
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40015800 	.word	0x40015800

08000e60 <HAL_GetDEVID>:
/**
  * @brief  Returns the device identifier.
  * @retval Device identifier
  */
uint32_t HAL_GetDEVID(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) & IDCODE_DEVID_MASK);
 8000e64:	4b03      	ldr	r3, [pc, #12]	; (8000e74 <HAL_GetDEVID+0x14>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	051b      	lsls	r3, r3, #20
 8000e6a:	0d1b      	lsrs	r3, r3, #20
}
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	40015800 	.word	0x40015800

08000e78 <HAL_COMP_Init>:
            and LPTIM_IN2(PB7, PC2) should not be configured in alternate function.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Init(COMP_HandleTypeDef *hcomp)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_csr = 0U;
 8000e80:	2300      	movs	r3, #0
 8000e82:	61fb      	str	r3, [r7, #28]
  uint32_t exti_line = 0U;
 8000e84:	2300      	movs	r3, #0
 8000e86:	617b      	str	r3, [r7, #20]
  uint32_t comp_voltage_scaler_not_initialized = 0U;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	613b      	str	r3, [r7, #16]
  __IO uint32_t wait_loop_index = 0U;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8000e90:	231b      	movs	r3, #27
 8000e92:	18fb      	adds	r3, r7, r3
 8000e94:	2200      	movs	r2, #0
 8000e96:	701a      	strb	r2, [r3, #0]
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || (__HAL_COMP_IS_LOCKED(hcomp)))
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d008      	beq.n	8000eb0 <HAL_COMP_Init+0x38>
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	0fdb      	lsrs	r3, r3, #31
 8000ea6:	07da      	lsls	r2, r3, #31
 8000ea8:	2380      	movs	r3, #128	; 0x80
 8000eaa:	061b      	lsls	r3, r3, #24
 8000eac:	429a      	cmp	r2, r3
 8000eae:	d104      	bne.n	8000eba <HAL_COMP_Init+0x42>
  {
    status = HAL_ERROR;
 8000eb0:	231b      	movs	r3, #27
 8000eb2:	18fb      	adds	r3, r7, r3
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	e14d      	b.n	8001156 <HAL_COMP_Init+0x2de>
    assert_param(IS_COMP_OUTPUTPOL(hcomp->Init.OutputPol));
    assert_param(IS_COMP_POWERMODE(hcomp->Init.Mode));
    assert_param(IS_COMP_TRIGGERMODE(hcomp->Init.TriggerMode));
    assert_param(IS_COMP_WINDOWMODE(hcomp->Init.WindowMode));
    
    if(hcomp->State == HAL_COMP_STATE_RESET)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	2221      	movs	r2, #33	; 0x21
 8000ebe:	5c9b      	ldrb	r3, [r3, r2]
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10d      	bne.n	8000ee2 <HAL_COMP_Init+0x6a>
    {
      /* Allocate lock resource and initialize it */
      hcomp->Lock = HAL_UNLOCKED;
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2220      	movs	r2, #32
 8000eca:	2100      	movs	r1, #0
 8000ecc:	5499      	strb	r1, [r3, r2]
      /*       COMP clock enable must be implemented by user                  */
      /*       in "HAL_COMP_MspInit()".                                       */
      /*       Therefore, for compatibility anticipation, it is recommended   */
      /*       to implement __HAL_RCC_SYSCFG_CLK_ENABLE()                     */
      /*       in "HAL_COMP_MspInit()".                                       */
      __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ece:	4ba5      	ldr	r3, [pc, #660]	; (8001164 <HAL_COMP_Init+0x2ec>)
 8000ed0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ed2:	4ba4      	ldr	r3, [pc, #656]	; (8001164 <HAL_COMP_Init+0x2ec>)
 8000ed4:	2101      	movs	r1, #1
 8000ed6:	430a      	orrs	r2, r1
 8000ed8:	635a      	str	r2, [r3, #52]	; 0x34
      
      /* Init the low level hardware */
      hcomp->MspInitCallback(hcomp);
#else
      /* Init the low level hardware */
      HAL_COMP_MspInit(hcomp);
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	0018      	movs	r0, r3
 8000ede:	f7ff fddd 	bl	8000a9c <HAL_COMP_MspInit>
#endif /* USE_HAL_COMP_REGISTER_CALLBACKS */
    }
    
    /* Set COMP parameters */
    tmp_csr = (hcomp->Init.InvertingInput   |
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	691a      	ldr	r2, [r3, #16]
               hcomp->Init.OutputPol         );
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	695b      	ldr	r3, [r3, #20]
    tmp_csr = (hcomp->Init.InvertingInput   |
 8000eea:	4313      	orrs	r3, r2
 8000eec:	61fb      	str	r3, [r7, #28]
    
    /* Configuration specific to comparator instance: COMP2 */
    if ((hcomp->Instance) == COMP2)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	681b      	ldr	r3, [r3, #0]
 8000ef2:	4a9d      	ldr	r2, [pc, #628]	; (8001168 <HAL_COMP_Init+0x2f0>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d13b      	bne.n	8000f70 <HAL_COMP_Init+0xf8>
    {
      /* Comparator input plus configuration is available on COMP2 only */
      /* Comparator power mode configuration is available on COMP2 only */
      tmp_csr |= (hcomp->Init.NonInvertingInput |
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	68da      	ldr	r2, [r3, #12]
                  hcomp->Init.Mode               );
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	689b      	ldr	r3, [r3, #8]
      tmp_csr |= (hcomp->Init.NonInvertingInput |
 8000f00:	4313      	orrs	r3, r2
 8000f02:	69fa      	ldr	r2, [r7, #28]
 8000f04:	4313      	orrs	r3, r2
 8000f06:	61fb      	str	r3, [r7, #28]
      
      /* COMP2 specificity: when using VrefInt or subdivision of VrefInt,     */
      /* specific path must be enabled.                                       */
      if((hcomp->Init.InvertingInput == COMP_INPUT_MINUS_VREFINT)    ||
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	691b      	ldr	r3, [r3, #16]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d00b      	beq.n	8000f28 <HAL_COMP_Init+0xb0>
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_4VREFINT) ||
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	691b      	ldr	r3, [r3, #16]
      if((hcomp->Init.InvertingInput == COMP_INPUT_MINUS_VREFINT)    ||
 8000f14:	2b40      	cmp	r3, #64	; 0x40
 8000f16:	d007      	beq.n	8000f28 <HAL_COMP_Init+0xb0>
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_2VREFINT) ||
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	691b      	ldr	r3, [r3, #16]
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_4VREFINT) ||
 8000f1c:	2b50      	cmp	r3, #80	; 0x50
 8000f1e:	d003      	beq.n	8000f28 <HAL_COMP_Init+0xb0>
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_3_4VREFINT)   )
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	691b      	ldr	r3, [r3, #16]
         (hcomp->Init.InvertingInput == COMP_INPUT_MINUS_1_2VREFINT) ||
 8000f24:	2b60      	cmp	r3, #96	; 0x60
 8000f26:	d123      	bne.n	8000f70 <HAL_COMP_Init+0xf8>
      {
        /* Memorize voltage scaler state before initialization */
        comp_voltage_scaler_not_initialized = (READ_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP) == 0U);
 8000f28:	4b90      	ldr	r3, [pc, #576]	; (800116c <HAL_COMP_Init+0x2f4>)
 8000f2a:	6a1a      	ldr	r2, [r3, #32]
 8000f2c:	2380      	movs	r3, #128	; 0x80
 8000f2e:	015b      	lsls	r3, r3, #5
 8000f30:	4013      	ands	r3, r2
 8000f32:	425a      	negs	r2, r3
 8000f34:	4153      	adcs	r3, r2
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	613b      	str	r3, [r7, #16]
        
        SET_BIT(SYSCFG->CFGR3, SYSCFG_CFGR3_EN_VREFINT           |
 8000f3a:	4b8c      	ldr	r3, [pc, #560]	; (800116c <HAL_COMP_Init+0x2f4>)
 8000f3c:	6a1a      	ldr	r2, [r3, #32]
 8000f3e:	4b8b      	ldr	r3, [pc, #556]	; (800116c <HAL_COMP_Init+0x2f4>)
 8000f40:	498b      	ldr	r1, [pc, #556]	; (8001170 <HAL_COMP_Init+0x2f8>)
 8000f42:	430a      	orrs	r2, r1
 8000f44:	621a      	str	r2, [r3, #32]
                               SYSCFG_CFGR3_ENBUFLP_VREFINT_COMP  );
        
        /* Delay for COMP scaler bridge voltage stabilization */
        /* Apply the delay if voltage scaler bridge is enabled for the first time */
        if (comp_voltage_scaler_not_initialized != 0U)
 8000f46:	693b      	ldr	r3, [r7, #16]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d011      	beq.n	8000f70 <HAL_COMP_Init+0xf8>
        {
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles.                                     */
          wait_loop_index = (COMP_DELAY_VOLTAGE_SCALER_STAB_US * (SystemCoreClock / (1000000U * 2U)));
 8000f4c:	4b89      	ldr	r3, [pc, #548]	; (8001174 <HAL_COMP_Init+0x2fc>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	4989      	ldr	r1, [pc, #548]	; (8001178 <HAL_COMP_Init+0x300>)
 8000f52:	0018      	movs	r0, r3
 8000f54:	f7ff f8e2 	bl	800011c <__udivsi3>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	001a      	movs	r2, r3
 8000f5c:	4b87      	ldr	r3, [pc, #540]	; (800117c <HAL_COMP_Init+0x304>)
 8000f5e:	4353      	muls	r3, r2
 8000f60:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000f62:	e002      	b.n	8000f6a <HAL_COMP_Init+0xf2>
          {
            wait_loop_index--;
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	3b01      	subs	r3, #1
 8000f68:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000f6a:	68fb      	ldr	r3, [r7, #12]
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d1f9      	bne.n	8000f64 <HAL_COMP_Init+0xec>
        }
      }
    }
    
    /* Set comparator output connection to LPTIM */
    if (hcomp->Init.LPTIMConnection != COMP_LPTIMCONNECTION_DISABLED)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	699b      	ldr	r3, [r3, #24]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d045      	beq.n	8001004 <HAL_COMP_Init+0x18c>
    {
      /* LPTIM connection requested on COMP1 */
      if ((hcomp->Instance) == COMP1)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a80      	ldr	r2, [pc, #512]	; (8001180 <HAL_COMP_Init+0x308>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d105      	bne.n	8000f8e <HAL_COMP_Init+0x116>
        assert_param(IS_COMP1_LPTIMCONNECTION(hcomp->Init.LPTIMConnection));
        
        /* Note: Compatibility with previous driver version using             */
        /* generic literal COMP_LPTIMCONNECTION_ENABLED corresponding         */
        /* to LPTIM input 1 for COMP1.                                        */
          tmp_csr |= (COMP_CSR_COMP1LPTIM1IN1);
 8000f82:	69fb      	ldr	r3, [r7, #28]
 8000f84:	2280      	movs	r2, #128	; 0x80
 8000f86:	0152      	lsls	r2, r2, #5
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	61fb      	str	r3, [r7, #28]
 8000f8c:	e03b      	b.n	8001006 <HAL_COMP_Init+0x18e>
      else
      {
        /* Note : COMP2 can be connected to input 1 or input 2 of LPTIM if requested */
        assert_param(IS_COMP2_LPTIMCONNECTION(hcomp->Init.LPTIMConnection));
        
        switch (hcomp->Init.LPTIMConnection)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	699b      	ldr	r3, [r3, #24]
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d105      	bne.n	8000fa2 <HAL_COMP_Init+0x12a>
        {
        case  COMP_LPTIMCONNECTION_IN1_ENABLED :
          tmp_csr |= (COMP_CSR_COMP2LPTIM1IN1);
 8000f96:	69fb      	ldr	r3, [r7, #28]
 8000f98:	2280      	movs	r2, #128	; 0x80
 8000f9a:	0192      	lsls	r2, r2, #6
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61fb      	str	r3, [r7, #28]
          break;
 8000fa0:	e031      	b.n	8001006 <HAL_COMP_Init+0x18e>
          /* Note: Default case for compatibility with previous driver version*/
          /* using generic literal COMP_LPTIMCONNECTION_ENABLED corresponding */
          /* to LPTIM input 2 for COMP2.                                      */
          
          /* Check the MCU_ID in order to allow or not the COMP2 connection to LPTIM input 2 */
          if (((HAL_GetDEVID() == C_DEV_ID_L073) && (HAL_GetREVID() == C_REV_ID_A))
 8000fa2:	f7ff ff5d 	bl	8000e60 <HAL_GetDEVID>
 8000fa6:	0003      	movs	r3, r0
 8000fa8:	4a76      	ldr	r2, [pc, #472]	; (8001184 <HAL_COMP_Init+0x30c>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d106      	bne.n	8000fbc <HAL_COMP_Init+0x144>
 8000fae:	f7ff ff4d 	bl	8000e4c <HAL_GetREVID>
 8000fb2:	0002      	movs	r2, r0
 8000fb4:	2380      	movs	r3, #128	; 0x80
 8000fb6:	015b      	lsls	r3, r3, #5
 8000fb8:	429a      	cmp	r2, r3
 8000fba:	d018      	beq.n	8000fee <HAL_COMP_Init+0x176>
                            ||
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_A))
 8000fbc:	f7ff ff50 	bl	8000e60 <HAL_GetDEVID>
 8000fc0:	0003      	movs	r3, r0
                            ||
 8000fc2:	4a71      	ldr	r2, [pc, #452]	; (8001188 <HAL_COMP_Init+0x310>)
 8000fc4:	4293      	cmp	r3, r2
 8000fc6:	d106      	bne.n	8000fd6 <HAL_COMP_Init+0x15e>
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_A))
 8000fc8:	f7ff ff40 	bl	8000e4c <HAL_GetREVID>
 8000fcc:	0002      	movs	r2, r0
 8000fce:	2380      	movs	r3, #128	; 0x80
 8000fd0:	015b      	lsls	r3, r3, #5
 8000fd2:	429a      	cmp	r2, r3
 8000fd4:	d00b      	beq.n	8000fee <HAL_COMP_Init+0x176>
                            ||
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_Z)))
 8000fd6:	f7ff ff43 	bl	8000e60 <HAL_GetDEVID>
 8000fda:	0003      	movs	r3, r0
                            ||
 8000fdc:	4a6a      	ldr	r2, [pc, #424]	; (8001188 <HAL_COMP_Init+0x310>)
 8000fde:	4293      	cmp	r3, r2
 8000fe0:	d10a      	bne.n	8000ff8 <HAL_COMP_Init+0x180>
              ((HAL_GetDEVID() == C_DEV_ID_L053) && (HAL_GetREVID() == C_REV_ID_Z)))
 8000fe2:	f7ff ff33 	bl	8000e4c <HAL_GetREVID>
 8000fe6:	0003      	movs	r3, r0
 8000fe8:	4a68      	ldr	r2, [pc, #416]	; (800118c <HAL_COMP_Init+0x314>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d104      	bne.n	8000ff8 <HAL_COMP_Init+0x180>
          {
            assert_param(IS_COMP2_LPTIMCONNECTION_RESTRICTED(hcomp->Init.LPTIMConnection));
            
            /* Error: On the selected device, COMP2 cannot be connected to LPTIM input 2 */
            status = HAL_ERROR;
 8000fee:	231b      	movs	r3, #27
 8000ff0:	18fb      	adds	r3, r7, r3
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	701a      	strb	r2, [r3, #0]
          }
          else
          {
            tmp_csr |= (COMP_CSR_COMP2LPTIM1IN2);
          }
          break;
 8000ff6:	e006      	b.n	8001006 <HAL_COMP_Init+0x18e>
            tmp_csr |= (COMP_CSR_COMP2LPTIM1IN2);
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2280      	movs	r2, #128	; 0x80
 8000ffc:	0152      	lsls	r2, r2, #5
 8000ffe:	4313      	orrs	r3, r2
 8001000:	61fb      	str	r3, [r7, #28]
          break;
 8001002:	e000      	b.n	8001006 <HAL_COMP_Init+0x18e>
        }
      }
 8001004:	46c0      	nop			; (mov r8, r8)
    }
    
    /* Update comparator register */
    if ((hcomp->Instance) == COMP1)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a5d      	ldr	r2, [pc, #372]	; (8001180 <HAL_COMP_Init+0x308>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d10b      	bne.n	8001028 <HAL_COMP_Init+0x1b0>
    {
      MODIFY_REG(hcomp->Instance->CSR,
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4a5e      	ldr	r2, [pc, #376]	; (8001190 <HAL_COMP_Init+0x318>)
 8001018:	4013      	ands	r3, r2
 800101a:	0019      	movs	r1, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	69fa      	ldr	r2, [r7, #28]
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	e00a      	b.n	800103e <HAL_COMP_Init+0x1c6>
                 tmp_csr
                );
    }
    else /* Instance == COMP2 */
    {
      MODIFY_REG(hcomp->Instance->CSR,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	4a59      	ldr	r2, [pc, #356]	; (8001194 <HAL_COMP_Init+0x31c>)
 8001030:	4013      	ands	r3, r2
 8001032:	0019      	movs	r1, r3
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	69fa      	ldr	r2, [r7, #28]
 800103a:	430a      	orrs	r2, r1
 800103c:	601a      	str	r2, [r3, #0]
    
    /* Set window mode */
    /* Note: Window mode bit is located into 1 out of the 2 pairs of COMP     */
    /*       instances. Therefore, this function can update another COMP      */
    /*       instance that the one currently selected.                        */
    if(hcomp->Init.WindowMode == COMP_WINDOWMODE_COMP1_INPUT_PLUS_COMMON)
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	685a      	ldr	r2, [r3, #4]
 8001042:	2380      	movs	r3, #128	; 0x80
 8001044:	005b      	lsls	r3, r3, #1
 8001046:	429a      	cmp	r2, r3
 8001048:	d107      	bne.n	800105a <HAL_COMP_Init+0x1e2>
    {
      SET_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800104a:	4b4d      	ldr	r3, [pc, #308]	; (8001180 <HAL_COMP_Init+0x308>)
 800104c:	681a      	ldr	r2, [r3, #0]
 800104e:	4b4c      	ldr	r3, [pc, #304]	; (8001180 <HAL_COMP_Init+0x308>)
 8001050:	2180      	movs	r1, #128	; 0x80
 8001052:	0049      	lsls	r1, r1, #1
 8001054:	430a      	orrs	r2, r1
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	e005      	b.n	8001066 <HAL_COMP_Init+0x1ee>
    }
    else
    {
      CLEAR_BIT(COMP12_COMMON->CSR, COMP_CSR_WINMODE);
 800105a:	4b49      	ldr	r3, [pc, #292]	; (8001180 <HAL_COMP_Init+0x308>)
 800105c:	681a      	ldr	r2, [r3, #0]
 800105e:	4b48      	ldr	r3, [pc, #288]	; (8001180 <HAL_COMP_Init+0x308>)
 8001060:	494d      	ldr	r1, [pc, #308]	; (8001198 <HAL_COMP_Init+0x320>)
 8001062:	400a      	ands	r2, r1
 8001064:	601a      	str	r2, [r3, #0]
    }
    
    /* Get the EXTI line corresponding to the selected COMP instance */
    exti_line = COMP_GET_EXTI_LINE(hcomp->Instance);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4a45      	ldr	r2, [pc, #276]	; (8001180 <HAL_COMP_Init+0x308>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d102      	bne.n	8001076 <HAL_COMP_Init+0x1fe>
 8001070:	2380      	movs	r3, #128	; 0x80
 8001072:	039b      	lsls	r3, r3, #14
 8001074:	e001      	b.n	800107a <HAL_COMP_Init+0x202>
 8001076:	2380      	movs	r3, #128	; 0x80
 8001078:	03db      	lsls	r3, r3, #15
 800107a:	617b      	str	r3, [r7, #20]
    
    /* Manage EXTI settings */
    if((hcomp->Init.TriggerMode & (COMP_EXTI_IT | COMP_EXTI_EVENT)) != RESET)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	69db      	ldr	r3, [r3, #28]
 8001080:	2203      	movs	r2, #3
 8001082:	4013      	ands	r3, r2
 8001084:	d04f      	beq.n	8001126 <HAL_COMP_Init+0x2ae>
    {
      /* Configure EXTI rising edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_RISING) != RESET)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	69db      	ldr	r3, [r3, #28]
 800108a:	2210      	movs	r2, #16
 800108c:	4013      	ands	r3, r2
 800108e:	d006      	beq.n	800109e <HAL_COMP_Init+0x226>
      {
        SET_BIT(EXTI->RTSR, exti_line);
 8001090:	4b42      	ldr	r3, [pc, #264]	; (800119c <HAL_COMP_Init+0x324>)
 8001092:	6899      	ldr	r1, [r3, #8]
 8001094:	4b41      	ldr	r3, [pc, #260]	; (800119c <HAL_COMP_Init+0x324>)
 8001096:	697a      	ldr	r2, [r7, #20]
 8001098:	430a      	orrs	r2, r1
 800109a:	609a      	str	r2, [r3, #8]
 800109c:	e006      	b.n	80010ac <HAL_COMP_Init+0x234>
      }
      else
      {
        CLEAR_BIT(EXTI->RTSR, exti_line);
 800109e:	4b3f      	ldr	r3, [pc, #252]	; (800119c <HAL_COMP_Init+0x324>)
 80010a0:	689a      	ldr	r2, [r3, #8]
 80010a2:	697b      	ldr	r3, [r7, #20]
 80010a4:	43d9      	mvns	r1, r3
 80010a6:	4b3d      	ldr	r3, [pc, #244]	; (800119c <HAL_COMP_Init+0x324>)
 80010a8:	400a      	ands	r2, r1
 80010aa:	609a      	str	r2, [r3, #8]
      }
      
      /* Configure EXTI falling edge */
      if((hcomp->Init.TriggerMode & COMP_EXTI_FALLING) != RESET)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	69db      	ldr	r3, [r3, #28]
 80010b0:	2220      	movs	r2, #32
 80010b2:	4013      	ands	r3, r2
 80010b4:	d006      	beq.n	80010c4 <HAL_COMP_Init+0x24c>
      {
        SET_BIT(EXTI->FTSR, exti_line);
 80010b6:	4b39      	ldr	r3, [pc, #228]	; (800119c <HAL_COMP_Init+0x324>)
 80010b8:	68d9      	ldr	r1, [r3, #12]
 80010ba:	4b38      	ldr	r3, [pc, #224]	; (800119c <HAL_COMP_Init+0x324>)
 80010bc:	697a      	ldr	r2, [r7, #20]
 80010be:	430a      	orrs	r2, r1
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	e006      	b.n	80010d2 <HAL_COMP_Init+0x25a>
      }
      else
      {
        CLEAR_BIT(EXTI->FTSR, exti_line);
 80010c4:	4b35      	ldr	r3, [pc, #212]	; (800119c <HAL_COMP_Init+0x324>)
 80010c6:	68da      	ldr	r2, [r3, #12]
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	43d9      	mvns	r1, r3
 80010cc:	4b33      	ldr	r3, [pc, #204]	; (800119c <HAL_COMP_Init+0x324>)
 80010ce:	400a      	ands	r2, r1
 80010d0:	60da      	str	r2, [r3, #12]
      }
      
      /* Clear COMP EXTI pending bit (if any) */
      WRITE_REG(EXTI->PR, exti_line);
 80010d2:	4b32      	ldr	r3, [pc, #200]	; (800119c <HAL_COMP_Init+0x324>)
 80010d4:	697a      	ldr	r2, [r7, #20]
 80010d6:	615a      	str	r2, [r3, #20]
      
      /* Configure EXTI event mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_EVENT) != RESET)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	69db      	ldr	r3, [r3, #28]
 80010dc:	2202      	movs	r2, #2
 80010de:	4013      	ands	r3, r2
 80010e0:	d006      	beq.n	80010f0 <HAL_COMP_Init+0x278>
      {
        SET_BIT(EXTI->EMR, exti_line);
 80010e2:	4b2e      	ldr	r3, [pc, #184]	; (800119c <HAL_COMP_Init+0x324>)
 80010e4:	6859      	ldr	r1, [r3, #4]
 80010e6:	4b2d      	ldr	r3, [pc, #180]	; (800119c <HAL_COMP_Init+0x324>)
 80010e8:	697a      	ldr	r2, [r7, #20]
 80010ea:	430a      	orrs	r2, r1
 80010ec:	605a      	str	r2, [r3, #4]
 80010ee:	e006      	b.n	80010fe <HAL_COMP_Init+0x286>
      }
      else
      {
        CLEAR_BIT(EXTI->EMR, exti_line);
 80010f0:	4b2a      	ldr	r3, [pc, #168]	; (800119c <HAL_COMP_Init+0x324>)
 80010f2:	685a      	ldr	r2, [r3, #4]
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	43d9      	mvns	r1, r3
 80010f8:	4b28      	ldr	r3, [pc, #160]	; (800119c <HAL_COMP_Init+0x324>)
 80010fa:	400a      	ands	r2, r1
 80010fc:	605a      	str	r2, [r3, #4]
      }
      
      /* Configure EXTI interrupt mode */
      if((hcomp->Init.TriggerMode & COMP_EXTI_IT) != RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	69db      	ldr	r3, [r3, #28]
 8001102:	2201      	movs	r2, #1
 8001104:	4013      	ands	r3, r2
 8001106:	d006      	beq.n	8001116 <HAL_COMP_Init+0x29e>
      {
        SET_BIT(EXTI->IMR, exti_line);
 8001108:	4b24      	ldr	r3, [pc, #144]	; (800119c <HAL_COMP_Init+0x324>)
 800110a:	6819      	ldr	r1, [r3, #0]
 800110c:	4b23      	ldr	r3, [pc, #140]	; (800119c <HAL_COMP_Init+0x324>)
 800110e:	697a      	ldr	r2, [r7, #20]
 8001110:	430a      	orrs	r2, r1
 8001112:	601a      	str	r2, [r3, #0]
 8001114:	e015      	b.n	8001142 <HAL_COMP_Init+0x2ca>
      }
      else
      {
        CLEAR_BIT(EXTI->IMR, exti_line);
 8001116:	4b21      	ldr	r3, [pc, #132]	; (800119c <HAL_COMP_Init+0x324>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	43d9      	mvns	r1, r3
 800111e:	4b1f      	ldr	r3, [pc, #124]	; (800119c <HAL_COMP_Init+0x324>)
 8001120:	400a      	ands	r2, r1
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	e00d      	b.n	8001142 <HAL_COMP_Init+0x2ca>
      }
    }
    else
    {
      /* Disable EXTI event mode */
      CLEAR_BIT(EXTI->EMR, exti_line);
 8001126:	4b1d      	ldr	r3, [pc, #116]	; (800119c <HAL_COMP_Init+0x324>)
 8001128:	685a      	ldr	r2, [r3, #4]
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	43d9      	mvns	r1, r3
 800112e:	4b1b      	ldr	r3, [pc, #108]	; (800119c <HAL_COMP_Init+0x324>)
 8001130:	400a      	ands	r2, r1
 8001132:	605a      	str	r2, [r3, #4]
      
      /* Disable EXTI interrupt mode */
      CLEAR_BIT(EXTI->IMR, exti_line);
 8001134:	4b19      	ldr	r3, [pc, #100]	; (800119c <HAL_COMP_Init+0x324>)
 8001136:	681a      	ldr	r2, [r3, #0]
 8001138:	697b      	ldr	r3, [r7, #20]
 800113a:	43d9      	mvns	r1, r3
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <HAL_COMP_Init+0x324>)
 800113e:	400a      	ands	r2, r1
 8001140:	601a      	str	r2, [r3, #0]
    }
    
    /* Set HAL COMP handle state */
    /* Note: Transition from state reset to state ready,                      */
    /*       otherwise (coming from state ready or busy) no state update.     */
    if (hcomp->State == HAL_COMP_STATE_RESET)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	2221      	movs	r2, #33	; 0x21
 8001146:	5c9b      	ldrb	r3, [r3, r2]
 8001148:	b2db      	uxtb	r3, r3
 800114a:	2b00      	cmp	r3, #0
 800114c:	d103      	bne.n	8001156 <HAL_COMP_Init+0x2de>
    {
      hcomp->State = HAL_COMP_STATE_READY;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	2221      	movs	r2, #33	; 0x21
 8001152:	2101      	movs	r1, #1
 8001154:	5499      	strb	r1, [r3, r2]
    }
  }
  
  return status;
 8001156:	231b      	movs	r3, #27
 8001158:	18fb      	adds	r3, r7, r3
 800115a:	781b      	ldrb	r3, [r3, #0]
}
 800115c:	0018      	movs	r0, r3
 800115e:	46bd      	mov	sp, r7
 8001160:	b008      	add	sp, #32
 8001162:	bd80      	pop	{r7, pc}
 8001164:	40021000 	.word	0x40021000
 8001168:	4001001c 	.word	0x4001001c
 800116c:	40010000 	.word	0x40010000
 8001170:	00001001 	.word	0x00001001
 8001174:	20000000 	.word	0x20000000
 8001178:	001e8480 	.word	0x001e8480
 800117c:	00000bb8 	.word	0x00000bb8
 8001180:	40010018 	.word	0x40010018
 8001184:	00000447 	.word	0x00000447
 8001188:	00000417 	.word	0x00000417
 800118c:	00001008 	.word	0x00001008
 8001190:	ffff6ecf 	.word	0xffff6ecf
 8001194:	ffff4887 	.word	0xffff4887
 8001198:	fffffeff 	.word	0xfffffeff
 800119c:	40010400 	.word	0x40010400

080011a0 <HAL_COMP_Start>:
  * @brief  Start the comparator.
  * @param  hcomp  COMP handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_COMP_Start(COMP_HandleTypeDef *hcomp)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t wait_loop_index = 0U;
 80011a8:	2300      	movs	r3, #0
 80011aa:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80011ac:	230f      	movs	r3, #15
 80011ae:	18fb      	adds	r3, r7, r3
 80011b0:	2200      	movs	r2, #0
 80011b2:	701a      	strb	r2, [r3, #0]
  
  /* Check the COMP handle allocation and lock status */
  if((hcomp == NULL) || (__HAL_COMP_IS_LOCKED(hcomp)))
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d008      	beq.n	80011cc <HAL_COMP_Start+0x2c>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	0fdb      	lsrs	r3, r3, #31
 80011c2:	07da      	lsls	r2, r3, #31
 80011c4:	2380      	movs	r3, #128	; 0x80
 80011c6:	061b      	lsls	r3, r3, #24
 80011c8:	429a      	cmp	r2, r3
 80011ca:	d104      	bne.n	80011d6 <HAL_COMP_Start+0x36>
  {
    status = HAL_ERROR;
 80011cc:	230f      	movs	r3, #15
 80011ce:	18fb      	adds	r3, r7, r3
 80011d0:	2201      	movs	r2, #1
 80011d2:	701a      	strb	r2, [r3, #0]
 80011d4:	e02b      	b.n	800122e <HAL_COMP_Start+0x8e>
  else
  {
    /* Check the parameter */
    assert_param(IS_COMP_ALL_INSTANCE(hcomp->Instance));

    if(hcomp->State == HAL_COMP_STATE_READY)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2221      	movs	r2, #33	; 0x21
 80011da:	5c9b      	ldrb	r3, [r3, r2]
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b01      	cmp	r3, #1
 80011e0:	d121      	bne.n	8001226 <HAL_COMP_Start+0x86>
    {
      /* Enable the selected comparator */
      SET_BIT(hcomp->Instance->CSR, COMP_CSR_COMPxEN);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	681a      	ldr	r2, [r3, #0]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	2101      	movs	r1, #1
 80011ee:	430a      	orrs	r2, r1
 80011f0:	601a      	str	r2, [r3, #0]
      
      /* Set HAL COMP handle state */
      hcomp->State = HAL_COMP_STATE_BUSY;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2221      	movs	r2, #33	; 0x21
 80011f6:	2102      	movs	r1, #2
 80011f8:	5499      	strb	r1, [r3, r2]
      
      /* Delay for COMP startup time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially                  */
      /*       CPU processing cycles.                                         */
      wait_loop_index = (COMP_DELAY_STARTUP_US * (SystemCoreClock / (1000000U * 2U)));
 80011fa:	4b10      	ldr	r3, [pc, #64]	; (800123c <HAL_COMP_Start+0x9c>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	4910      	ldr	r1, [pc, #64]	; (8001240 <HAL_COMP_Start+0xa0>)
 8001200:	0018      	movs	r0, r3
 8001202:	f7fe ff8b 	bl	800011c <__udivsi3>
 8001206:	0003      	movs	r3, r0
 8001208:	001a      	movs	r2, r3
 800120a:	0013      	movs	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	189b      	adds	r3, r3, r2
 8001210:	009a      	lsls	r2, r3, #2
 8001212:	189b      	adds	r3, r3, r2
 8001214:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 8001216:	e002      	b.n	800121e <HAL_COMP_Start+0x7e>
      {
        wait_loop_index--;
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	3b01      	subs	r3, #1
 800121c:	60bb      	str	r3, [r7, #8]
      while(wait_loop_index != 0U)
 800121e:	68bb      	ldr	r3, [r7, #8]
 8001220:	2b00      	cmp	r3, #0
 8001222:	d1f9      	bne.n	8001218 <HAL_COMP_Start+0x78>
 8001224:	e003      	b.n	800122e <HAL_COMP_Start+0x8e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001226:	230f      	movs	r3, #15
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	2201      	movs	r2, #1
 800122c:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 800122e:	230f      	movs	r3, #15
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	781b      	ldrb	r3, [r3, #0]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b004      	add	sp, #16
 800123a:	bd80      	pop	{r7, pc}
 800123c:	20000000 	.word	0x20000000
 8001240:	001e8480 	.word	0x001e8480

08001244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001244:	b590      	push	{r4, r7, lr}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	0002      	movs	r2, r0
 800124c:	6039      	str	r1, [r7, #0]
 800124e:	1dfb      	adds	r3, r7, #7
 8001250:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001252:	1dfb      	adds	r3, r7, #7
 8001254:	781b      	ldrb	r3, [r3, #0]
 8001256:	2b7f      	cmp	r3, #127	; 0x7f
 8001258:	d828      	bhi.n	80012ac <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800125a:	4a2f      	ldr	r2, [pc, #188]	; (8001318 <__NVIC_SetPriority+0xd4>)
 800125c:	1dfb      	adds	r3, r7, #7
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	b25b      	sxtb	r3, r3
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	33c0      	adds	r3, #192	; 0xc0
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	589b      	ldr	r3, [r3, r2]
 800126a:	1dfa      	adds	r2, r7, #7
 800126c:	7812      	ldrb	r2, [r2, #0]
 800126e:	0011      	movs	r1, r2
 8001270:	2203      	movs	r2, #3
 8001272:	400a      	ands	r2, r1
 8001274:	00d2      	lsls	r2, r2, #3
 8001276:	21ff      	movs	r1, #255	; 0xff
 8001278:	4091      	lsls	r1, r2
 800127a:	000a      	movs	r2, r1
 800127c:	43d2      	mvns	r2, r2
 800127e:	401a      	ands	r2, r3
 8001280:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	019b      	lsls	r3, r3, #6
 8001286:	22ff      	movs	r2, #255	; 0xff
 8001288:	401a      	ands	r2, r3
 800128a:	1dfb      	adds	r3, r7, #7
 800128c:	781b      	ldrb	r3, [r3, #0]
 800128e:	0018      	movs	r0, r3
 8001290:	2303      	movs	r3, #3
 8001292:	4003      	ands	r3, r0
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001298:	481f      	ldr	r0, [pc, #124]	; (8001318 <__NVIC_SetPriority+0xd4>)
 800129a:	1dfb      	adds	r3, r7, #7
 800129c:	781b      	ldrb	r3, [r3, #0]
 800129e:	b25b      	sxtb	r3, r3
 80012a0:	089b      	lsrs	r3, r3, #2
 80012a2:	430a      	orrs	r2, r1
 80012a4:	33c0      	adds	r3, #192	; 0xc0
 80012a6:	009b      	lsls	r3, r3, #2
 80012a8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80012aa:	e031      	b.n	8001310 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012ac:	4a1b      	ldr	r2, [pc, #108]	; (800131c <__NVIC_SetPriority+0xd8>)
 80012ae:	1dfb      	adds	r3, r7, #7
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	0019      	movs	r1, r3
 80012b4:	230f      	movs	r3, #15
 80012b6:	400b      	ands	r3, r1
 80012b8:	3b08      	subs	r3, #8
 80012ba:	089b      	lsrs	r3, r3, #2
 80012bc:	3306      	adds	r3, #6
 80012be:	009b      	lsls	r3, r3, #2
 80012c0:	18d3      	adds	r3, r2, r3
 80012c2:	3304      	adds	r3, #4
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	1dfa      	adds	r2, r7, #7
 80012c8:	7812      	ldrb	r2, [r2, #0]
 80012ca:	0011      	movs	r1, r2
 80012cc:	2203      	movs	r2, #3
 80012ce:	400a      	ands	r2, r1
 80012d0:	00d2      	lsls	r2, r2, #3
 80012d2:	21ff      	movs	r1, #255	; 0xff
 80012d4:	4091      	lsls	r1, r2
 80012d6:	000a      	movs	r2, r1
 80012d8:	43d2      	mvns	r2, r2
 80012da:	401a      	ands	r2, r3
 80012dc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	019b      	lsls	r3, r3, #6
 80012e2:	22ff      	movs	r2, #255	; 0xff
 80012e4:	401a      	ands	r2, r3
 80012e6:	1dfb      	adds	r3, r7, #7
 80012e8:	781b      	ldrb	r3, [r3, #0]
 80012ea:	0018      	movs	r0, r3
 80012ec:	2303      	movs	r3, #3
 80012ee:	4003      	ands	r3, r0
 80012f0:	00db      	lsls	r3, r3, #3
 80012f2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012f4:	4809      	ldr	r0, [pc, #36]	; (800131c <__NVIC_SetPriority+0xd8>)
 80012f6:	1dfb      	adds	r3, r7, #7
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	001c      	movs	r4, r3
 80012fc:	230f      	movs	r3, #15
 80012fe:	4023      	ands	r3, r4
 8001300:	3b08      	subs	r3, #8
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	430a      	orrs	r2, r1
 8001306:	3306      	adds	r3, #6
 8001308:	009b      	lsls	r3, r3, #2
 800130a:	18c3      	adds	r3, r0, r3
 800130c:	3304      	adds	r3, #4
 800130e:	601a      	str	r2, [r3, #0]
}
 8001310:	46c0      	nop			; (mov r8, r8)
 8001312:	46bd      	mov	sp, r7
 8001314:	b003      	add	sp, #12
 8001316:	bd90      	pop	{r4, r7, pc}
 8001318:	e000e100 	.word	0xe000e100
 800131c:	e000ed00 	.word	0xe000ed00

08001320 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	1e5a      	subs	r2, r3, #1
 800132c:	2380      	movs	r3, #128	; 0x80
 800132e:	045b      	lsls	r3, r3, #17
 8001330:	429a      	cmp	r2, r3
 8001332:	d301      	bcc.n	8001338 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001334:	2301      	movs	r3, #1
 8001336:	e010      	b.n	800135a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001338:	4b0a      	ldr	r3, [pc, #40]	; (8001364 <SysTick_Config+0x44>)
 800133a:	687a      	ldr	r2, [r7, #4]
 800133c:	3a01      	subs	r2, #1
 800133e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001340:	2301      	movs	r3, #1
 8001342:	425b      	negs	r3, r3
 8001344:	2103      	movs	r1, #3
 8001346:	0018      	movs	r0, r3
 8001348:	f7ff ff7c 	bl	8001244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <SysTick_Config+0x44>)
 800134e:	2200      	movs	r2, #0
 8001350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001352:	4b04      	ldr	r3, [pc, #16]	; (8001364 <SysTick_Config+0x44>)
 8001354:	2207      	movs	r2, #7
 8001356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001358:	2300      	movs	r3, #0
}
 800135a:	0018      	movs	r0, r3
 800135c:	46bd      	mov	sp, r7
 800135e:	b002      	add	sp, #8
 8001360:	bd80      	pop	{r7, pc}
 8001362:	46c0      	nop			; (mov r8, r8)
 8001364:	e000e010 	.word	0xe000e010

08001368 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	210f      	movs	r1, #15
 8001374:	187b      	adds	r3, r7, r1
 8001376:	1c02      	adds	r2, r0, #0
 8001378:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	187b      	adds	r3, r7, r1
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	b25b      	sxtb	r3, r3
 8001382:	0011      	movs	r1, r2
 8001384:	0018      	movs	r0, r3
 8001386:	f7ff ff5d 	bl	8001244 <__NVIC_SetPriority>
}
 800138a:	46c0      	nop			; (mov r8, r8)
 800138c:	46bd      	mov	sp, r7
 800138e:	b004      	add	sp, #16
 8001390:	bd80      	pop	{r7, pc}

08001392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b082      	sub	sp, #8
 8001396:	af00      	add	r7, sp, #0
 8001398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	0018      	movs	r0, r3
 800139e:	f7ff ffbf 	bl	8001320 <SysTick_Config>
 80013a2:	0003      	movs	r3, r0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b086      	sub	sp, #24
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
 80013b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80013ba:	2300      	movs	r3, #0
 80013bc:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80013be:	2300      	movs	r3, #0
 80013c0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80013c2:	e14f      	b.n	8001664 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	2101      	movs	r1, #1
 80013ca:	697a      	ldr	r2, [r7, #20]
 80013cc:	4091      	lsls	r1, r2
 80013ce:	000a      	movs	r2, r1
 80013d0:	4013      	ands	r3, r2
 80013d2:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d100      	bne.n	80013dc <HAL_GPIO_Init+0x30>
 80013da:	e140      	b.n	800165e <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	2203      	movs	r2, #3
 80013e2:	4013      	ands	r3, r2
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d005      	beq.n	80013f4 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685b      	ldr	r3, [r3, #4]
 80013ec:	2203      	movs	r2, #3
 80013ee:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d130      	bne.n	8001456 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	689b      	ldr	r3, [r3, #8]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	2203      	movs	r2, #3
 8001400:	409a      	lsls	r2, r3
 8001402:	0013      	movs	r3, r2
 8001404:	43da      	mvns	r2, r3
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	4013      	ands	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	68da      	ldr	r2, [r3, #12]
 8001410:	697b      	ldr	r3, [r7, #20]
 8001412:	005b      	lsls	r3, r3, #1
 8001414:	409a      	lsls	r2, r3
 8001416:	0013      	movs	r3, r2
 8001418:	693a      	ldr	r2, [r7, #16]
 800141a:	4313      	orrs	r3, r2
 800141c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	693a      	ldr	r2, [r7, #16]
 8001422:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	685b      	ldr	r3, [r3, #4]
 8001428:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800142a:	2201      	movs	r2, #1
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	409a      	lsls	r2, r3
 8001430:	0013      	movs	r3, r2
 8001432:	43da      	mvns	r2, r3
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	4013      	ands	r3, r2
 8001438:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	091b      	lsrs	r3, r3, #4
 8001440:	2201      	movs	r2, #1
 8001442:	401a      	ands	r2, r3
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	409a      	lsls	r2, r3
 8001448:	0013      	movs	r3, r2
 800144a:	693a      	ldr	r2, [r7, #16]
 800144c:	4313      	orrs	r3, r2
 800144e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	693a      	ldr	r2, [r7, #16]
 8001454:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2203      	movs	r2, #3
 800145c:	4013      	ands	r3, r2
 800145e:	2b03      	cmp	r3, #3
 8001460:	d017      	beq.n	8001492 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	68db      	ldr	r3, [r3, #12]
 8001466:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	005b      	lsls	r3, r3, #1
 800146c:	2203      	movs	r2, #3
 800146e:	409a      	lsls	r2, r3
 8001470:	0013      	movs	r3, r2
 8001472:	43da      	mvns	r2, r3
 8001474:	693b      	ldr	r3, [r7, #16]
 8001476:	4013      	ands	r3, r2
 8001478:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	689a      	ldr	r2, [r3, #8]
 800147e:	697b      	ldr	r3, [r7, #20]
 8001480:	005b      	lsls	r3, r3, #1
 8001482:	409a      	lsls	r2, r3
 8001484:	0013      	movs	r3, r2
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	693a      	ldr	r2, [r7, #16]
 8001490:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	685b      	ldr	r3, [r3, #4]
 8001496:	2203      	movs	r2, #3
 8001498:	4013      	ands	r3, r2
 800149a:	2b02      	cmp	r3, #2
 800149c:	d123      	bne.n	80014e6 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800149e:	697b      	ldr	r3, [r7, #20]
 80014a0:	08da      	lsrs	r2, r3, #3
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	3208      	adds	r2, #8
 80014a6:	0092      	lsls	r2, r2, #2
 80014a8:	58d3      	ldr	r3, [r2, r3]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80014ac:	697b      	ldr	r3, [r7, #20]
 80014ae:	2207      	movs	r2, #7
 80014b0:	4013      	ands	r3, r2
 80014b2:	009b      	lsls	r3, r3, #2
 80014b4:	220f      	movs	r2, #15
 80014b6:	409a      	lsls	r2, r3
 80014b8:	0013      	movs	r3, r2
 80014ba:	43da      	mvns	r2, r3
 80014bc:	693b      	ldr	r3, [r7, #16]
 80014be:	4013      	ands	r3, r2
 80014c0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	691a      	ldr	r2, [r3, #16]
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	2107      	movs	r1, #7
 80014ca:	400b      	ands	r3, r1
 80014cc:	009b      	lsls	r3, r3, #2
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	693a      	ldr	r2, [r7, #16]
 80014d4:	4313      	orrs	r3, r2
 80014d6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	08da      	lsrs	r2, r3, #3
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	3208      	adds	r2, #8
 80014e0:	0092      	lsls	r2, r2, #2
 80014e2:	6939      	ldr	r1, [r7, #16]
 80014e4:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	005b      	lsls	r3, r3, #1
 80014f0:	2203      	movs	r2, #3
 80014f2:	409a      	lsls	r2, r3
 80014f4:	0013      	movs	r3, r2
 80014f6:	43da      	mvns	r2, r3
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4013      	ands	r3, r2
 80014fc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	2203      	movs	r2, #3
 8001504:	401a      	ands	r2, r3
 8001506:	697b      	ldr	r3, [r7, #20]
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	409a      	lsls	r2, r3
 800150c:	0013      	movs	r3, r2
 800150e:	693a      	ldr	r2, [r7, #16]
 8001510:	4313      	orrs	r3, r2
 8001512:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	693a      	ldr	r2, [r7, #16]
 8001518:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	23c0      	movs	r3, #192	; 0xc0
 8001520:	029b      	lsls	r3, r3, #10
 8001522:	4013      	ands	r3, r2
 8001524:	d100      	bne.n	8001528 <HAL_GPIO_Init+0x17c>
 8001526:	e09a      	b.n	800165e <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001528:	4b54      	ldr	r3, [pc, #336]	; (800167c <HAL_GPIO_Init+0x2d0>)
 800152a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800152c:	4b53      	ldr	r3, [pc, #332]	; (800167c <HAL_GPIO_Init+0x2d0>)
 800152e:	2101      	movs	r1, #1
 8001530:	430a      	orrs	r2, r1
 8001532:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001534:	4a52      	ldr	r2, [pc, #328]	; (8001680 <HAL_GPIO_Init+0x2d4>)
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	089b      	lsrs	r3, r3, #2
 800153a:	3302      	adds	r3, #2
 800153c:	009b      	lsls	r3, r3, #2
 800153e:	589b      	ldr	r3, [r3, r2]
 8001540:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001542:	697b      	ldr	r3, [r7, #20]
 8001544:	2203      	movs	r2, #3
 8001546:	4013      	ands	r3, r2
 8001548:	009b      	lsls	r3, r3, #2
 800154a:	220f      	movs	r2, #15
 800154c:	409a      	lsls	r2, r3
 800154e:	0013      	movs	r3, r2
 8001550:	43da      	mvns	r2, r3
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 8001558:	687a      	ldr	r2, [r7, #4]
 800155a:	23a0      	movs	r3, #160	; 0xa0
 800155c:	05db      	lsls	r3, r3, #23
 800155e:	429a      	cmp	r2, r3
 8001560:	d019      	beq.n	8001596 <HAL_GPIO_Init+0x1ea>
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	4a47      	ldr	r2, [pc, #284]	; (8001684 <HAL_GPIO_Init+0x2d8>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d013      	beq.n	8001592 <HAL_GPIO_Init+0x1e6>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	4a46      	ldr	r2, [pc, #280]	; (8001688 <HAL_GPIO_Init+0x2dc>)
 800156e:	4293      	cmp	r3, r2
 8001570:	d00d      	beq.n	800158e <HAL_GPIO_Init+0x1e2>
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a45      	ldr	r2, [pc, #276]	; (800168c <HAL_GPIO_Init+0x2e0>)
 8001576:	4293      	cmp	r3, r2
 8001578:	d007      	beq.n	800158a <HAL_GPIO_Init+0x1de>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	4a44      	ldr	r2, [pc, #272]	; (8001690 <HAL_GPIO_Init+0x2e4>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d101      	bne.n	8001586 <HAL_GPIO_Init+0x1da>
 8001582:	2305      	movs	r3, #5
 8001584:	e008      	b.n	8001598 <HAL_GPIO_Init+0x1ec>
 8001586:	2306      	movs	r3, #6
 8001588:	e006      	b.n	8001598 <HAL_GPIO_Init+0x1ec>
 800158a:	2303      	movs	r3, #3
 800158c:	e004      	b.n	8001598 <HAL_GPIO_Init+0x1ec>
 800158e:	2302      	movs	r3, #2
 8001590:	e002      	b.n	8001598 <HAL_GPIO_Init+0x1ec>
 8001592:	2301      	movs	r3, #1
 8001594:	e000      	b.n	8001598 <HAL_GPIO_Init+0x1ec>
 8001596:	2300      	movs	r3, #0
 8001598:	697a      	ldr	r2, [r7, #20]
 800159a:	2103      	movs	r1, #3
 800159c:	400a      	ands	r2, r1
 800159e:	0092      	lsls	r2, r2, #2
 80015a0:	4093      	lsls	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4313      	orrs	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015a8:	4935      	ldr	r1, [pc, #212]	; (8001680 <HAL_GPIO_Init+0x2d4>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	089b      	lsrs	r3, r3, #2
 80015ae:	3302      	adds	r3, #2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015b6:	4b37      	ldr	r3, [pc, #220]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	43da      	mvns	r2, r3
 80015c0:	693b      	ldr	r3, [r7, #16]
 80015c2:	4013      	ands	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	685a      	ldr	r2, [r3, #4]
 80015ca:	2380      	movs	r3, #128	; 0x80
 80015cc:	035b      	lsls	r3, r3, #13
 80015ce:	4013      	ands	r3, r2
 80015d0:	d003      	beq.n	80015da <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80015d2:	693a      	ldr	r2, [r7, #16]
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	4313      	orrs	r3, r2
 80015d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80015da:	4b2e      	ldr	r3, [pc, #184]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 80015dc:	693a      	ldr	r2, [r7, #16]
 80015de:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80015e0:	4b2c      	ldr	r3, [pc, #176]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 80015e2:	68db      	ldr	r3, [r3, #12]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	43da      	mvns	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	685a      	ldr	r2, [r3, #4]
 80015f4:	2380      	movs	r3, #128	; 0x80
 80015f6:	039b      	lsls	r3, r3, #14
 80015f8:	4013      	ands	r3, r2
 80015fa:	d003      	beq.n	8001604 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	4313      	orrs	r3, r2
 8001602:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001604:	4b23      	ldr	r3, [pc, #140]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 8001606:	693a      	ldr	r2, [r7, #16]
 8001608:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800160a:	4b22      	ldr	r3, [pc, #136]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	43da      	mvns	r2, r3
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	4013      	ands	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800161a:	683b      	ldr	r3, [r7, #0]
 800161c:	685a      	ldr	r2, [r3, #4]
 800161e:	2380      	movs	r3, #128	; 0x80
 8001620:	029b      	lsls	r3, r3, #10
 8001622:	4013      	ands	r3, r2
 8001624:	d003      	beq.n	800162e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001626:	693a      	ldr	r2, [r7, #16]
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	4313      	orrs	r3, r2
 800162c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800162e:	4b19      	ldr	r3, [pc, #100]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 8001630:	693a      	ldr	r2, [r7, #16]
 8001632:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001634:	4b17      	ldr	r3, [pc, #92]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	43da      	mvns	r2, r3
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	4013      	ands	r3, r2
 8001642:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	2380      	movs	r3, #128	; 0x80
 800164a:	025b      	lsls	r3, r3, #9
 800164c:	4013      	ands	r3, r2
 800164e:	d003      	beq.n	8001658 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	4313      	orrs	r3, r2
 8001656:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001658:	4b0e      	ldr	r3, [pc, #56]	; (8001694 <HAL_GPIO_Init+0x2e8>)
 800165a:	693a      	ldr	r2, [r7, #16]
 800165c:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	3301      	adds	r3, #1
 8001662:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001664:	683b      	ldr	r3, [r7, #0]
 8001666:	681a      	ldr	r2, [r3, #0]
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	40da      	lsrs	r2, r3
 800166c:	1e13      	subs	r3, r2, #0
 800166e:	d000      	beq.n	8001672 <HAL_GPIO_Init+0x2c6>
 8001670:	e6a8      	b.n	80013c4 <HAL_GPIO_Init+0x18>
  }
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46c0      	nop			; (mov r8, r8)
 8001676:	46bd      	mov	sp, r7
 8001678:	b006      	add	sp, #24
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40021000 	.word	0x40021000
 8001680:	40010000 	.word	0x40010000
 8001684:	50000400 	.word	0x50000400
 8001688:	50000800 	.word	0x50000800
 800168c:	50000c00 	.word	0x50000c00
 8001690:	50001c00 	.word	0x50001c00
 8001694:	40010400 	.word	0x40010400

08001698 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b082      	sub	sp, #8
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	0008      	movs	r0, r1
 80016a2:	0011      	movs	r1, r2
 80016a4:	1cbb      	adds	r3, r7, #2
 80016a6:	1c02      	adds	r2, r0, #0
 80016a8:	801a      	strh	r2, [r3, #0]
 80016aa:	1c7b      	adds	r3, r7, #1
 80016ac:	1c0a      	adds	r2, r1, #0
 80016ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80016b0:	1c7b      	adds	r3, r7, #1
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d004      	beq.n	80016c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b8:	1cbb      	adds	r3, r7, #2
 80016ba:	881a      	ldrh	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80016c0:	e003      	b.n	80016ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80016c2:	1cbb      	adds	r3, r7, #2
 80016c4:	881a      	ldrh	r2, [r3, #0]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	46bd      	mov	sp, r7
 80016ce:	b002      	add	sp, #8
 80016d0:	bd80      	pop	{r7, pc}
	...

080016d4 <HAL_LPTIM_Init>:
  *         LPTIM_InitTypeDef and initialize the associated handle.
  * @param  hlptim LPTIM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Init(LPTIM_HandleTypeDef *hlptim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  uint32_t tmpcfgr;

  /* Check the LPTIM handle allocation */
  if (hlptim == NULL)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d101      	bne.n	80016e6 <HAL_LPTIM_Init+0x12>
  {
    return HAL_ERROR;
 80016e2:	2301      	movs	r3, #1
 80016e4:	e078      	b.n	80017d8 <HAL_LPTIM_Init+0x104>
  }
  assert_param(IS_LPTIM_OUTPUT_POLARITY(hlptim->Init.OutputPolarity));
  assert_param(IS_LPTIM_UPDATE_MODE(hlptim->Init.UpdateMode));
  assert_param(IS_LPTIM_COUNTER_SOURCE(hlptim->Init.CounterSource));

  if (hlptim->State == HAL_LPTIM_STATE_RESET)
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	222e      	movs	r2, #46	; 0x2e
 80016ea:	5c9b      	ldrb	r3, [r3, r2]
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d107      	bne.n	8001702 <HAL_LPTIM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hlptim->Lock = HAL_UNLOCKED;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	222d      	movs	r2, #45	; 0x2d
 80016f6:	2100      	movs	r1, #0
 80016f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hlptim->MspInitCallback(hlptim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_LPTIM_MspInit(hlptim);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	0018      	movs	r0, r3
 80016fe:	f7ff fa35 	bl	8000b6c <HAL_LPTIM_MspInit>
#endif /* USE_HAL_LPTIM_REGISTER_CALLBACKS */
  }

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	222e      	movs	r2, #46	; 0x2e
 8001706:	2102      	movs	r1, #2
 8001708:	5499      	strb	r1, [r3, r2]

  /* Get the LPTIMx CFGR value */
  tmpcfgr = hlptim->Instance->CFGR;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	60fb      	str	r3, [r7, #12]

  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	685b      	ldr	r3, [r3, #4]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d005      	beq.n	8001726 <HAL_LPTIM_Init+0x52>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800171e:	2380      	movs	r3, #128	; 0x80
 8001720:	041b      	lsls	r3, r3, #16
 8001722:	429a      	cmp	r2, r3
 8001724:	d103      	bne.n	800172e <HAL_LPTIM_Init+0x5a>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKPOL | LPTIM_CFGR_CKFLT));
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	221e      	movs	r2, #30
 800172a:	4393      	bics	r3, r2
 800172c:	60fb      	str	r3, [r7, #12]
  }
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	695b      	ldr	r3, [r3, #20]
 8001732:	4a2b      	ldr	r2, [pc, #172]	; (80017e0 <HAL_LPTIM_Init+0x10c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d003      	beq.n	8001740 <HAL_LPTIM_Init+0x6c>
  {
    tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_TRGFLT | LPTIM_CFGR_TRIGSEL));
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	4a2a      	ldr	r2, [pc, #168]	; (80017e4 <HAL_LPTIM_Init+0x110>)
 800173c:	4013      	ands	r3, r2
 800173e:	60fb      	str	r3, [r7, #12]
  }

  /* Clear CKSEL, PRESC, TRIGEN, TRGFLT, WAVPOL, PRELOAD & COUNTMODE bits */
  tmpcfgr &= (uint32_t)(~(LPTIM_CFGR_CKSEL | LPTIM_CFGR_TRIGEN | LPTIM_CFGR_PRELOAD |
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4a29      	ldr	r2, [pc, #164]	; (80017e8 <HAL_LPTIM_Init+0x114>)
 8001744:	4013      	ands	r3, r2
 8001746:	60fb      	str	r3, [r7, #12]
                          LPTIM_CFGR_WAVPOL | LPTIM_CFGR_PRESC | LPTIM_CFGR_COUNTMODE));

  /* Set initialization parameters */
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	685a      	ldr	r2, [r3, #4]
              hlptim->Init.Clock.Prescaler |
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	689b      	ldr	r3, [r3, #8]
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001750:	431a      	orrs	r2, r3
              hlptim->Init.OutputPolarity  |
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6a1b      	ldr	r3, [r3, #32]
              hlptim->Init.Clock.Prescaler |
 8001756:	431a      	orrs	r2, r3
              hlptim->Init.UpdateMode      |
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              hlptim->Init.OutputPolarity  |
 800175c:	431a      	orrs	r2, r3
              hlptim->Init.CounterSource);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              hlptim->Init.UpdateMode      |
 8001762:	4313      	orrs	r3, r2
  tmpcfgr |= (hlptim->Init.Clock.Source    |
 8001764:	68fa      	ldr	r2, [r7, #12]
 8001766:	4313      	orrs	r3, r2
 8001768:	60fb      	str	r3, [r7, #12]

  /* Glitch filters for internal triggers and  external inputs are configured
   * only if an internal clock source is provided to the LPTIM
   */
  if (hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_APBCLOCK_LPOSC)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	2b00      	cmp	r3, #0
 8001770:	d107      	bne.n	8001782 <HAL_LPTIM_Init+0xae>
  {
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	69da      	ldr	r2, [r3, #28]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.Trigger.SampleTime |
 800177a:	4313      	orrs	r3, r2
 800177c:	68fa      	ldr	r2, [r7, #12]
 800177e:	4313      	orrs	r3, r2
 8001780:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external clock polarity and digital filter */
  if ((hlptim->Init.Clock.Source == LPTIM_CLOCKSOURCE_ULPTIM)
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	685b      	ldr	r3, [r3, #4]
 8001786:	2b01      	cmp	r3, #1
 8001788:	d005      	beq.n	8001796 <HAL_LPTIM_Init+0xc2>
      || (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800178e:	2380      	movs	r3, #128	; 0x80
 8001790:	041b      	lsls	r3, r3, #16
 8001792:	429a      	cmp	r2, r3
 8001794:	d107      	bne.n	80017a6 <HAL_LPTIM_Init+0xd2>
  {
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68da      	ldr	r2, [r3, #12]
                hlptim->Init.UltraLowPowerClock.SampleTime);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	691b      	ldr	r3, [r3, #16]
    tmpcfgr |= (hlptim->Init.UltraLowPowerClock.Polarity |
 800179e:	4313      	orrs	r3, r2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	60fb      	str	r3, [r7, #12]
  }

  /* Configure LPTIM external trigger */
  if (hlptim->Init.Trigger.Source != LPTIM_TRIGSOURCE_SOFTWARE)
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	4a0d      	ldr	r2, [pc, #52]	; (80017e0 <HAL_LPTIM_Init+0x10c>)
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d00a      	beq.n	80017c6 <HAL_LPTIM_Init+0xf2>
  {
    /* Enable External trigger and set the trigger source */
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	695a      	ldr	r2, [r3, #20]
                hlptim->Init.Trigger.ActiveEdge |
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	699b      	ldr	r3, [r3, #24]
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80017b8:	431a      	orrs	r2, r3
                hlptim->Init.Trigger.SampleTime);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
                hlptim->Init.Trigger.ActiveEdge |
 80017be:	4313      	orrs	r3, r2
    tmpcfgr |= (hlptim->Init.Trigger.Source     |
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	60fb      	str	r3, [r7, #12]
  }

  /* Write to LPTIMx CFGR */
  hlptim->Instance->CFGR = tmpcfgr;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	60da      	str	r2, [r3, #12]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	222e      	movs	r2, #46	; 0x2e
 80017d2:	2101      	movs	r1, #1
 80017d4:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	0018      	movs	r0, r3
 80017da:	46bd      	mov	sp, r7
 80017dc:	b004      	add	sp, #16
 80017de:	bd80      	pop	{r7, pc}
 80017e0:	0000ffff 	.word	0x0000ffff
 80017e4:	ffff1f3f 	.word	0xffff1f3f
 80017e8:	ff19f1fe 	.word	0xff19f1fe

080017ec <HAL_LPTIM_Counter_Start>:
  * @param  Period Specifies the Autoreload value.
  *         This parameter must be a value between 0x0001 and 0xFFFF.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LPTIM_Counter_Start(LPTIM_HandleTypeDef *hlptim, uint32_t Period)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));
  assert_param(IS_LPTIM_PERIOD(Period));

  /* Set the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_BUSY;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	222e      	movs	r2, #46	; 0x2e
 80017fa:	2102      	movs	r1, #2
 80017fc:	5499      	strb	r1, [r3, r2]

  /* If clock source is not ULPTIM clock and counter source is external, then it must not be prescaled */
  if ((hlptim->Init.Clock.Source != LPTIM_CLOCKSOURCE_ULPTIM)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	685b      	ldr	r3, [r3, #4]
 8001802:	2b01      	cmp	r3, #1
 8001804:	d00d      	beq.n	8001822 <HAL_LPTIM_Counter_Start+0x36>
      && (hlptim->Init.CounterSource == LPTIM_COUNTERSOURCE_EXTERNAL))
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800180a:	2380      	movs	r3, #128	; 0x80
 800180c:	041b      	lsls	r3, r3, #16
 800180e:	429a      	cmp	r2, r3
 8001810:	d107      	bne.n	8001822 <HAL_LPTIM_Counter_Start+0x36>
  {
    /* Check if clock is prescaled */
    assert_param(IS_LPTIM_CLOCK_PRESCALERDIV1(hlptim->Init.Clock.Prescaler));
    /* Set clock prescaler to 0 */
    hlptim->Instance->CFGR &= ~LPTIM_CFGR_PRESC;
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	68da      	ldr	r2, [r3, #12]
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4916      	ldr	r1, [pc, #88]	; (8001878 <HAL_LPTIM_Counter_Start+0x8c>)
 800181e:	400a      	ands	r2, r1
 8001820:	60da      	str	r2, [r3, #12]
  }

  /* Enable the Peripheral */
  __HAL_LPTIM_ENABLE(hlptim);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	691a      	ldr	r2, [r3, #16]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	2101      	movs	r1, #1
 800182e:	430a      	orrs	r2, r1
 8001830:	611a      	str	r2, [r3, #16]

  /* Clear flag */
  __HAL_LPTIM_CLEAR_FLAG(hlptim, LPTIM_FLAG_ARROK);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	2210      	movs	r2, #16
 8001838:	605a      	str	r2, [r3, #4]

  /* Load the period value in the autoreload register */
  __HAL_LPTIM_AUTORELOAD_SET(hlptim, Period);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	683a      	ldr	r2, [r7, #0]
 8001840:	619a      	str	r2, [r3, #24]

  /* Wait for the completion of the write operation to the LPTIM_ARR register */
  if (LPTIM_WaitForFlag(hlptim, LPTIM_FLAG_ARROK) == HAL_TIMEOUT)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2110      	movs	r1, #16
 8001846:	0018      	movs	r0, r3
 8001848:	f000 f824 	bl	8001894 <LPTIM_WaitForFlag>
 800184c:	0003      	movs	r3, r0
 800184e:	2b03      	cmp	r3, #3
 8001850:	d101      	bne.n	8001856 <HAL_LPTIM_Counter_Start+0x6a>
  {
    return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e00c      	b.n	8001870 <HAL_LPTIM_Counter_Start+0x84>
  }

  /* Start timer in continuous mode */
  __HAL_LPTIM_START_CONTINUOUS(hlptim);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	691a      	ldr	r2, [r3, #16]
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	2104      	movs	r1, #4
 8001862:	430a      	orrs	r2, r1
 8001864:	611a      	str	r2, [r3, #16]

  /* Change the LPTIM state */
  hlptim->State = HAL_LPTIM_STATE_READY;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	222e      	movs	r2, #46	; 0x2e
 800186a:	2101      	movs	r1, #1
 800186c:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800186e:	2300      	movs	r3, #0
}
 8001870:	0018      	movs	r0, r3
 8001872:	46bd      	mov	sp, r7
 8001874:	b002      	add	sp, #8
 8001876:	bd80      	pop	{r7, pc}
 8001878:	fffff1ff 	.word	0xfffff1ff

0800187c <HAL_LPTIM_ReadCounter>:
  * @brief  Return the current counter value.
  * @param  hlptim LPTIM handle
  * @retval Counter value.
  */
uint32_t HAL_LPTIM_ReadCounter(const LPTIM_HandleTypeDef *hlptim)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_LPTIM_INSTANCE(hlptim->Instance));

  return (hlptim->Instance->CNT);
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	69db      	ldr	r3, [r3, #28]
}
 800188a:	0018      	movs	r0, r3
 800188c:	46bd      	mov	sp, r7
 800188e:	b002      	add	sp, #8
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <LPTIM_WaitForFlag>:
  *                the configuration information for LPTIM module.
  * @param  flag   The lptim flag
  * @retval HAL status
  */
static HAL_StatusTypeDef LPTIM_WaitForFlag(const LPTIM_HandleTypeDef *hlptim, uint32_t flag)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
 800189c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef result = HAL_OK;
 800189e:	230f      	movs	r3, #15
 80018a0:	18fb      	adds	r3, r7, r3
 80018a2:	2200      	movs	r2, #0
 80018a4:	701a      	strb	r2, [r3, #0]
  uint32_t count = TIMEOUT * (SystemCoreClock / 20UL / 1000UL);
 80018a6:	4b15      	ldr	r3, [pc, #84]	; (80018fc <LPTIM_WaitForFlag+0x68>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4915      	ldr	r1, [pc, #84]	; (8001900 <LPTIM_WaitForFlag+0x6c>)
 80018ac:	0018      	movs	r0, r3
 80018ae:	f7fe fc35 	bl	800011c <__udivsi3>
 80018b2:	0003      	movs	r3, r0
 80018b4:	001a      	movs	r2, r3
 80018b6:	0013      	movs	r3, r2
 80018b8:	015b      	lsls	r3, r3, #5
 80018ba:	1a9b      	subs	r3, r3, r2
 80018bc:	009b      	lsls	r3, r3, #2
 80018be:	189b      	adds	r3, r3, r2
 80018c0:	00db      	lsls	r3, r3, #3
 80018c2:	60bb      	str	r3, [r7, #8]
  do
  {
    count--;
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	60bb      	str	r3, [r7, #8]
    if (count == 0UL)
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d103      	bne.n	80018d8 <LPTIM_WaitForFlag+0x44>
    {
      result = HAL_TIMEOUT;
 80018d0:	230f      	movs	r3, #15
 80018d2:	18fb      	adds	r3, r7, r3
 80018d4:	2203      	movs	r2, #3
 80018d6:	701a      	strb	r2, [r3, #0]
    }
  } while ((!(__HAL_LPTIM_GET_FLAG((hlptim), (flag)))) && (count != 0UL));
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	683a      	ldr	r2, [r7, #0]
 80018e0:	4013      	ands	r3, r2
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d002      	beq.n	80018ee <LPTIM_WaitForFlag+0x5a>
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1ea      	bne.n	80018c4 <LPTIM_WaitForFlag+0x30>

  return result;
 80018ee:	230f      	movs	r3, #15
 80018f0:	18fb      	adds	r3, r7, r3
 80018f2:	781b      	ldrb	r3, [r3, #0]
}
 80018f4:	0018      	movs	r0, r3
 80018f6:	46bd      	mov	sp, r7
 80018f8:	b004      	add	sp, #16
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	20000000 	.word	0x20000000
 8001900:	00004e20 	.word	0x00004e20

08001904 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001904:	b5b0      	push	{r4, r5, r7, lr}
 8001906:	b08a      	sub	sp, #40	; 0x28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b00      	cmp	r3, #0
 8001910:	d102      	bne.n	8001918 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	f000 fb5a 	bl	8001fcc <HAL_RCC_OscConfig+0x6c8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001918:	4bce      	ldr	r3, [pc, #824]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	220c      	movs	r2, #12
 800191e:	4013      	ands	r3, r2
 8001920:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001922:	4bcc      	ldr	r3, [pc, #816]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001924:	68da      	ldr	r2, [r3, #12]
 8001926:	2380      	movs	r3, #128	; 0x80
 8001928:	025b      	lsls	r3, r3, #9
 800192a:	4013      	ands	r3, r2
 800192c:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	2201      	movs	r2, #1
 8001934:	4013      	ands	r3, r2
 8001936:	d100      	bne.n	800193a <HAL_RCC_OscConfig+0x36>
 8001938:	e07c      	b.n	8001a34 <HAL_RCC_OscConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800193a:	6a3b      	ldr	r3, [r7, #32]
 800193c:	2b08      	cmp	r3, #8
 800193e:	d007      	beq.n	8001950 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001940:	6a3b      	ldr	r3, [r7, #32]
 8001942:	2b0c      	cmp	r3, #12
 8001944:	d111      	bne.n	800196a <HAL_RCC_OscConfig+0x66>
 8001946:	69fa      	ldr	r2, [r7, #28]
 8001948:	2380      	movs	r3, #128	; 0x80
 800194a:	025b      	lsls	r3, r3, #9
 800194c:	429a      	cmp	r2, r3
 800194e:	d10c      	bne.n	800196a <HAL_RCC_OscConfig+0x66>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001950:	4bc0      	ldr	r3, [pc, #768]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001952:	681a      	ldr	r2, [r3, #0]
 8001954:	2380      	movs	r3, #128	; 0x80
 8001956:	029b      	lsls	r3, r3, #10
 8001958:	4013      	ands	r3, r2
 800195a:	d100      	bne.n	800195e <HAL_RCC_OscConfig+0x5a>
 800195c:	e069      	b.n	8001a32 <HAL_RCC_OscConfig+0x12e>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d165      	bne.n	8001a32 <HAL_RCC_OscConfig+0x12e>
      {
        return HAL_ERROR;
 8001966:	2301      	movs	r3, #1
 8001968:	e330      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	685a      	ldr	r2, [r3, #4]
 800196e:	2380      	movs	r3, #128	; 0x80
 8001970:	025b      	lsls	r3, r3, #9
 8001972:	429a      	cmp	r2, r3
 8001974:	d107      	bne.n	8001986 <HAL_RCC_OscConfig+0x82>
 8001976:	4bb7      	ldr	r3, [pc, #732]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4bb6      	ldr	r3, [pc, #728]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	0249      	lsls	r1, r1, #9
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e027      	b.n	80019d6 <HAL_RCC_OscConfig+0xd2>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685a      	ldr	r2, [r3, #4]
 800198a:	23a0      	movs	r3, #160	; 0xa0
 800198c:	02db      	lsls	r3, r3, #11
 800198e:	429a      	cmp	r2, r3
 8001990:	d10e      	bne.n	80019b0 <HAL_RCC_OscConfig+0xac>
 8001992:	4bb0      	ldr	r3, [pc, #704]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4baf      	ldr	r3, [pc, #700]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001998:	2180      	movs	r1, #128	; 0x80
 800199a:	02c9      	lsls	r1, r1, #11
 800199c:	430a      	orrs	r2, r1
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	4bac      	ldr	r3, [pc, #688]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4bab      	ldr	r3, [pc, #684]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 80019a6:	2180      	movs	r1, #128	; 0x80
 80019a8:	0249      	lsls	r1, r1, #9
 80019aa:	430a      	orrs	r2, r1
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	e012      	b.n	80019d6 <HAL_RCC_OscConfig+0xd2>
 80019b0:	4ba8      	ldr	r3, [pc, #672]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4ba7      	ldr	r3, [pc, #668]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 80019b6:	49a8      	ldr	r1, [pc, #672]	; (8001c58 <HAL_RCC_OscConfig+0x354>)
 80019b8:	400a      	ands	r2, r1
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	4ba5      	ldr	r3, [pc, #660]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 80019be:	681a      	ldr	r2, [r3, #0]
 80019c0:	2380      	movs	r3, #128	; 0x80
 80019c2:	025b      	lsls	r3, r3, #9
 80019c4:	4013      	ands	r3, r2
 80019c6:	60fb      	str	r3, [r7, #12]
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	4ba2      	ldr	r3, [pc, #648]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	4ba1      	ldr	r3, [pc, #644]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 80019d0:	49a2      	ldr	r1, [pc, #648]	; (8001c5c <HAL_RCC_OscConfig+0x358>)
 80019d2:	400a      	ands	r2, r1
 80019d4:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d014      	beq.n	8001a08 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019de:	f7ff fa07 	bl	8000df0 <HAL_GetTick>
 80019e2:	0003      	movs	r3, r0
 80019e4:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0xf6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019e8:	f7ff fa02 	bl	8000df0 <HAL_GetTick>
 80019ec:	0002      	movs	r2, r0
 80019ee:	69bb      	ldr	r3, [r7, #24]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b64      	cmp	r3, #100	; 0x64
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e2e8      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019fa:	4b96      	ldr	r3, [pc, #600]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 80019fc:	681a      	ldr	r2, [r3, #0]
 80019fe:	2380      	movs	r3, #128	; 0x80
 8001a00:	029b      	lsls	r3, r3, #10
 8001a02:	4013      	ands	r3, r2
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0xe4>
 8001a06:	e015      	b.n	8001a34 <HAL_RCC_OscConfig+0x130>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a08:	f7ff f9f2 	bl	8000df0 <HAL_GetTick>
 8001a0c:	0003      	movs	r3, r0
 8001a0e:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a10:	e008      	b.n	8001a24 <HAL_RCC_OscConfig+0x120>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001a12:	f7ff f9ed 	bl	8000df0 <HAL_GetTick>
 8001a16:	0002      	movs	r2, r0
 8001a18:	69bb      	ldr	r3, [r7, #24]
 8001a1a:	1ad3      	subs	r3, r2, r3
 8001a1c:	2b64      	cmp	r3, #100	; 0x64
 8001a1e:	d901      	bls.n	8001a24 <HAL_RCC_OscConfig+0x120>
          {
            return HAL_TIMEOUT;
 8001a20:	2303      	movs	r3, #3
 8001a22:	e2d3      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001a24:	4b8b      	ldr	r3, [pc, #556]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	2380      	movs	r3, #128	; 0x80
 8001a2a:	029b      	lsls	r3, r3, #10
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d1f0      	bne.n	8001a12 <HAL_RCC_OscConfig+0x10e>
 8001a30:	e000      	b.n	8001a34 <HAL_RCC_OscConfig+0x130>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a32:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	2202      	movs	r2, #2
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	d100      	bne.n	8001a40 <HAL_RCC_OscConfig+0x13c>
 8001a3e:	e08b      	b.n	8001b58 <HAL_RCC_OscConfig+0x254>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a46:	6a3b      	ldr	r3, [r7, #32]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	d005      	beq.n	8001a58 <HAL_RCC_OscConfig+0x154>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	2b0c      	cmp	r3, #12
 8001a50:	d13e      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1cc>
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d13b      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x1cc>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a58:	4b7e      	ldr	r3, [pc, #504]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2204      	movs	r2, #4
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d004      	beq.n	8001a6c <HAL_RCC_OscConfig+0x168>
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d101      	bne.n	8001a6c <HAL_RCC_OscConfig+0x168>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e2af      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a6c:	4b79      	ldr	r3, [pc, #484]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	4a7b      	ldr	r2, [pc, #492]	; (8001c60 <HAL_RCC_OscConfig+0x35c>)
 8001a72:	4013      	ands	r3, r2
 8001a74:	0019      	movs	r1, r3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	691b      	ldr	r3, [r3, #16]
 8001a7a:	021a      	lsls	r2, r3, #8
 8001a7c:	4b75      	ldr	r3, [pc, #468]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001a7e:	430a      	orrs	r2, r1
 8001a80:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a82:	4b74      	ldr	r3, [pc, #464]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	2209      	movs	r2, #9
 8001a88:	4393      	bics	r3, r2
 8001a8a:	0019      	movs	r1, r3
 8001a8c:	4b71      	ldr	r3, [pc, #452]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001a8e:	697a      	ldr	r2, [r7, #20]
 8001a90:	430a      	orrs	r2, r1
 8001a92:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a94:	f000 fbe8 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8001a98:	0001      	movs	r1, r0
 8001a9a:	4b6e      	ldr	r3, [pc, #440]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001a9c:	68db      	ldr	r3, [r3, #12]
 8001a9e:	091b      	lsrs	r3, r3, #4
 8001aa0:	220f      	movs	r2, #15
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	4a6f      	ldr	r2, [pc, #444]	; (8001c64 <HAL_RCC_OscConfig+0x360>)
 8001aa6:	5cd3      	ldrb	r3, [r2, r3]
 8001aa8:	000a      	movs	r2, r1
 8001aaa:	40da      	lsrs	r2, r3
 8001aac:	4b6e      	ldr	r3, [pc, #440]	; (8001c68 <HAL_RCC_OscConfig+0x364>)
 8001aae:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001ab0:	4b6e      	ldr	r3, [pc, #440]	; (8001c6c <HAL_RCC_OscConfig+0x368>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	2513      	movs	r5, #19
 8001ab6:	197c      	adds	r4, r7, r5
 8001ab8:	0018      	movs	r0, r3
 8001aba:	f7ff f953 	bl	8000d64 <HAL_InitTick>
 8001abe:	0003      	movs	r3, r0
 8001ac0:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001ac2:	197b      	adds	r3, r7, r5
 8001ac4:	781b      	ldrb	r3, [r3, #0]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d046      	beq.n	8001b58 <HAL_RCC_OscConfig+0x254>
      {
        return status;
 8001aca:	197b      	adds	r3, r7, r5
 8001acc:	781b      	ldrb	r3, [r3, #0]
 8001ace:	e27d      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001ad0:	697b      	ldr	r3, [r7, #20]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d027      	beq.n	8001b26 <HAL_RCC_OscConfig+0x222>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001ad6:	4b5f      	ldr	r3, [pc, #380]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	2209      	movs	r2, #9
 8001adc:	4393      	bics	r3, r2
 8001ade:	0019      	movs	r1, r3
 8001ae0:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001ae2:	697a      	ldr	r2, [r7, #20]
 8001ae4:	430a      	orrs	r2, r1
 8001ae6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ae8:	f7ff f982 	bl	8000df0 <HAL_GetTick>
 8001aec:	0003      	movs	r3, r0
 8001aee:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff f97d 	bl	8000df0 <HAL_GetTick>
 8001af6:	0002      	movs	r2, r0
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e263      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	2204      	movs	r2, #4
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	d0f1      	beq.n	8001af2 <HAL_RCC_OscConfig+0x1ee>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b0e:	4b51      	ldr	r3, [pc, #324]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b10:	685b      	ldr	r3, [r3, #4]
 8001b12:	4a53      	ldr	r2, [pc, #332]	; (8001c60 <HAL_RCC_OscConfig+0x35c>)
 8001b14:	4013      	ands	r3, r2
 8001b16:	0019      	movs	r1, r3
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	691b      	ldr	r3, [r3, #16]
 8001b1c:	021a      	lsls	r2, r3, #8
 8001b1e:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b20:	430a      	orrs	r2, r1
 8001b22:	605a      	str	r2, [r3, #4]
 8001b24:	e018      	b.n	8001b58 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001b26:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	4b4a      	ldr	r3, [pc, #296]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b2c:	2101      	movs	r1, #1
 8001b2e:	438a      	bics	r2, r1
 8001b30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b32:	f7ff f95d 	bl	8000df0 <HAL_GetTick>
 8001b36:	0003      	movs	r3, r0
 8001b38:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x24a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b3c:	f7ff f958 	bl	8000df0 <HAL_GetTick>
 8001b40:	0002      	movs	r2, r0
 8001b42:	69bb      	ldr	r3, [r7, #24]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e23e      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2204      	movs	r2, #4
 8001b54:	4013      	ands	r3, r2
 8001b56:	d1f1      	bne.n	8001b3c <HAL_RCC_OscConfig+0x238>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2210      	movs	r2, #16
 8001b5e:	4013      	ands	r3, r2
 8001b60:	d100      	bne.n	8001b64 <HAL_RCC_OscConfig+0x260>
 8001b62:	e0a1      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3a4>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b64:	6a3b      	ldr	r3, [r7, #32]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d140      	bne.n	8001bec <HAL_RCC_OscConfig+0x2e8>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b6c:	681a      	ldr	r2, [r3, #0]
 8001b6e:	2380      	movs	r3, #128	; 0x80
 8001b70:	009b      	lsls	r3, r3, #2
 8001b72:	4013      	ands	r3, r2
 8001b74:	d005      	beq.n	8001b82 <HAL_RCC_OscConfig+0x27e>
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	699b      	ldr	r3, [r3, #24]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <HAL_RCC_OscConfig+0x27e>
      {
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e224      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	4a3a      	ldr	r2, [pc, #232]	; (8001c70 <HAL_RCC_OscConfig+0x36c>)
 8001b88:	4013      	ands	r3, r2
 8001b8a:	0019      	movs	r1, r3
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6a1a      	ldr	r2, [r3, #32]
 8001b90:	4b30      	ldr	r3, [pc, #192]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b92:	430a      	orrs	r2, r1
 8001b94:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b96:	4b2f      	ldr	r3, [pc, #188]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001b98:	685b      	ldr	r3, [r3, #4]
 8001b9a:	021b      	lsls	r3, r3, #8
 8001b9c:	0a19      	lsrs	r1, r3, #8
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	69db      	ldr	r3, [r3, #28]
 8001ba2:	061a      	lsls	r2, r3, #24
 8001ba4:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001ba6:	430a      	orrs	r2, r1
 8001ba8:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	0b5b      	lsrs	r3, r3, #13
 8001bb0:	3301      	adds	r3, #1
 8001bb2:	2280      	movs	r2, #128	; 0x80
 8001bb4:	0212      	lsls	r2, r2, #8
 8001bb6:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001bb8:	4b26      	ldr	r3, [pc, #152]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	091b      	lsrs	r3, r3, #4
 8001bbe:	210f      	movs	r1, #15
 8001bc0:	400b      	ands	r3, r1
 8001bc2:	4928      	ldr	r1, [pc, #160]	; (8001c64 <HAL_RCC_OscConfig+0x360>)
 8001bc4:	5ccb      	ldrb	r3, [r1, r3]
 8001bc6:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001bc8:	4b27      	ldr	r3, [pc, #156]	; (8001c68 <HAL_RCC_OscConfig+0x364>)
 8001bca:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001bcc:	4b27      	ldr	r3, [pc, #156]	; (8001c6c <HAL_RCC_OscConfig+0x368>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	2513      	movs	r5, #19
 8001bd2:	197c      	adds	r4, r7, r5
 8001bd4:	0018      	movs	r0, r3
 8001bd6:	f7ff f8c5 	bl	8000d64 <HAL_InitTick>
 8001bda:	0003      	movs	r3, r0
 8001bdc:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001bde:	197b      	adds	r3, r7, r5
 8001be0:	781b      	ldrb	r3, [r3, #0]
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d060      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x3a4>
        {
          return status;
 8001be6:	197b      	adds	r3, r7, r5
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	e1ef      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d03f      	beq.n	8001c74 <HAL_RCC_OscConfig+0x370>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bf4:	4b17      	ldr	r3, [pc, #92]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001bf6:	681a      	ldr	r2, [r3, #0]
 8001bf8:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001bfa:	2180      	movs	r1, #128	; 0x80
 8001bfc:	0049      	lsls	r1, r1, #1
 8001bfe:	430a      	orrs	r2, r1
 8001c00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c02:	f7ff f8f5 	bl	8000df0 <HAL_GetTick>
 8001c06:	0003      	movs	r3, r0
 8001c08:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c0a:	e008      	b.n	8001c1e <HAL_RCC_OscConfig+0x31a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c0c:	f7ff f8f0 	bl	8000df0 <HAL_GetTick>
 8001c10:	0002      	movs	r2, r0
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	1ad3      	subs	r3, r2, r3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d901      	bls.n	8001c1e <HAL_RCC_OscConfig+0x31a>
          {
            return HAL_TIMEOUT;
 8001c1a:	2303      	movs	r3, #3
 8001c1c:	e1d6      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001c1e:	4b0d      	ldr	r3, [pc, #52]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001c20:	681a      	ldr	r2, [r3, #0]
 8001c22:	2380      	movs	r3, #128	; 0x80
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	4013      	ands	r3, r2
 8001c28:	d0f0      	beq.n	8001c0c <HAL_RCC_OscConfig+0x308>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	4a10      	ldr	r2, [pc, #64]	; (8001c70 <HAL_RCC_OscConfig+0x36c>)
 8001c30:	4013      	ands	r3, r2
 8001c32:	0019      	movs	r1, r3
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6a1a      	ldr	r2, [r3, #32]
 8001c38:	4b06      	ldr	r3, [pc, #24]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001c3a:	430a      	orrs	r2, r1
 8001c3c:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c3e:	4b05      	ldr	r3, [pc, #20]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	021b      	lsls	r3, r3, #8
 8001c44:	0a19      	lsrs	r1, r3, #8
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
 8001c4a:	061a      	lsls	r2, r3, #24
 8001c4c:	4b01      	ldr	r3, [pc, #4]	; (8001c54 <HAL_RCC_OscConfig+0x350>)
 8001c4e:	430a      	orrs	r2, r1
 8001c50:	605a      	str	r2, [r3, #4]
 8001c52:	e029      	b.n	8001ca8 <HAL_RCC_OscConfig+0x3a4>
 8001c54:	40021000 	.word	0x40021000
 8001c58:	fffeffff 	.word	0xfffeffff
 8001c5c:	fffbffff 	.word	0xfffbffff
 8001c60:	ffffe0ff 	.word	0xffffe0ff
 8001c64:	08003b38 	.word	0x08003b38
 8001c68:	20000000 	.word	0x20000000
 8001c6c:	20000004 	.word	0x20000004
 8001c70:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c74:	4bbe      	ldr	r3, [pc, #760]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	4bbd      	ldr	r3, [pc, #756]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001c7a:	49be      	ldr	r1, [pc, #760]	; (8001f74 <HAL_RCC_OscConfig+0x670>)
 8001c7c:	400a      	ands	r2, r1
 8001c7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c80:	f7ff f8b6 	bl	8000df0 <HAL_GetTick>
 8001c84:	0003      	movs	r3, r0
 8001c86:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c88:	e008      	b.n	8001c9c <HAL_RCC_OscConfig+0x398>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c8a:	f7ff f8b1 	bl	8000df0 <HAL_GetTick>
 8001c8e:	0002      	movs	r2, r0
 8001c90:	69bb      	ldr	r3, [r7, #24]
 8001c92:	1ad3      	subs	r3, r2, r3
 8001c94:	2b02      	cmp	r3, #2
 8001c96:	d901      	bls.n	8001c9c <HAL_RCC_OscConfig+0x398>
          {
            return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e197      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c9c:	4bb4      	ldr	r3, [pc, #720]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	2380      	movs	r3, #128	; 0x80
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	d1f0      	bne.n	8001c8a <HAL_RCC_OscConfig+0x386>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2208      	movs	r2, #8
 8001cae:	4013      	ands	r3, r2
 8001cb0:	d036      	beq.n	8001d20 <HAL_RCC_OscConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	695b      	ldr	r3, [r3, #20]
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d019      	beq.n	8001cee <HAL_RCC_OscConfig+0x3ea>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001cba:	4bad      	ldr	r3, [pc, #692]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001cbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cbe:	4bac      	ldr	r3, [pc, #688]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cc6:	f7ff f893 	bl	8000df0 <HAL_GetTick>
 8001cca:	0003      	movs	r3, r0
 8001ccc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cce:	e008      	b.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cd0:	f7ff f88e 	bl	8000df0 <HAL_GetTick>
 8001cd4:	0002      	movs	r2, r0
 8001cd6:	69bb      	ldr	r3, [r7, #24]
 8001cd8:	1ad3      	subs	r3, r2, r3
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d901      	bls.n	8001ce2 <HAL_RCC_OscConfig+0x3de>
        {
          return HAL_TIMEOUT;
 8001cde:	2303      	movs	r3, #3
 8001ce0:	e174      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ce2:	4ba3      	ldr	r3, [pc, #652]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ce6:	2202      	movs	r2, #2
 8001ce8:	4013      	ands	r3, r2
 8001cea:	d0f1      	beq.n	8001cd0 <HAL_RCC_OscConfig+0x3cc>
 8001cec:	e018      	b.n	8001d20 <HAL_RCC_OscConfig+0x41c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cee:	4ba0      	ldr	r3, [pc, #640]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001cf0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cf2:	4b9f      	ldr	r3, [pc, #636]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001cf4:	2101      	movs	r1, #1
 8001cf6:	438a      	bics	r2, r1
 8001cf8:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cfa:	f7ff f879 	bl	8000df0 <HAL_GetTick>
 8001cfe:	0003      	movs	r3, r0
 8001d00:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d02:	e008      	b.n	8001d16 <HAL_RCC_OscConfig+0x412>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001d04:	f7ff f874 	bl	8000df0 <HAL_GetTick>
 8001d08:	0002      	movs	r2, r0
 8001d0a:	69bb      	ldr	r3, [r7, #24]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	2b02      	cmp	r3, #2
 8001d10:	d901      	bls.n	8001d16 <HAL_RCC_OscConfig+0x412>
        {
          return HAL_TIMEOUT;
 8001d12:	2303      	movs	r3, #3
 8001d14:	e15a      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001d16:	4b96      	ldr	r3, [pc, #600]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001d18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d1a:	2202      	movs	r2, #2
 8001d1c:	4013      	ands	r3, r2
 8001d1e:	d1f1      	bne.n	8001d04 <HAL_RCC_OscConfig+0x400>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	2204      	movs	r2, #4
 8001d26:	4013      	ands	r3, r2
 8001d28:	d100      	bne.n	8001d2c <HAL_RCC_OscConfig+0x428>
 8001d2a:	e0ae      	b.n	8001e8a <HAL_RCC_OscConfig+0x586>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d2c:	2027      	movs	r0, #39	; 0x27
 8001d2e:	183b      	adds	r3, r7, r0
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d34:	4b8e      	ldr	r3, [pc, #568]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001d36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	055b      	lsls	r3, r3, #21
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d109      	bne.n	8001d54 <HAL_RCC_OscConfig+0x450>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d40:	4b8b      	ldr	r3, [pc, #556]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001d42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d44:	4b8a      	ldr	r3, [pc, #552]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001d46:	2180      	movs	r1, #128	; 0x80
 8001d48:	0549      	lsls	r1, r1, #21
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d4e:	183b      	adds	r3, r7, r0
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d54:	4b88      	ldr	r3, [pc, #544]	; (8001f78 <HAL_RCC_OscConfig+0x674>)
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	2380      	movs	r3, #128	; 0x80
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	d11a      	bne.n	8001d96 <HAL_RCC_OscConfig+0x492>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d60:	4b85      	ldr	r3, [pc, #532]	; (8001f78 <HAL_RCC_OscConfig+0x674>)
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	4b84      	ldr	r3, [pc, #528]	; (8001f78 <HAL_RCC_OscConfig+0x674>)
 8001d66:	2180      	movs	r1, #128	; 0x80
 8001d68:	0049      	lsls	r1, r1, #1
 8001d6a:	430a      	orrs	r2, r1
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d6e:	f7ff f83f 	bl	8000df0 <HAL_GetTick>
 8001d72:	0003      	movs	r3, r0
 8001d74:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d76:	e008      	b.n	8001d8a <HAL_RCC_OscConfig+0x486>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d78:	f7ff f83a 	bl	8000df0 <HAL_GetTick>
 8001d7c:	0002      	movs	r2, r0
 8001d7e:	69bb      	ldr	r3, [r7, #24]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	2b64      	cmp	r3, #100	; 0x64
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x486>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e120      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d8a:	4b7b      	ldr	r3, [pc, #492]	; (8001f78 <HAL_RCC_OscConfig+0x674>)
 8001d8c:	681a      	ldr	r2, [r3, #0]
 8001d8e:	2380      	movs	r3, #128	; 0x80
 8001d90:	005b      	lsls	r3, r3, #1
 8001d92:	4013      	ands	r3, r2
 8001d94:	d0f0      	beq.n	8001d78 <HAL_RCC_OscConfig+0x474>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689a      	ldr	r2, [r3, #8]
 8001d9a:	2380      	movs	r3, #128	; 0x80
 8001d9c:	005b      	lsls	r3, r3, #1
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d107      	bne.n	8001db2 <HAL_RCC_OscConfig+0x4ae>
 8001da2:	4b73      	ldr	r3, [pc, #460]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001da4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da6:	4b72      	ldr	r3, [pc, #456]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001da8:	2180      	movs	r1, #128	; 0x80
 8001daa:	0049      	lsls	r1, r1, #1
 8001dac:	430a      	orrs	r2, r1
 8001dae:	651a      	str	r2, [r3, #80]	; 0x50
 8001db0:	e031      	b.n	8001e16 <HAL_RCC_OscConfig+0x512>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d10c      	bne.n	8001dd4 <HAL_RCC_OscConfig+0x4d0>
 8001dba:	4b6d      	ldr	r3, [pc, #436]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001dbc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dbe:	4b6c      	ldr	r3, [pc, #432]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001dc0:	496c      	ldr	r1, [pc, #432]	; (8001f74 <HAL_RCC_OscConfig+0x670>)
 8001dc2:	400a      	ands	r2, r1
 8001dc4:	651a      	str	r2, [r3, #80]	; 0x50
 8001dc6:	4b6a      	ldr	r3, [pc, #424]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dca:	4b69      	ldr	r3, [pc, #420]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001dcc:	496b      	ldr	r1, [pc, #428]	; (8001f7c <HAL_RCC_OscConfig+0x678>)
 8001dce:	400a      	ands	r2, r1
 8001dd0:	651a      	str	r2, [r3, #80]	; 0x50
 8001dd2:	e020      	b.n	8001e16 <HAL_RCC_OscConfig+0x512>
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	689a      	ldr	r2, [r3, #8]
 8001dd8:	23a0      	movs	r3, #160	; 0xa0
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	429a      	cmp	r2, r3
 8001dde:	d10e      	bne.n	8001dfe <HAL_RCC_OscConfig+0x4fa>
 8001de0:	4b63      	ldr	r3, [pc, #396]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001de2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de4:	4b62      	ldr	r3, [pc, #392]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001de6:	2180      	movs	r1, #128	; 0x80
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	651a      	str	r2, [r3, #80]	; 0x50
 8001dee:	4b60      	ldr	r3, [pc, #384]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001df0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001df2:	4b5f      	ldr	r3, [pc, #380]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001df4:	2180      	movs	r1, #128	; 0x80
 8001df6:	0049      	lsls	r1, r1, #1
 8001df8:	430a      	orrs	r2, r1
 8001dfa:	651a      	str	r2, [r3, #80]	; 0x50
 8001dfc:	e00b      	b.n	8001e16 <HAL_RCC_OscConfig+0x512>
 8001dfe:	4b5c      	ldr	r3, [pc, #368]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001e00:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e02:	4b5b      	ldr	r3, [pc, #364]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001e04:	495b      	ldr	r1, [pc, #364]	; (8001f74 <HAL_RCC_OscConfig+0x670>)
 8001e06:	400a      	ands	r2, r1
 8001e08:	651a      	str	r2, [r3, #80]	; 0x50
 8001e0a:	4b59      	ldr	r3, [pc, #356]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001e0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e0e:	4b58      	ldr	r3, [pc, #352]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001e10:	495a      	ldr	r1, [pc, #360]	; (8001f7c <HAL_RCC_OscConfig+0x678>)
 8001e12:	400a      	ands	r2, r1
 8001e14:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d015      	beq.n	8001e4a <HAL_RCC_OscConfig+0x546>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e1e:	f7fe ffe7 	bl	8000df0 <HAL_GetTick>
 8001e22:	0003      	movs	r3, r0
 8001e24:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e26:	e009      	b.n	8001e3c <HAL_RCC_OscConfig+0x538>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e28:	f7fe ffe2 	bl	8000df0 <HAL_GetTick>
 8001e2c:	0002      	movs	r2, r0
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	1ad3      	subs	r3, r2, r3
 8001e32:	4a53      	ldr	r2, [pc, #332]	; (8001f80 <HAL_RCC_OscConfig+0x67c>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d901      	bls.n	8001e3c <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e0c7      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e3c:	4b4c      	ldr	r3, [pc, #304]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001e3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e40:	2380      	movs	r3, #128	; 0x80
 8001e42:	009b      	lsls	r3, r3, #2
 8001e44:	4013      	ands	r3, r2
 8001e46:	d0ef      	beq.n	8001e28 <HAL_RCC_OscConfig+0x524>
 8001e48:	e014      	b.n	8001e74 <HAL_RCC_OscConfig+0x570>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e4a:	f7fe ffd1 	bl	8000df0 <HAL_GetTick>
 8001e4e:	0003      	movs	r3, r0
 8001e50:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e52:	e009      	b.n	8001e68 <HAL_RCC_OscConfig+0x564>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e54:	f7fe ffcc 	bl	8000df0 <HAL_GetTick>
 8001e58:	0002      	movs	r2, r0
 8001e5a:	69bb      	ldr	r3, [r7, #24]
 8001e5c:	1ad3      	subs	r3, r2, r3
 8001e5e:	4a48      	ldr	r2, [pc, #288]	; (8001f80 <HAL_RCC_OscConfig+0x67c>)
 8001e60:	4293      	cmp	r3, r2
 8001e62:	d901      	bls.n	8001e68 <HAL_RCC_OscConfig+0x564>
        {
          return HAL_TIMEOUT;
 8001e64:	2303      	movs	r3, #3
 8001e66:	e0b1      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e68:	4b41      	ldr	r3, [pc, #260]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001e6a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	009b      	lsls	r3, r3, #2
 8001e70:	4013      	ands	r3, r2
 8001e72:	d1ef      	bne.n	8001e54 <HAL_RCC_OscConfig+0x550>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e74:	2327      	movs	r3, #39	; 0x27
 8001e76:	18fb      	adds	r3, r7, r3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	2b01      	cmp	r3, #1
 8001e7c:	d105      	bne.n	8001e8a <HAL_RCC_OscConfig+0x586>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e7e:	4b3c      	ldr	r3, [pc, #240]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001e80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e82:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001e84:	493f      	ldr	r1, [pc, #252]	; (8001f84 <HAL_RCC_OscConfig+0x680>)
 8001e86:	400a      	ands	r2, r1
 8001e88:	639a      	str	r2, [r3, #56]	; 0x38
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d100      	bne.n	8001e94 <HAL_RCC_OscConfig+0x590>
 8001e92:	e09a      	b.n	8001fca <HAL_RCC_OscConfig+0x6c6>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e94:	6a3b      	ldr	r3, [r7, #32]
 8001e96:	2b0c      	cmp	r3, #12
 8001e98:	d064      	beq.n	8001f64 <HAL_RCC_OscConfig+0x660>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9e:	2b02      	cmp	r3, #2
 8001ea0:	d145      	bne.n	8001f2e <HAL_RCC_OscConfig+0x62a>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ea2:	4b33      	ldr	r3, [pc, #204]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001ea4:	681a      	ldr	r2, [r3, #0]
 8001ea6:	4b32      	ldr	r3, [pc, #200]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001ea8:	4937      	ldr	r1, [pc, #220]	; (8001f88 <HAL_RCC_OscConfig+0x684>)
 8001eaa:	400a      	ands	r2, r1
 8001eac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eae:	f7fe ff9f 	bl	8000df0 <HAL_GetTick>
 8001eb2:	0003      	movs	r3, r0
 8001eb4:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001eb6:	e008      	b.n	8001eca <HAL_RCC_OscConfig+0x5c6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001eb8:	f7fe ff9a 	bl	8000df0 <HAL_GetTick>
 8001ebc:	0002      	movs	r2, r0
 8001ebe:	69bb      	ldr	r3, [r7, #24]
 8001ec0:	1ad3      	subs	r3, r2, r3
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d901      	bls.n	8001eca <HAL_RCC_OscConfig+0x5c6>
          {
            return HAL_TIMEOUT;
 8001ec6:	2303      	movs	r3, #3
 8001ec8:	e080      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001eca:	4b29      	ldr	r3, [pc, #164]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001ecc:	681a      	ldr	r2, [r3, #0]
 8001ece:	2380      	movs	r3, #128	; 0x80
 8001ed0:	049b      	lsls	r3, r3, #18
 8001ed2:	4013      	ands	r3, r2
 8001ed4:	d1f0      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x5b4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001ed8:	68db      	ldr	r3, [r3, #12]
 8001eda:	4a2c      	ldr	r2, [pc, #176]	; (8001f8c <HAL_RCC_OscConfig+0x688>)
 8001edc:	4013      	ands	r3, r2
 8001ede:	0019      	movs	r1, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee8:	431a      	orrs	r2, r3
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	4b1f      	ldr	r3, [pc, #124]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ef6:	4b1e      	ldr	r3, [pc, #120]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b1d      	ldr	r3, [pc, #116]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001efc:	2180      	movs	r1, #128	; 0x80
 8001efe:	0449      	lsls	r1, r1, #17
 8001f00:	430a      	orrs	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f04:	f7fe ff74 	bl	8000df0 <HAL_GetTick>
 8001f08:	0003      	movs	r3, r0
 8001f0a:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f0c:	e008      	b.n	8001f20 <HAL_RCC_OscConfig+0x61c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f0e:	f7fe ff6f 	bl	8000df0 <HAL_GetTick>
 8001f12:	0002      	movs	r2, r0
 8001f14:	69bb      	ldr	r3, [r7, #24]
 8001f16:	1ad3      	subs	r3, r2, r3
 8001f18:	2b02      	cmp	r3, #2
 8001f1a:	d901      	bls.n	8001f20 <HAL_RCC_OscConfig+0x61c>
          {
            return HAL_TIMEOUT;
 8001f1c:	2303      	movs	r3, #3
 8001f1e:	e055      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001f20:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001f22:	681a      	ldr	r2, [r3, #0]
 8001f24:	2380      	movs	r3, #128	; 0x80
 8001f26:	049b      	lsls	r3, r3, #18
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d0f0      	beq.n	8001f0e <HAL_RCC_OscConfig+0x60a>
 8001f2c:	e04d      	b.n	8001fca <HAL_RCC_OscConfig+0x6c6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f2e:	4b10      	ldr	r3, [pc, #64]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	4b0f      	ldr	r3, [pc, #60]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001f34:	4914      	ldr	r1, [pc, #80]	; (8001f88 <HAL_RCC_OscConfig+0x684>)
 8001f36:	400a      	ands	r2, r1
 8001f38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f3a:	f7fe ff59 	bl	8000df0 <HAL_GetTick>
 8001f3e:	0003      	movs	r3, r0
 8001f40:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f42:	e008      	b.n	8001f56 <HAL_RCC_OscConfig+0x652>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f44:	f7fe ff54 	bl	8000df0 <HAL_GetTick>
 8001f48:	0002      	movs	r2, r0
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	1ad3      	subs	r3, r2, r3
 8001f4e:	2b02      	cmp	r3, #2
 8001f50:	d901      	bls.n	8001f56 <HAL_RCC_OscConfig+0x652>
          {
            return HAL_TIMEOUT;
 8001f52:	2303      	movs	r3, #3
 8001f54:	e03a      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f56:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x66c>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	2380      	movs	r3, #128	; 0x80
 8001f5c:	049b      	lsls	r3, r3, #18
 8001f5e:	4013      	ands	r3, r2
 8001f60:	d1f0      	bne.n	8001f44 <HAL_RCC_OscConfig+0x640>
 8001f62:	e032      	b.n	8001fca <HAL_RCC_OscConfig+0x6c6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d111      	bne.n	8001f90 <HAL_RCC_OscConfig+0x68c>
      {
        return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e02d      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
 8001f70:	40021000 	.word	0x40021000
 8001f74:	fffffeff 	.word	0xfffffeff
 8001f78:	40007000 	.word	0x40007000
 8001f7c:	fffffbff 	.word	0xfffffbff
 8001f80:	00001388 	.word	0x00001388
 8001f84:	efffffff 	.word	0xefffffff
 8001f88:	feffffff 	.word	0xfeffffff
 8001f8c:	ff02ffff 	.word	0xff02ffff
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001f90:	4b10      	ldr	r3, [pc, #64]	; (8001fd4 <HAL_RCC_OscConfig+0x6d0>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f96:	69fa      	ldr	r2, [r7, #28]
 8001f98:	2380      	movs	r3, #128	; 0x80
 8001f9a:	025b      	lsls	r3, r3, #9
 8001f9c:	401a      	ands	r2, r3
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fa2:	429a      	cmp	r2, r3
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fa6:	69fa      	ldr	r2, [r7, #28]
 8001fa8:	23f0      	movs	r3, #240	; 0xf0
 8001faa:	039b      	lsls	r3, r3, #14
 8001fac:	401a      	ands	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d107      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x6c2>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8001fb6:	69fa      	ldr	r2, [r7, #28]
 8001fb8:	23c0      	movs	r3, #192	; 0xc0
 8001fba:	041b      	lsls	r3, r3, #16
 8001fbc:	401a      	ands	r2, r3
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d001      	beq.n	8001fca <HAL_RCC_OscConfig+0x6c6>
        {
          return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e000      	b.n	8001fcc <HAL_RCC_OscConfig+0x6c8>
        }
      }
    }
  }
  return HAL_OK;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	0018      	movs	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	b00a      	add	sp, #40	; 0x28
 8001fd2:	bdb0      	pop	{r4, r5, r7, pc}
 8001fd4:	40021000 	.word	0x40021000

08001fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fd8:	b5b0      	push	{r4, r5, r7, lr}
 8001fda:	b084      	sub	sp, #16
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d101      	bne.n	8001fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001fe8:	2301      	movs	r3, #1
 8001fea:	e128      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001fec:	4b96      	ldr	r3, [pc, #600]	; (8002248 <HAL_RCC_ClockConfig+0x270>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	4013      	ands	r3, r2
 8001ff4:	683a      	ldr	r2, [r7, #0]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d91e      	bls.n	8002038 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ffa:	4b93      	ldr	r3, [pc, #588]	; (8002248 <HAL_RCC_ClockConfig+0x270>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	2201      	movs	r2, #1
 8002000:	4393      	bics	r3, r2
 8002002:	0019      	movs	r1, r3
 8002004:	4b90      	ldr	r3, [pc, #576]	; (8002248 <HAL_RCC_ClockConfig+0x270>)
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	430a      	orrs	r2, r1
 800200a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800200c:	f7fe fef0 	bl	8000df0 <HAL_GetTick>
 8002010:	0003      	movs	r3, r0
 8002012:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002014:	e009      	b.n	800202a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002016:	f7fe feeb 	bl	8000df0 <HAL_GetTick>
 800201a:	0002      	movs	r2, r0
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4a8a      	ldr	r2, [pc, #552]	; (800224c <HAL_RCC_ClockConfig+0x274>)
 8002022:	4293      	cmp	r3, r2
 8002024:	d901      	bls.n	800202a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002026:	2303      	movs	r3, #3
 8002028:	e109      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800202a:	4b87      	ldr	r3, [pc, #540]	; (8002248 <HAL_RCC_ClockConfig+0x270>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	2201      	movs	r2, #1
 8002030:	4013      	ands	r3, r2
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	429a      	cmp	r2, r3
 8002036:	d1ee      	bne.n	8002016 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2202      	movs	r2, #2
 800203e:	4013      	ands	r3, r2
 8002040:	d009      	beq.n	8002056 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002042:	4b83      	ldr	r3, [pc, #524]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	22f0      	movs	r2, #240	; 0xf0
 8002048:	4393      	bics	r3, r2
 800204a:	0019      	movs	r1, r3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	689a      	ldr	r2, [r3, #8]
 8002050:	4b7f      	ldr	r3, [pc, #508]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 8002052:	430a      	orrs	r2, r1
 8002054:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	2201      	movs	r2, #1
 800205c:	4013      	ands	r3, r2
 800205e:	d100      	bne.n	8002062 <HAL_RCC_ClockConfig+0x8a>
 8002060:	e089      	b.n	8002176 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	2b02      	cmp	r3, #2
 8002068:	d107      	bne.n	800207a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800206a:	4b79      	ldr	r3, [pc, #484]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	2380      	movs	r3, #128	; 0x80
 8002070:	029b      	lsls	r3, r3, #10
 8002072:	4013      	ands	r3, r2
 8002074:	d120      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0e1      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	2b03      	cmp	r3, #3
 8002080:	d107      	bne.n	8002092 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002082:	4b73      	ldr	r3, [pc, #460]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 8002084:	681a      	ldr	r2, [r3, #0]
 8002086:	2380      	movs	r3, #128	; 0x80
 8002088:	049b      	lsls	r3, r3, #18
 800208a:	4013      	ands	r3, r2
 800208c:	d114      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800208e:	2301      	movs	r3, #1
 8002090:	e0d5      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b01      	cmp	r3, #1
 8002098:	d106      	bne.n	80020a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800209a:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	2204      	movs	r2, #4
 80020a0:	4013      	ands	r3, r2
 80020a2:	d109      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020a4:	2301      	movs	r3, #1
 80020a6:	e0ca      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80020a8:	4b69      	ldr	r3, [pc, #420]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 80020aa:	681a      	ldr	r2, [r3, #0]
 80020ac:	2380      	movs	r3, #128	; 0x80
 80020ae:	009b      	lsls	r3, r3, #2
 80020b0:	4013      	ands	r3, r2
 80020b2:	d101      	bne.n	80020b8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020b4:	2301      	movs	r3, #1
 80020b6:	e0c2      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80020b8:	4b65      	ldr	r3, [pc, #404]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2203      	movs	r2, #3
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	685a      	ldr	r2, [r3, #4]
 80020c6:	4b62      	ldr	r3, [pc, #392]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80020cc:	f7fe fe90 	bl	8000df0 <HAL_GetTick>
 80020d0:	0003      	movs	r3, r0
 80020d2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d111      	bne.n	8002100 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020dc:	e009      	b.n	80020f2 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020de:	f7fe fe87 	bl	8000df0 <HAL_GetTick>
 80020e2:	0002      	movs	r2, r0
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	1ad3      	subs	r3, r2, r3
 80020e8:	4a58      	ldr	r2, [pc, #352]	; (800224c <HAL_RCC_ClockConfig+0x274>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d901      	bls.n	80020f2 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 80020ee:	2303      	movs	r3, #3
 80020f0:	e0a5      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80020f2:	4b57      	ldr	r3, [pc, #348]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	220c      	movs	r2, #12
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b08      	cmp	r3, #8
 80020fc:	d1ef      	bne.n	80020de <HAL_RCC_ClockConfig+0x106>
 80020fe:	e03a      	b.n	8002176 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	685b      	ldr	r3, [r3, #4]
 8002104:	2b03      	cmp	r3, #3
 8002106:	d111      	bne.n	800212c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002108:	e009      	b.n	800211e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800210a:	f7fe fe71 	bl	8000df0 <HAL_GetTick>
 800210e:	0002      	movs	r2, r0
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	1ad3      	subs	r3, r2, r3
 8002114:	4a4d      	ldr	r2, [pc, #308]	; (800224c <HAL_RCC_ClockConfig+0x274>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d901      	bls.n	800211e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 800211a:	2303      	movs	r3, #3
 800211c:	e08f      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800211e:	4b4c      	ldr	r3, [pc, #304]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 8002120:	68db      	ldr	r3, [r3, #12]
 8002122:	220c      	movs	r2, #12
 8002124:	4013      	ands	r3, r2
 8002126:	2b0c      	cmp	r3, #12
 8002128:	d1ef      	bne.n	800210a <HAL_RCC_ClockConfig+0x132>
 800212a:	e024      	b.n	8002176 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d11b      	bne.n	800216c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002134:	e009      	b.n	800214a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002136:	f7fe fe5b 	bl	8000df0 <HAL_GetTick>
 800213a:	0002      	movs	r2, r0
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	4a42      	ldr	r2, [pc, #264]	; (800224c <HAL_RCC_ClockConfig+0x274>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d901      	bls.n	800214a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e079      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	220c      	movs	r2, #12
 8002150:	4013      	ands	r3, r2
 8002152:	2b04      	cmp	r3, #4
 8002154:	d1ef      	bne.n	8002136 <HAL_RCC_ClockConfig+0x15e>
 8002156:	e00e      	b.n	8002176 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002158:	f7fe fe4a 	bl	8000df0 <HAL_GetTick>
 800215c:	0002      	movs	r2, r0
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	1ad3      	subs	r3, r2, r3
 8002162:	4a3a      	ldr	r2, [pc, #232]	; (800224c <HAL_RCC_ClockConfig+0x274>)
 8002164:	4293      	cmp	r3, r2
 8002166:	d901      	bls.n	800216c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8002168:	2303      	movs	r3, #3
 800216a:	e068      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 800216c:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 800216e:	68db      	ldr	r3, [r3, #12]
 8002170:	220c      	movs	r2, #12
 8002172:	4013      	ands	r3, r2
 8002174:	d1f0      	bne.n	8002158 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002176:	4b34      	ldr	r3, [pc, #208]	; (8002248 <HAL_RCC_ClockConfig+0x270>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	2201      	movs	r2, #1
 800217c:	4013      	ands	r3, r2
 800217e:	683a      	ldr	r2, [r7, #0]
 8002180:	429a      	cmp	r2, r3
 8002182:	d21e      	bcs.n	80021c2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002184:	4b30      	ldr	r3, [pc, #192]	; (8002248 <HAL_RCC_ClockConfig+0x270>)
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	2201      	movs	r2, #1
 800218a:	4393      	bics	r3, r2
 800218c:	0019      	movs	r1, r3
 800218e:	4b2e      	ldr	r3, [pc, #184]	; (8002248 <HAL_RCC_ClockConfig+0x270>)
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	430a      	orrs	r2, r1
 8002194:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002196:	f7fe fe2b 	bl	8000df0 <HAL_GetTick>
 800219a:	0003      	movs	r3, r0
 800219c:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800219e:	e009      	b.n	80021b4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021a0:	f7fe fe26 	bl	8000df0 <HAL_GetTick>
 80021a4:	0002      	movs	r2, r0
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	4a28      	ldr	r2, [pc, #160]	; (800224c <HAL_RCC_ClockConfig+0x274>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d901      	bls.n	80021b4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 80021b0:	2303      	movs	r3, #3
 80021b2:	e044      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021b4:	4b24      	ldr	r3, [pc, #144]	; (8002248 <HAL_RCC_ClockConfig+0x270>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	2201      	movs	r2, #1
 80021ba:	4013      	ands	r3, r2
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	429a      	cmp	r2, r3
 80021c0:	d1ee      	bne.n	80021a0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	2204      	movs	r2, #4
 80021c8:	4013      	ands	r3, r2
 80021ca:	d009      	beq.n	80021e0 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021cc:	4b20      	ldr	r3, [pc, #128]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	4a20      	ldr	r2, [pc, #128]	; (8002254 <HAL_RCC_ClockConfig+0x27c>)
 80021d2:	4013      	ands	r3, r2
 80021d4:	0019      	movs	r1, r3
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	68da      	ldr	r2, [r3, #12]
 80021da:	4b1d      	ldr	r3, [pc, #116]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 80021dc:	430a      	orrs	r2, r1
 80021de:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	2208      	movs	r2, #8
 80021e6:	4013      	ands	r3, r2
 80021e8:	d00a      	beq.n	8002200 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80021ea:	4b19      	ldr	r3, [pc, #100]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4a1a      	ldr	r2, [pc, #104]	; (8002258 <HAL_RCC_ClockConfig+0x280>)
 80021f0:	4013      	ands	r3, r2
 80021f2:	0019      	movs	r1, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	00da      	lsls	r2, r3, #3
 80021fa:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 80021fc:	430a      	orrs	r2, r1
 80021fe:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002200:	f000 f832 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002204:	0001      	movs	r1, r0
 8002206:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_ClockConfig+0x278>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	091b      	lsrs	r3, r3, #4
 800220c:	220f      	movs	r2, #15
 800220e:	4013      	ands	r3, r2
 8002210:	4a12      	ldr	r2, [pc, #72]	; (800225c <HAL_RCC_ClockConfig+0x284>)
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	000a      	movs	r2, r1
 8002216:	40da      	lsrs	r2, r3
 8002218:	4b11      	ldr	r3, [pc, #68]	; (8002260 <HAL_RCC_ClockConfig+0x288>)
 800221a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800221c:	4b11      	ldr	r3, [pc, #68]	; (8002264 <HAL_RCC_ClockConfig+0x28c>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	250b      	movs	r5, #11
 8002222:	197c      	adds	r4, r7, r5
 8002224:	0018      	movs	r0, r3
 8002226:	f7fe fd9d 	bl	8000d64 <HAL_InitTick>
 800222a:	0003      	movs	r3, r0
 800222c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 800222e:	197b      	adds	r3, r7, r5
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	2b00      	cmp	r3, #0
 8002234:	d002      	beq.n	800223c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8002236:	197b      	adds	r3, r7, r5
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	e000      	b.n	800223e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	0018      	movs	r0, r3
 8002240:	46bd      	mov	sp, r7
 8002242:	b004      	add	sp, #16
 8002244:	bdb0      	pop	{r4, r5, r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	40022000 	.word	0x40022000
 800224c:	00001388 	.word	0x00001388
 8002250:	40021000 	.word	0x40021000
 8002254:	fffff8ff 	.word	0xfffff8ff
 8002258:	ffffc7ff 	.word	0xffffc7ff
 800225c:	08003b38 	.word	0x08003b38
 8002260:	20000000 	.word	0x20000000
 8002264:	20000004 	.word	0x20000004

08002268 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002268:	b5b0      	push	{r4, r5, r7, lr}
 800226a:	b08e      	sub	sp, #56	; 0x38
 800226c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 800226e:	4b4c      	ldr	r3, [pc, #304]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002270:	68db      	ldr	r3, [r3, #12]
 8002272:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002274:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002276:	230c      	movs	r3, #12
 8002278:	4013      	ands	r3, r2
 800227a:	2b0c      	cmp	r3, #12
 800227c:	d014      	beq.n	80022a8 <HAL_RCC_GetSysClockFreq+0x40>
 800227e:	d900      	bls.n	8002282 <HAL_RCC_GetSysClockFreq+0x1a>
 8002280:	e07b      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x112>
 8002282:	2b04      	cmp	r3, #4
 8002284:	d002      	beq.n	800228c <HAL_RCC_GetSysClockFreq+0x24>
 8002286:	2b08      	cmp	r3, #8
 8002288:	d00b      	beq.n	80022a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800228a:	e076      	b.n	800237a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800228c:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2210      	movs	r2, #16
 8002292:	4013      	ands	r3, r2
 8002294:	d002      	beq.n	800229c <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 8002296:	4b43      	ldr	r3, [pc, #268]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002298:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 800229a:	e07c      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 800229c:	4b42      	ldr	r3, [pc, #264]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800229e:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022a0:	e079      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80022a2:	4b42      	ldr	r3, [pc, #264]	; (80023ac <HAL_RCC_GetSysClockFreq+0x144>)
 80022a4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80022a6:	e076      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80022a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022aa:	0c9a      	lsrs	r2, r3, #18
 80022ac:	230f      	movs	r3, #15
 80022ae:	401a      	ands	r2, r3
 80022b0:	4b3f      	ldr	r3, [pc, #252]	; (80023b0 <HAL_RCC_GetSysClockFreq+0x148>)
 80022b2:	5c9b      	ldrb	r3, [r3, r2]
 80022b4:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	0d9a      	lsrs	r2, r3, #22
 80022ba:	2303      	movs	r3, #3
 80022bc:	4013      	ands	r3, r2
 80022be:	3301      	adds	r3, #1
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80022c2:	4b37      	ldr	r3, [pc, #220]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x138>)
 80022c4:	68da      	ldr	r2, [r3, #12]
 80022c6:	2380      	movs	r3, #128	; 0x80
 80022c8:	025b      	lsls	r3, r3, #9
 80022ca:	4013      	ands	r3, r2
 80022cc:	d01a      	beq.n	8002304 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80022ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022d0:	61bb      	str	r3, [r7, #24]
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	4a35      	ldr	r2, [pc, #212]	; (80023ac <HAL_RCC_GetSysClockFreq+0x144>)
 80022d8:	2300      	movs	r3, #0
 80022da:	69b8      	ldr	r0, [r7, #24]
 80022dc:	69f9      	ldr	r1, [r7, #28]
 80022de:	f7fd ffc9 	bl	8000274 <__aeabi_lmul>
 80022e2:	0002      	movs	r2, r0
 80022e4:	000b      	movs	r3, r1
 80022e6:	0010      	movs	r0, r2
 80022e8:	0019      	movs	r1, r3
 80022ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	2300      	movs	r3, #0
 80022f0:	617b      	str	r3, [r7, #20]
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	697b      	ldr	r3, [r7, #20]
 80022f6:	f7fd ff9d 	bl	8000234 <__aeabi_uldivmod>
 80022fa:	0002      	movs	r2, r0
 80022fc:	000b      	movs	r3, r1
 80022fe:	0013      	movs	r3, r2
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
 8002302:	e037      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x138>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2210      	movs	r2, #16
 800230a:	4013      	ands	r3, r2
 800230c:	d01a      	beq.n	8002344 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 800230e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002310:	60bb      	str	r3, [r7, #8]
 8002312:	2300      	movs	r3, #0
 8002314:	60fb      	str	r3, [r7, #12]
 8002316:	4a23      	ldr	r2, [pc, #140]	; (80023a4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8002318:	2300      	movs	r3, #0
 800231a:	68b8      	ldr	r0, [r7, #8]
 800231c:	68f9      	ldr	r1, [r7, #12]
 800231e:	f7fd ffa9 	bl	8000274 <__aeabi_lmul>
 8002322:	0002      	movs	r2, r0
 8002324:	000b      	movs	r3, r1
 8002326:	0010      	movs	r0, r2
 8002328:	0019      	movs	r1, r3
 800232a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800232c:	603b      	str	r3, [r7, #0]
 800232e:	2300      	movs	r3, #0
 8002330:	607b      	str	r3, [r7, #4]
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f7fd ff7d 	bl	8000234 <__aeabi_uldivmod>
 800233a:	0002      	movs	r2, r0
 800233c:	000b      	movs	r3, r1
 800233e:	0013      	movs	r3, r2
 8002340:	637b      	str	r3, [r7, #52]	; 0x34
 8002342:	e017      	b.n	8002374 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002346:	0018      	movs	r0, r3
 8002348:	2300      	movs	r3, #0
 800234a:	0019      	movs	r1, r3
 800234c:	4a16      	ldr	r2, [pc, #88]	; (80023a8 <HAL_RCC_GetSysClockFreq+0x140>)
 800234e:	2300      	movs	r3, #0
 8002350:	f7fd ff90 	bl	8000274 <__aeabi_lmul>
 8002354:	0002      	movs	r2, r0
 8002356:	000b      	movs	r3, r1
 8002358:	0010      	movs	r0, r2
 800235a:	0019      	movs	r1, r3
 800235c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800235e:	001c      	movs	r4, r3
 8002360:	2300      	movs	r3, #0
 8002362:	001d      	movs	r5, r3
 8002364:	0022      	movs	r2, r4
 8002366:	002b      	movs	r3, r5
 8002368:	f7fd ff64 	bl	8000234 <__aeabi_uldivmod>
 800236c:	0002      	movs	r2, r0
 800236e:	000b      	movs	r3, r1
 8002370:	0013      	movs	r3, r2
 8002372:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 8002374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002376:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002378:	e00d      	b.n	8002396 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_GetSysClockFreq+0x138>)
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	0b5b      	lsrs	r3, r3, #13
 8002380:	2207      	movs	r2, #7
 8002382:	4013      	ands	r3, r2
 8002384:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002386:	6a3b      	ldr	r3, [r7, #32]
 8002388:	3301      	adds	r3, #1
 800238a:	2280      	movs	r2, #128	; 0x80
 800238c:	0212      	lsls	r2, r2, #8
 800238e:	409a      	lsls	r2, r3
 8002390:	0013      	movs	r3, r2
 8002392:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002394:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002398:	0018      	movs	r0, r3
 800239a:	46bd      	mov	sp, r7
 800239c:	b00e      	add	sp, #56	; 0x38
 800239e:	bdb0      	pop	{r4, r5, r7, pc}
 80023a0:	40021000 	.word	0x40021000
 80023a4:	003d0900 	.word	0x003d0900
 80023a8:	00f42400 	.word	0x00f42400
 80023ac:	007a1200 	.word	0x007a1200
 80023b0:	08003b50 	.word	0x08003b50

080023b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023b8:	4b02      	ldr	r3, [pc, #8]	; (80023c4 <HAL_RCC_GetHCLKFreq+0x10>)
 80023ba:	681b      	ldr	r3, [r3, #0]
}
 80023bc:	0018      	movs	r0, r3
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
 80023c2:	46c0      	nop			; (mov r8, r8)
 80023c4:	20000000 	.word	0x20000000

080023c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023cc:	f7ff fff2 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023d0:	0001      	movs	r1, r0
 80023d2:	4b06      	ldr	r3, [pc, #24]	; (80023ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80023d4:	68db      	ldr	r3, [r3, #12]
 80023d6:	0a1b      	lsrs	r3, r3, #8
 80023d8:	2207      	movs	r2, #7
 80023da:	4013      	ands	r3, r2
 80023dc:	4a04      	ldr	r2, [pc, #16]	; (80023f0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023de:	5cd3      	ldrb	r3, [r2, r3]
 80023e0:	40d9      	lsrs	r1, r3
 80023e2:	000b      	movs	r3, r1
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	46c0      	nop			; (mov r8, r8)
 80023ec:	40021000 	.word	0x40021000
 80023f0:	08003b48 	.word	0x08003b48

080023f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023f8:	f7ff ffdc 	bl	80023b4 <HAL_RCC_GetHCLKFreq>
 80023fc:	0001      	movs	r1, r0
 80023fe:	4b06      	ldr	r3, [pc, #24]	; (8002418 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002400:	68db      	ldr	r3, [r3, #12]
 8002402:	0adb      	lsrs	r3, r3, #11
 8002404:	2207      	movs	r2, #7
 8002406:	4013      	ands	r3, r2
 8002408:	4a04      	ldr	r2, [pc, #16]	; (800241c <HAL_RCC_GetPCLK2Freq+0x28>)
 800240a:	5cd3      	ldrb	r3, [r2, r3]
 800240c:	40d9      	lsrs	r1, r3
 800240e:	000b      	movs	r3, r1
}
 8002410:	0018      	movs	r0, r3
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	46c0      	nop			; (mov r8, r8)
 8002418:	40021000 	.word	0x40021000
 800241c:	08003b48 	.word	0x08003b48

08002420 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8002428:	2017      	movs	r0, #23
 800242a:	183b      	adds	r3, r7, r0
 800242c:	2200      	movs	r2, #0
 800242e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2220      	movs	r2, #32
 8002436:	4013      	ands	r3, r2
 8002438:	d100      	bne.n	800243c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 800243a:	e0c7      	b.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800243c:	4b8b      	ldr	r3, [pc, #556]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800243e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	055b      	lsls	r3, r3, #21
 8002444:	4013      	ands	r3, r2
 8002446:	d109      	bne.n	800245c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002448:	4b88      	ldr	r3, [pc, #544]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800244a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800244c:	4b87      	ldr	r3, [pc, #540]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800244e:	2180      	movs	r1, #128	; 0x80
 8002450:	0549      	lsls	r1, r1, #21
 8002452:	430a      	orrs	r2, r1
 8002454:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8002456:	183b      	adds	r3, r7, r0
 8002458:	2201      	movs	r2, #1
 800245a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800245c:	4b84      	ldr	r3, [pc, #528]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800245e:	681a      	ldr	r2, [r3, #0]
 8002460:	2380      	movs	r3, #128	; 0x80
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4013      	ands	r3, r2
 8002466:	d11a      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002468:	4b81      	ldr	r3, [pc, #516]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	4b80      	ldr	r3, [pc, #512]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 800246e:	2180      	movs	r1, #128	; 0x80
 8002470:	0049      	lsls	r1, r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002476:	f7fe fcbb 	bl	8000df0 <HAL_GetTick>
 800247a:	0003      	movs	r3, r0
 800247c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800247e:	e008      	b.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002480:	f7fe fcb6 	bl	8000df0 <HAL_GetTick>
 8002484:	0002      	movs	r2, r0
 8002486:	693b      	ldr	r3, [r7, #16]
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	2b64      	cmp	r3, #100	; 0x64
 800248c:	d901      	bls.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 800248e:	2303      	movs	r3, #3
 8002490:	e0e8      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x244>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002492:	4b77      	ldr	r3, [pc, #476]	; (8002670 <HAL_RCCEx_PeriphCLKConfig+0x250>)
 8002494:	681a      	ldr	r2, [r3, #0]
 8002496:	2380      	movs	r3, #128	; 0x80
 8002498:	005b      	lsls	r3, r3, #1
 800249a:	4013      	ands	r3, r2
 800249c:	d0f0      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 800249e:	4b73      	ldr	r3, [pc, #460]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	23c0      	movs	r3, #192	; 0xc0
 80024a4:	039b      	lsls	r3, r3, #14
 80024a6:	4013      	ands	r3, r2
 80024a8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	23c0      	movs	r3, #192	; 0xc0
 80024b0:	039b      	lsls	r3, r3, #14
 80024b2:	4013      	ands	r3, r2
 80024b4:	68fa      	ldr	r2, [r7, #12]
 80024b6:	429a      	cmp	r2, r3
 80024b8:	d013      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685a      	ldr	r2, [r3, #4]
 80024be:	23c0      	movs	r3, #192	; 0xc0
 80024c0:	029b      	lsls	r3, r3, #10
 80024c2:	401a      	ands	r2, r3
 80024c4:	23c0      	movs	r3, #192	; 0xc0
 80024c6:	029b      	lsls	r3, r3, #10
 80024c8:	429a      	cmp	r2, r3
 80024ca:	d10a      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80024cc:	4b67      	ldr	r3, [pc, #412]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024ce:	681a      	ldr	r2, [r3, #0]
 80024d0:	2380      	movs	r3, #128	; 0x80
 80024d2:	029b      	lsls	r3, r3, #10
 80024d4:	401a      	ands	r2, r3
 80024d6:	2380      	movs	r3, #128	; 0x80
 80024d8:	029b      	lsls	r3, r3, #10
 80024da:	429a      	cmp	r2, r3
 80024dc:	d101      	bne.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e0c0      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x244>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 80024e2:	4b62      	ldr	r3, [pc, #392]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80024e4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80024e6:	23c0      	movs	r3, #192	; 0xc0
 80024e8:	029b      	lsls	r3, r3, #10
 80024ea:	4013      	ands	r3, r2
 80024ec:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d03b      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685a      	ldr	r2, [r3, #4]
 80024f8:	23c0      	movs	r3, #192	; 0xc0
 80024fa:	029b      	lsls	r3, r3, #10
 80024fc:	4013      	ands	r3, r2
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d033      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	2220      	movs	r2, #32
 800250a:	4013      	ands	r3, r2
 800250c:	d02e      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 800250e:	4b57      	ldr	r3, [pc, #348]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002512:	4a58      	ldr	r2, [pc, #352]	; (8002674 <HAL_RCCEx_PeriphCLKConfig+0x254>)
 8002514:	4013      	ands	r3, r2
 8002516:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002518:	4b54      	ldr	r3, [pc, #336]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800251a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800251c:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800251e:	2180      	movs	r1, #128	; 0x80
 8002520:	0309      	lsls	r1, r1, #12
 8002522:	430a      	orrs	r2, r1
 8002524:	651a      	str	r2, [r3, #80]	; 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002526:	4b51      	ldr	r3, [pc, #324]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002528:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800252a:	4b50      	ldr	r3, [pc, #320]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800252c:	4952      	ldr	r1, [pc, #328]	; (8002678 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800252e:	400a      	ands	r2, r1
 8002530:	651a      	str	r2, [r3, #80]	; 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8002532:	4b4e      	ldr	r3, [pc, #312]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002534:	68fa      	ldr	r2, [r7, #12]
 8002536:	651a      	str	r2, [r3, #80]	; 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8002538:	68fa      	ldr	r2, [r7, #12]
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	4013      	ands	r3, r2
 8002540:	d014      	beq.n	800256c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002542:	f7fe fc55 	bl	8000df0 <HAL_GetTick>
 8002546:	0003      	movs	r3, r0
 8002548:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800254a:	e009      	b.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254c:	f7fe fc50 	bl	8000df0 <HAL_GetTick>
 8002550:	0002      	movs	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	4a49      	ldr	r2, [pc, #292]	; (800267c <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d901      	bls.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 800255c:	2303      	movs	r3, #3
 800255e:	e081      	b.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x244>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002560:	4b42      	ldr	r3, [pc, #264]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002562:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4013      	ands	r3, r2
 800256a:	d0ef      	beq.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2220      	movs	r2, #32
 8002572:	4013      	ands	r3, r2
 8002574:	d01f      	beq.n	80025b6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	23c0      	movs	r3, #192	; 0xc0
 800257c:	029b      	lsls	r3, r3, #10
 800257e:	401a      	ands	r2, r3
 8002580:	23c0      	movs	r3, #192	; 0xc0
 8002582:	029b      	lsls	r3, r3, #10
 8002584:	429a      	cmp	r2, r3
 8002586:	d10c      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 8002588:	4b38      	ldr	r3, [pc, #224]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a3c      	ldr	r2, [pc, #240]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800258e:	4013      	ands	r3, r2
 8002590:	0019      	movs	r1, r3
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	685a      	ldr	r2, [r3, #4]
 8002596:	23c0      	movs	r3, #192	; 0xc0
 8002598:	039b      	lsls	r3, r3, #14
 800259a:	401a      	ands	r2, r3
 800259c:	4b33      	ldr	r3, [pc, #204]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800259e:	430a      	orrs	r2, r1
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	4b32      	ldr	r3, [pc, #200]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025a4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	685a      	ldr	r2, [r3, #4]
 80025aa:	23c0      	movs	r3, #192	; 0xc0
 80025ac:	029b      	lsls	r3, r3, #10
 80025ae:	401a      	ands	r2, r3
 80025b0:	4b2e      	ldr	r3, [pc, #184]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025b2:	430a      	orrs	r2, r1
 80025b4:	651a      	str	r2, [r3, #80]	; 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025b6:	2317      	movs	r3, #23
 80025b8:	18fb      	adds	r3, r7, r3
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d105      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025c0:	4b2a      	ldr	r3, [pc, #168]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80025c4:	4b29      	ldr	r3, [pc, #164]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025c6:	492f      	ldr	r1, [pc, #188]	; (8002684 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80025c8:	400a      	ands	r2, r1
 80025ca:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	2201      	movs	r2, #1
 80025d2:	4013      	ands	r3, r2
 80025d4:	d009      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025d6:	4b25      	ldr	r3, [pc, #148]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025da:	2203      	movs	r2, #3
 80025dc:	4393      	bics	r3, r2
 80025de:	0019      	movs	r1, r3
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	689a      	ldr	r2, [r3, #8]
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025e6:	430a      	orrs	r2, r1
 80025e8:	64da      	str	r2, [r3, #76]	; 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2202      	movs	r2, #2
 80025f0:	4013      	ands	r3, r2
 80025f2:	d009      	beq.n	8002608 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80025f4:	4b1d      	ldr	r3, [pc, #116]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 80025f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025f8:	220c      	movs	r2, #12
 80025fa:	4393      	bics	r3, r2
 80025fc:	0019      	movs	r1, r3
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	68da      	ldr	r2, [r3, #12]
 8002602:	4b1a      	ldr	r3, [pc, #104]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002604:	430a      	orrs	r2, r1
 8002606:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	2204      	movs	r2, #4
 800260e:	4013      	ands	r3, r2
 8002610:	d009      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002612:	4b16      	ldr	r3, [pc, #88]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002614:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002616:	4a1c      	ldr	r2, [pc, #112]	; (8002688 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002618:	4013      	ands	r3, r2
 800261a:	0019      	movs	r1, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	691a      	ldr	r2, [r3, #16]
 8002620:	4b12      	ldr	r3, [pc, #72]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002622:	430a      	orrs	r2, r1
 8002624:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2208      	movs	r2, #8
 800262c:	4013      	ands	r3, r2
 800262e:	d009      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002630:	4b0e      	ldr	r3, [pc, #56]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002634:	4a15      	ldr	r2, [pc, #84]	; (800268c <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695a      	ldr	r2, [r3, #20]
 800263e:	4b0b      	ldr	r3, [pc, #44]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002640:	430a      	orrs	r2, r1
 8002642:	64da      	str	r2, [r3, #76]	; 0x4c
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2280      	movs	r2, #128	; 0x80
 800264a:	4013      	ands	r3, r2
 800264c:	d009      	beq.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x242>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 800264e:	4b07      	ldr	r3, [pc, #28]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 8002650:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002652:	4a0f      	ldr	r2, [pc, #60]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x270>)
 8002654:	4013      	ands	r3, r2
 8002656:	0019      	movs	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	699a      	ldr	r2, [r3, #24]
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <HAL_RCCEx_PeriphCLKConfig+0x24c>)
 800265e:	430a      	orrs	r2, r1
 8002660:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	0018      	movs	r0, r3
 8002666:	46bd      	mov	sp, r7
 8002668:	b006      	add	sp, #24
 800266a:	bd80      	pop	{r7, pc}
 800266c:	40021000 	.word	0x40021000
 8002670:	40007000 	.word	0x40007000
 8002674:	fffcffff 	.word	0xfffcffff
 8002678:	fff7ffff 	.word	0xfff7ffff
 800267c:	00001388 	.word	0x00001388
 8002680:	ffcfffff 	.word	0xffcfffff
 8002684:	efffffff 	.word	0xefffffff
 8002688:	fffff3ff 	.word	0xfffff3ff
 800268c:	ffffcfff 	.word	0xffffcfff
 8002690:	fff3ffff 	.word	0xfff3ffff

08002694 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e044      	b.n	8002730 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d107      	bne.n	80026be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2278      	movs	r2, #120	; 0x78
 80026b2:	2100      	movs	r1, #0
 80026b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	0018      	movs	r0, r3
 80026ba:	f7fe fa6f 	bl	8000b9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2224      	movs	r2, #36	; 0x24
 80026c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2101      	movs	r1, #1
 80026d0:	438a      	bics	r2, r1
 80026d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f8d0 	bl	800287c <UART_SetConfig>
 80026dc:	0003      	movs	r3, r0
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d101      	bne.n	80026e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e024      	b.n	8002730 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d003      	beq.n	80026f6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	0018      	movs	r0, r3
 80026f2:	f000 fb47 	bl	8002d84 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	685a      	ldr	r2, [r3, #4]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	490d      	ldr	r1, [pc, #52]	; (8002738 <HAL_UART_Init+0xa4>)
 8002702:	400a      	ands	r2, r1
 8002704:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	212a      	movs	r1, #42	; 0x2a
 8002712:	438a      	bics	r2, r1
 8002714:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681a      	ldr	r2, [r3, #0]
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	2101      	movs	r1, #1
 8002722:	430a      	orrs	r2, r1
 8002724:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	0018      	movs	r0, r3
 800272a:	f000 fbdf 	bl	8002eec <UART_CheckIdleState>
 800272e:	0003      	movs	r3, r0
}
 8002730:	0018      	movs	r0, r3
 8002732:	46bd      	mov	sp, r7
 8002734:	b002      	add	sp, #8
 8002736:	bd80      	pop	{r7, pc}
 8002738:	ffffb7ff 	.word	0xffffb7ff

0800273c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b08a      	sub	sp, #40	; 0x28
 8002740:	af02      	add	r7, sp, #8
 8002742:	60f8      	str	r0, [r7, #12]
 8002744:	60b9      	str	r1, [r7, #8]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	1dbb      	adds	r3, r7, #6
 800274a:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002750:	2b20      	cmp	r3, #32
 8002752:	d000      	beq.n	8002756 <HAL_UART_Transmit+0x1a>
 8002754:	e08c      	b.n	8002870 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d003      	beq.n	8002764 <HAL_UART_Transmit+0x28>
 800275c:	1dbb      	adds	r3, r7, #6
 800275e:	881b      	ldrh	r3, [r3, #0]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d101      	bne.n	8002768 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e084      	b.n	8002872 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	689a      	ldr	r2, [r3, #8]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	015b      	lsls	r3, r3, #5
 8002770:	429a      	cmp	r2, r3
 8002772:	d109      	bne.n	8002788 <HAL_UART_Transmit+0x4c>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691b      	ldr	r3, [r3, #16]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d105      	bne.n	8002788 <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800277c:	68bb      	ldr	r3, [r7, #8]
 800277e:	2201      	movs	r2, #1
 8002780:	4013      	ands	r3, r2
 8002782:	d001      	beq.n	8002788 <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 8002784:	2301      	movs	r3, #1
 8002786:	e074      	b.n	8002872 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	2284      	movs	r2, #132	; 0x84
 800278c:	2100      	movs	r1, #0
 800278e:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	2221      	movs	r2, #33	; 0x21
 8002794:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002796:	f7fe fb2b 	bl	8000df0 <HAL_GetTick>
 800279a:	0003      	movs	r3, r0
 800279c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	1dba      	adds	r2, r7, #6
 80027a2:	2150      	movs	r1, #80	; 0x50
 80027a4:	8812      	ldrh	r2, [r2, #0]
 80027a6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1dba      	adds	r2, r7, #6
 80027ac:	2152      	movs	r1, #82	; 0x52
 80027ae:	8812      	ldrh	r2, [r2, #0]
 80027b0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	689a      	ldr	r2, [r3, #8]
 80027b6:	2380      	movs	r3, #128	; 0x80
 80027b8:	015b      	lsls	r3, r3, #5
 80027ba:	429a      	cmp	r2, r3
 80027bc:	d108      	bne.n	80027d0 <HAL_UART_Transmit+0x94>
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	691b      	ldr	r3, [r3, #16]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d104      	bne.n	80027d0 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	61bb      	str	r3, [r7, #24]
 80027ce:	e003      	b.n	80027d8 <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80027d0:	68bb      	ldr	r3, [r7, #8]
 80027d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80027d4:	2300      	movs	r3, #0
 80027d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80027d8:	e02f      	b.n	800283a <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	68f8      	ldr	r0, [r7, #12]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	9300      	str	r3, [sp, #0]
 80027e2:	0013      	movs	r3, r2
 80027e4:	2200      	movs	r2, #0
 80027e6:	2180      	movs	r1, #128	; 0x80
 80027e8:	f000 fc28 	bl	800303c <UART_WaitOnFlagUntilTimeout>
 80027ec:	1e03      	subs	r3, r0, #0
 80027ee:	d004      	beq.n	80027fa <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 80027f6:	2303      	movs	r3, #3
 80027f8:	e03b      	b.n	8002872 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d10b      	bne.n	8002818 <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002800:	69bb      	ldr	r3, [r7, #24]
 8002802:	881b      	ldrh	r3, [r3, #0]
 8002804:	001a      	movs	r2, r3
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	05d2      	lsls	r2, r2, #23
 800280c:	0dd2      	lsrs	r2, r2, #23
 800280e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	3302      	adds	r3, #2
 8002814:	61bb      	str	r3, [r7, #24]
 8002816:	e007      	b.n	8002828 <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	781a      	ldrb	r2, [r3, #0]
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002822:	69fb      	ldr	r3, [r7, #28]
 8002824:	3301      	adds	r3, #1
 8002826:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2252      	movs	r2, #82	; 0x52
 800282c:	5a9b      	ldrh	r3, [r3, r2]
 800282e:	b29b      	uxth	r3, r3
 8002830:	3b01      	subs	r3, #1
 8002832:	b299      	uxth	r1, r3
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2252      	movs	r2, #82	; 0x52
 8002838:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2252      	movs	r2, #82	; 0x52
 800283e:	5a9b      	ldrh	r3, [r3, r2]
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1c9      	bne.n	80027da <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002846:	697a      	ldr	r2, [r7, #20]
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	683b      	ldr	r3, [r7, #0]
 800284c:	9300      	str	r3, [sp, #0]
 800284e:	0013      	movs	r3, r2
 8002850:	2200      	movs	r2, #0
 8002852:	2140      	movs	r1, #64	; 0x40
 8002854:	f000 fbf2 	bl	800303c <UART_WaitOnFlagUntilTimeout>
 8002858:	1e03      	subs	r3, r0, #0
 800285a:	d004      	beq.n	8002866 <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2220      	movs	r2, #32
 8002860:	67da      	str	r2, [r3, #124]	; 0x7c

      return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e005      	b.n	8002872 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	2220      	movs	r2, #32
 800286a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	e000      	b.n	8002872 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8002870:	2302      	movs	r3, #2
  }
}
 8002872:	0018      	movs	r0, r3
 8002874:	46bd      	mov	sp, r7
 8002876:	b008      	add	sp, #32
 8002878:	bd80      	pop	{r7, pc}
	...

0800287c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800287c:	b5b0      	push	{r4, r5, r7, lr}
 800287e:	b08e      	sub	sp, #56	; 0x38
 8002880:	af00      	add	r7, sp, #0
 8002882:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002884:	231a      	movs	r3, #26
 8002886:	2218      	movs	r2, #24
 8002888:	189b      	adds	r3, r3, r2
 800288a:	19db      	adds	r3, r3, r7
 800288c:	2200      	movs	r2, #0
 800288e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002890:	69fb      	ldr	r3, [r7, #28]
 8002892:	689a      	ldr	r2, [r3, #8]
 8002894:	69fb      	ldr	r3, [r7, #28]
 8002896:	691b      	ldr	r3, [r3, #16]
 8002898:	431a      	orrs	r2, r3
 800289a:	69fb      	ldr	r3, [r7, #28]
 800289c:	695b      	ldr	r3, [r3, #20]
 800289e:	431a      	orrs	r2, r3
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	69db      	ldr	r3, [r3, #28]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4ac6      	ldr	r2, [pc, #792]	; (8002bc8 <UART_SetConfig+0x34c>)
 80028b0:	4013      	ands	r3, r2
 80028b2:	0019      	movs	r1, r3
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ba:	430a      	orrs	r2, r1
 80028bc:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	4ac1      	ldr	r2, [pc, #772]	; (8002bcc <UART_SetConfig+0x350>)
 80028c6:	4013      	ands	r3, r2
 80028c8:	0019      	movs	r1, r3
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	430a      	orrs	r2, r1
 80028d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028d6:	69fb      	ldr	r3, [r7, #28]
 80028d8:	699b      	ldr	r3, [r3, #24]
 80028da:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4abb      	ldr	r2, [pc, #748]	; (8002bd0 <UART_SetConfig+0x354>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d004      	beq.n	80028f0 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028e6:	69fb      	ldr	r3, [r7, #28]
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80028ec:	4313      	orrs	r3, r2
 80028ee:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028f0:	69fb      	ldr	r3, [r7, #28]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	4ab7      	ldr	r2, [pc, #732]	; (8002bd4 <UART_SetConfig+0x358>)
 80028f8:	4013      	ands	r3, r2
 80028fa:	0019      	movs	r1, r3
 80028fc:	69fb      	ldr	r3, [r7, #28]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002902:	430a      	orrs	r2, r1
 8002904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	4ab3      	ldr	r2, [pc, #716]	; (8002bd8 <UART_SetConfig+0x35c>)
 800290c:	4293      	cmp	r3, r2
 800290e:	d131      	bne.n	8002974 <UART_SetConfig+0xf8>
 8002910:	4bb2      	ldr	r3, [pc, #712]	; (8002bdc <UART_SetConfig+0x360>)
 8002912:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002914:	2203      	movs	r2, #3
 8002916:	4013      	ands	r3, r2
 8002918:	2b03      	cmp	r3, #3
 800291a:	d01d      	beq.n	8002958 <UART_SetConfig+0xdc>
 800291c:	d823      	bhi.n	8002966 <UART_SetConfig+0xea>
 800291e:	2b02      	cmp	r3, #2
 8002920:	d00c      	beq.n	800293c <UART_SetConfig+0xc0>
 8002922:	d820      	bhi.n	8002966 <UART_SetConfig+0xea>
 8002924:	2b00      	cmp	r3, #0
 8002926:	d002      	beq.n	800292e <UART_SetConfig+0xb2>
 8002928:	2b01      	cmp	r3, #1
 800292a:	d00e      	beq.n	800294a <UART_SetConfig+0xce>
 800292c:	e01b      	b.n	8002966 <UART_SetConfig+0xea>
 800292e:	231b      	movs	r3, #27
 8002930:	2218      	movs	r2, #24
 8002932:	189b      	adds	r3, r3, r2
 8002934:	19db      	adds	r3, r3, r7
 8002936:	2201      	movs	r2, #1
 8002938:	701a      	strb	r2, [r3, #0]
 800293a:	e09c      	b.n	8002a76 <UART_SetConfig+0x1fa>
 800293c:	231b      	movs	r3, #27
 800293e:	2218      	movs	r2, #24
 8002940:	189b      	adds	r3, r3, r2
 8002942:	19db      	adds	r3, r3, r7
 8002944:	2202      	movs	r2, #2
 8002946:	701a      	strb	r2, [r3, #0]
 8002948:	e095      	b.n	8002a76 <UART_SetConfig+0x1fa>
 800294a:	231b      	movs	r3, #27
 800294c:	2218      	movs	r2, #24
 800294e:	189b      	adds	r3, r3, r2
 8002950:	19db      	adds	r3, r3, r7
 8002952:	2204      	movs	r2, #4
 8002954:	701a      	strb	r2, [r3, #0]
 8002956:	e08e      	b.n	8002a76 <UART_SetConfig+0x1fa>
 8002958:	231b      	movs	r3, #27
 800295a:	2218      	movs	r2, #24
 800295c:	189b      	adds	r3, r3, r2
 800295e:	19db      	adds	r3, r3, r7
 8002960:	2208      	movs	r2, #8
 8002962:	701a      	strb	r2, [r3, #0]
 8002964:	e087      	b.n	8002a76 <UART_SetConfig+0x1fa>
 8002966:	231b      	movs	r3, #27
 8002968:	2218      	movs	r2, #24
 800296a:	189b      	adds	r3, r3, r2
 800296c:	19db      	adds	r3, r3, r7
 800296e:	2210      	movs	r2, #16
 8002970:	701a      	strb	r2, [r3, #0]
 8002972:	e080      	b.n	8002a76 <UART_SetConfig+0x1fa>
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a99      	ldr	r2, [pc, #612]	; (8002be0 <UART_SetConfig+0x364>)
 800297a:	4293      	cmp	r3, r2
 800297c:	d131      	bne.n	80029e2 <UART_SetConfig+0x166>
 800297e:	4b97      	ldr	r3, [pc, #604]	; (8002bdc <UART_SetConfig+0x360>)
 8002980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002982:	220c      	movs	r2, #12
 8002984:	4013      	ands	r3, r2
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d01d      	beq.n	80029c6 <UART_SetConfig+0x14a>
 800298a:	d823      	bhi.n	80029d4 <UART_SetConfig+0x158>
 800298c:	2b08      	cmp	r3, #8
 800298e:	d00c      	beq.n	80029aa <UART_SetConfig+0x12e>
 8002990:	d820      	bhi.n	80029d4 <UART_SetConfig+0x158>
 8002992:	2b00      	cmp	r3, #0
 8002994:	d002      	beq.n	800299c <UART_SetConfig+0x120>
 8002996:	2b04      	cmp	r3, #4
 8002998:	d00e      	beq.n	80029b8 <UART_SetConfig+0x13c>
 800299a:	e01b      	b.n	80029d4 <UART_SetConfig+0x158>
 800299c:	231b      	movs	r3, #27
 800299e:	2218      	movs	r2, #24
 80029a0:	189b      	adds	r3, r3, r2
 80029a2:	19db      	adds	r3, r3, r7
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
 80029a8:	e065      	b.n	8002a76 <UART_SetConfig+0x1fa>
 80029aa:	231b      	movs	r3, #27
 80029ac:	2218      	movs	r2, #24
 80029ae:	189b      	adds	r3, r3, r2
 80029b0:	19db      	adds	r3, r3, r7
 80029b2:	2202      	movs	r2, #2
 80029b4:	701a      	strb	r2, [r3, #0]
 80029b6:	e05e      	b.n	8002a76 <UART_SetConfig+0x1fa>
 80029b8:	231b      	movs	r3, #27
 80029ba:	2218      	movs	r2, #24
 80029bc:	189b      	adds	r3, r3, r2
 80029be:	19db      	adds	r3, r3, r7
 80029c0:	2204      	movs	r2, #4
 80029c2:	701a      	strb	r2, [r3, #0]
 80029c4:	e057      	b.n	8002a76 <UART_SetConfig+0x1fa>
 80029c6:	231b      	movs	r3, #27
 80029c8:	2218      	movs	r2, #24
 80029ca:	189b      	adds	r3, r3, r2
 80029cc:	19db      	adds	r3, r3, r7
 80029ce:	2208      	movs	r2, #8
 80029d0:	701a      	strb	r2, [r3, #0]
 80029d2:	e050      	b.n	8002a76 <UART_SetConfig+0x1fa>
 80029d4:	231b      	movs	r3, #27
 80029d6:	2218      	movs	r2, #24
 80029d8:	189b      	adds	r3, r3, r2
 80029da:	19db      	adds	r3, r3, r7
 80029dc:	2210      	movs	r2, #16
 80029de:	701a      	strb	r2, [r3, #0]
 80029e0:	e049      	b.n	8002a76 <UART_SetConfig+0x1fa>
 80029e2:	69fb      	ldr	r3, [r7, #28]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a7a      	ldr	r2, [pc, #488]	; (8002bd0 <UART_SetConfig+0x354>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d13e      	bne.n	8002a6a <UART_SetConfig+0x1ee>
 80029ec:	4b7b      	ldr	r3, [pc, #492]	; (8002bdc <UART_SetConfig+0x360>)
 80029ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80029f0:	23c0      	movs	r3, #192	; 0xc0
 80029f2:	011b      	lsls	r3, r3, #4
 80029f4:	4013      	ands	r3, r2
 80029f6:	22c0      	movs	r2, #192	; 0xc0
 80029f8:	0112      	lsls	r2, r2, #4
 80029fa:	4293      	cmp	r3, r2
 80029fc:	d027      	beq.n	8002a4e <UART_SetConfig+0x1d2>
 80029fe:	22c0      	movs	r2, #192	; 0xc0
 8002a00:	0112      	lsls	r2, r2, #4
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d82a      	bhi.n	8002a5c <UART_SetConfig+0x1e0>
 8002a06:	2280      	movs	r2, #128	; 0x80
 8002a08:	0112      	lsls	r2, r2, #4
 8002a0a:	4293      	cmp	r3, r2
 8002a0c:	d011      	beq.n	8002a32 <UART_SetConfig+0x1b6>
 8002a0e:	2280      	movs	r2, #128	; 0x80
 8002a10:	0112      	lsls	r2, r2, #4
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d822      	bhi.n	8002a5c <UART_SetConfig+0x1e0>
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d004      	beq.n	8002a24 <UART_SetConfig+0x1a8>
 8002a1a:	2280      	movs	r2, #128	; 0x80
 8002a1c:	00d2      	lsls	r2, r2, #3
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d00e      	beq.n	8002a40 <UART_SetConfig+0x1c4>
 8002a22:	e01b      	b.n	8002a5c <UART_SetConfig+0x1e0>
 8002a24:	231b      	movs	r3, #27
 8002a26:	2218      	movs	r2, #24
 8002a28:	189b      	adds	r3, r3, r2
 8002a2a:	19db      	adds	r3, r3, r7
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	701a      	strb	r2, [r3, #0]
 8002a30:	e021      	b.n	8002a76 <UART_SetConfig+0x1fa>
 8002a32:	231b      	movs	r3, #27
 8002a34:	2218      	movs	r2, #24
 8002a36:	189b      	adds	r3, r3, r2
 8002a38:	19db      	adds	r3, r3, r7
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e01a      	b.n	8002a76 <UART_SetConfig+0x1fa>
 8002a40:	231b      	movs	r3, #27
 8002a42:	2218      	movs	r2, #24
 8002a44:	189b      	adds	r3, r3, r2
 8002a46:	19db      	adds	r3, r3, r7
 8002a48:	2204      	movs	r2, #4
 8002a4a:	701a      	strb	r2, [r3, #0]
 8002a4c:	e013      	b.n	8002a76 <UART_SetConfig+0x1fa>
 8002a4e:	231b      	movs	r3, #27
 8002a50:	2218      	movs	r2, #24
 8002a52:	189b      	adds	r3, r3, r2
 8002a54:	19db      	adds	r3, r3, r7
 8002a56:	2208      	movs	r2, #8
 8002a58:	701a      	strb	r2, [r3, #0]
 8002a5a:	e00c      	b.n	8002a76 <UART_SetConfig+0x1fa>
 8002a5c:	231b      	movs	r3, #27
 8002a5e:	2218      	movs	r2, #24
 8002a60:	189b      	adds	r3, r3, r2
 8002a62:	19db      	adds	r3, r3, r7
 8002a64:	2210      	movs	r2, #16
 8002a66:	701a      	strb	r2, [r3, #0]
 8002a68:	e005      	b.n	8002a76 <UART_SetConfig+0x1fa>
 8002a6a:	231b      	movs	r3, #27
 8002a6c:	2218      	movs	r2, #24
 8002a6e:	189b      	adds	r3, r3, r2
 8002a70:	19db      	adds	r3, r3, r7
 8002a72:	2210      	movs	r2, #16
 8002a74:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a55      	ldr	r2, [pc, #340]	; (8002bd0 <UART_SetConfig+0x354>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d000      	beq.n	8002a82 <UART_SetConfig+0x206>
 8002a80:	e084      	b.n	8002b8c <UART_SetConfig+0x310>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a82:	231b      	movs	r3, #27
 8002a84:	2218      	movs	r2, #24
 8002a86:	189b      	adds	r3, r3, r2
 8002a88:	19db      	adds	r3, r3, r7
 8002a8a:	781b      	ldrb	r3, [r3, #0]
 8002a8c:	2b08      	cmp	r3, #8
 8002a8e:	d01d      	beq.n	8002acc <UART_SetConfig+0x250>
 8002a90:	dc20      	bgt.n	8002ad4 <UART_SetConfig+0x258>
 8002a92:	2b04      	cmp	r3, #4
 8002a94:	d015      	beq.n	8002ac2 <UART_SetConfig+0x246>
 8002a96:	dc1d      	bgt.n	8002ad4 <UART_SetConfig+0x258>
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d002      	beq.n	8002aa2 <UART_SetConfig+0x226>
 8002a9c:	2b02      	cmp	r3, #2
 8002a9e:	d005      	beq.n	8002aac <UART_SetConfig+0x230>
 8002aa0:	e018      	b.n	8002ad4 <UART_SetConfig+0x258>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002aa2:	f7ff fc91 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8002aa6:	0003      	movs	r3, r0
 8002aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aaa:	e01c      	b.n	8002ae6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002aac:	4b4b      	ldr	r3, [pc, #300]	; (8002bdc <UART_SetConfig+0x360>)
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2210      	movs	r2, #16
 8002ab2:	4013      	ands	r3, r2
 8002ab4:	d002      	beq.n	8002abc <UART_SetConfig+0x240>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002ab6:	4b4b      	ldr	r3, [pc, #300]	; (8002be4 <UART_SetConfig+0x368>)
 8002ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002aba:	e014      	b.n	8002ae6 <UART_SetConfig+0x26a>
          pclk = (uint32_t) HSI_VALUE;
 8002abc:	4b4a      	ldr	r3, [pc, #296]	; (8002be8 <UART_SetConfig+0x36c>)
 8002abe:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ac0:	e011      	b.n	8002ae6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ac2:	f7ff fbd1 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002ac6:	0003      	movs	r3, r0
 8002ac8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002aca:	e00c      	b.n	8002ae6 <UART_SetConfig+0x26a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002acc:	2380      	movs	r3, #128	; 0x80
 8002ace:	021b      	lsls	r3, r3, #8
 8002ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ad2:	e008      	b.n	8002ae6 <UART_SetConfig+0x26a>
      default:
        pclk = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002ad8:	231a      	movs	r3, #26
 8002ada:	2218      	movs	r2, #24
 8002adc:	189b      	adds	r3, r3, r2
 8002ade:	19db      	adds	r3, r3, r7
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	701a      	strb	r2, [r3, #0]
        break;
 8002ae4:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d100      	bne.n	8002aee <UART_SetConfig+0x272>
 8002aec:	e132      	b.n	8002d54 <UART_SetConfig+0x4d8>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	685a      	ldr	r2, [r3, #4]
 8002af2:	0013      	movs	r3, r2
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	189b      	adds	r3, r3, r2
 8002af8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002afa:	429a      	cmp	r2, r3
 8002afc:	d305      	bcc.n	8002b0a <UART_SetConfig+0x28e>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002afe:	69fb      	ldr	r3, [r7, #28]
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002b04:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d906      	bls.n	8002b18 <UART_SetConfig+0x29c>
      {
        ret = HAL_ERROR;
 8002b0a:	231a      	movs	r3, #26
 8002b0c:	2218      	movs	r2, #24
 8002b0e:	189b      	adds	r3, r3, r2
 8002b10:	19db      	adds	r3, r3, r7
 8002b12:	2201      	movs	r2, #1
 8002b14:	701a      	strb	r2, [r3, #0]
 8002b16:	e11d      	b.n	8002d54 <UART_SetConfig+0x4d8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002b18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b1a:	613b      	str	r3, [r7, #16]
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	617b      	str	r3, [r7, #20]
 8002b20:	6939      	ldr	r1, [r7, #16]
 8002b22:	697a      	ldr	r2, [r7, #20]
 8002b24:	000b      	movs	r3, r1
 8002b26:	0e1b      	lsrs	r3, r3, #24
 8002b28:	0010      	movs	r0, r2
 8002b2a:	0205      	lsls	r5, r0, #8
 8002b2c:	431d      	orrs	r5, r3
 8002b2e:	000b      	movs	r3, r1
 8002b30:	021c      	lsls	r4, r3, #8
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	085b      	lsrs	r3, r3, #1
 8002b38:	60bb      	str	r3, [r7, #8]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	60fb      	str	r3, [r7, #12]
 8002b3e:	68b8      	ldr	r0, [r7, #8]
 8002b40:	68f9      	ldr	r1, [r7, #12]
 8002b42:	1900      	adds	r0, r0, r4
 8002b44:	4169      	adcs	r1, r5
 8002b46:	69fb      	ldr	r3, [r7, #28]
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	603b      	str	r3, [r7, #0]
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	607b      	str	r3, [r7, #4]
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	f7fd fb6e 	bl	8000234 <__aeabi_uldivmod>
 8002b58:	0002      	movs	r2, r0
 8002b5a:	000b      	movs	r3, r1
 8002b5c:	0013      	movs	r3, r2
 8002b5e:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002b60:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b62:	23c0      	movs	r3, #192	; 0xc0
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	429a      	cmp	r2, r3
 8002b68:	d309      	bcc.n	8002b7e <UART_SetConfig+0x302>
 8002b6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b6c:	2380      	movs	r3, #128	; 0x80
 8002b6e:	035b      	lsls	r3, r3, #13
 8002b70:	429a      	cmp	r2, r3
 8002b72:	d204      	bcs.n	8002b7e <UART_SetConfig+0x302>
        {
          huart->Instance->BRR = usartdiv;
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002b7a:	60da      	str	r2, [r3, #12]
 8002b7c:	e0ea      	b.n	8002d54 <UART_SetConfig+0x4d8>
        }
        else
        {
          ret = HAL_ERROR;
 8002b7e:	231a      	movs	r3, #26
 8002b80:	2218      	movs	r2, #24
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	19db      	adds	r3, r3, r7
 8002b86:	2201      	movs	r2, #1
 8002b88:	701a      	strb	r2, [r3, #0]
 8002b8a:	e0e3      	b.n	8002d54 <UART_SetConfig+0x4d8>
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	69da      	ldr	r2, [r3, #28]
 8002b90:	2380      	movs	r3, #128	; 0x80
 8002b92:	021b      	lsls	r3, r3, #8
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d000      	beq.n	8002b9a <UART_SetConfig+0x31e>
 8002b98:	e085      	b.n	8002ca6 <UART_SetConfig+0x42a>
  {
    switch (clocksource)
 8002b9a:	231b      	movs	r3, #27
 8002b9c:	2218      	movs	r2, #24
 8002b9e:	189b      	adds	r3, r3, r2
 8002ba0:	19db      	adds	r3, r3, r7
 8002ba2:	781b      	ldrb	r3, [r3, #0]
 8002ba4:	2b08      	cmp	r3, #8
 8002ba6:	d837      	bhi.n	8002c18 <UART_SetConfig+0x39c>
 8002ba8:	009a      	lsls	r2, r3, #2
 8002baa:	4b10      	ldr	r3, [pc, #64]	; (8002bec <UART_SetConfig+0x370>)
 8002bac:	18d3      	adds	r3, r2, r3
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002bb2:	f7ff fc09 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8002bb6:	0003      	movs	r3, r0
 8002bb8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bba:	e036      	b.n	8002c2a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002bbc:	f7ff fc1a 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8002bc0:	0003      	movs	r3, r0
 8002bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002bc4:	e031      	b.n	8002c2a <UART_SetConfig+0x3ae>
 8002bc6:	46c0      	nop			; (mov r8, r8)
 8002bc8:	efff69f3 	.word	0xefff69f3
 8002bcc:	ffffcfff 	.word	0xffffcfff
 8002bd0:	40004800 	.word	0x40004800
 8002bd4:	fffff4ff 	.word	0xfffff4ff
 8002bd8:	40013800 	.word	0x40013800
 8002bdc:	40021000 	.word	0x40021000
 8002be0:	40004400 	.word	0x40004400
 8002be4:	003d0900 	.word	0x003d0900
 8002be8:	00f42400 	.word	0x00f42400
 8002bec:	08003b5c 	.word	0x08003b5c
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002bf0:	4b60      	ldr	r3, [pc, #384]	; (8002d74 <UART_SetConfig+0x4f8>)
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	2210      	movs	r2, #16
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	d002      	beq.n	8002c00 <UART_SetConfig+0x384>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002bfa:	4b5f      	ldr	r3, [pc, #380]	; (8002d78 <UART_SetConfig+0x4fc>)
 8002bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002bfe:	e014      	b.n	8002c2a <UART_SetConfig+0x3ae>
          pclk = (uint32_t) HSI_VALUE;
 8002c00:	4b5e      	ldr	r3, [pc, #376]	; (8002d7c <UART_SetConfig+0x500>)
 8002c02:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c04:	e011      	b.n	8002c2a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c06:	f7ff fb2f 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002c0a:	0003      	movs	r3, r0
 8002c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c0e:	e00c      	b.n	8002c2a <UART_SetConfig+0x3ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c10:	2380      	movs	r3, #128	; 0x80
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002c16:	e008      	b.n	8002c2a <UART_SetConfig+0x3ae>
      default:
        pclk = 0U;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002c1c:	231a      	movs	r3, #26
 8002c1e:	2218      	movs	r2, #24
 8002c20:	189b      	adds	r3, r3, r2
 8002c22:	19db      	adds	r3, r3, r7
 8002c24:	2201      	movs	r2, #1
 8002c26:	701a      	strb	r2, [r3, #0]
        break;
 8002c28:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002c2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d100      	bne.n	8002c32 <UART_SetConfig+0x3b6>
 8002c30:	e090      	b.n	8002d54 <UART_SetConfig+0x4d8>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	005a      	lsls	r2, r3, #1
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	18d2      	adds	r2, r2, r3
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	0019      	movs	r1, r3
 8002c44:	0010      	movs	r0, r2
 8002c46:	f7fd fa69 	bl	800011c <__udivsi3>
 8002c4a:	0003      	movs	r3, r0
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c50:	2b0f      	cmp	r3, #15
 8002c52:	d921      	bls.n	8002c98 <UART_SetConfig+0x41c>
 8002c54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c56:	2380      	movs	r3, #128	; 0x80
 8002c58:	025b      	lsls	r3, r3, #9
 8002c5a:	429a      	cmp	r2, r3
 8002c5c:	d21c      	bcs.n	8002c98 <UART_SetConfig+0x41c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	200e      	movs	r0, #14
 8002c64:	2418      	movs	r4, #24
 8002c66:	1903      	adds	r3, r0, r4
 8002c68:	19db      	adds	r3, r3, r7
 8002c6a:	210f      	movs	r1, #15
 8002c6c:	438a      	bics	r2, r1
 8002c6e:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	085b      	lsrs	r3, r3, #1
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	2207      	movs	r2, #7
 8002c78:	4013      	ands	r3, r2
 8002c7a:	b299      	uxth	r1, r3
 8002c7c:	1903      	adds	r3, r0, r4
 8002c7e:	19db      	adds	r3, r3, r7
 8002c80:	1902      	adds	r2, r0, r4
 8002c82:	19d2      	adds	r2, r2, r7
 8002c84:	8812      	ldrh	r2, [r2, #0]
 8002c86:	430a      	orrs	r2, r1
 8002c88:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8002c8a:	69fb      	ldr	r3, [r7, #28]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	1902      	adds	r2, r0, r4
 8002c90:	19d2      	adds	r2, r2, r7
 8002c92:	8812      	ldrh	r2, [r2, #0]
 8002c94:	60da      	str	r2, [r3, #12]
 8002c96:	e05d      	b.n	8002d54 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002c98:	231a      	movs	r3, #26
 8002c9a:	2218      	movs	r2, #24
 8002c9c:	189b      	adds	r3, r3, r2
 8002c9e:	19db      	adds	r3, r3, r7
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	701a      	strb	r2, [r3, #0]
 8002ca4:	e056      	b.n	8002d54 <UART_SetConfig+0x4d8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002ca6:	231b      	movs	r3, #27
 8002ca8:	2218      	movs	r2, #24
 8002caa:	189b      	adds	r3, r3, r2
 8002cac:	19db      	adds	r3, r3, r7
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b08      	cmp	r3, #8
 8002cb2:	d822      	bhi.n	8002cfa <UART_SetConfig+0x47e>
 8002cb4:	009a      	lsls	r2, r3, #2
 8002cb6:	4b32      	ldr	r3, [pc, #200]	; (8002d80 <UART_SetConfig+0x504>)
 8002cb8:	18d3      	adds	r3, r2, r3
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002cbe:	f7ff fb83 	bl	80023c8 <HAL_RCC_GetPCLK1Freq>
 8002cc2:	0003      	movs	r3, r0
 8002cc4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cc6:	e021      	b.n	8002d0c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002cc8:	f7ff fb94 	bl	80023f4 <HAL_RCC_GetPCLK2Freq>
 8002ccc:	0003      	movs	r3, r0
 8002cce:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cd0:	e01c      	b.n	8002d0c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002cd2:	4b28      	ldr	r3, [pc, #160]	; (8002d74 <UART_SetConfig+0x4f8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	2210      	movs	r2, #16
 8002cd8:	4013      	ands	r3, r2
 8002cda:	d002      	beq.n	8002ce2 <UART_SetConfig+0x466>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 8002cdc:	4b26      	ldr	r3, [pc, #152]	; (8002d78 <UART_SetConfig+0x4fc>)
 8002cde:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8002ce0:	e014      	b.n	8002d0c <UART_SetConfig+0x490>
          pclk = (uint32_t) HSI_VALUE;
 8002ce2:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <UART_SetConfig+0x500>)
 8002ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002ce6:	e011      	b.n	8002d0c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002ce8:	f7ff fabe 	bl	8002268 <HAL_RCC_GetSysClockFreq>
 8002cec:	0003      	movs	r3, r0
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf0:	e00c      	b.n	8002d0c <UART_SetConfig+0x490>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	021b      	lsls	r3, r3, #8
 8002cf6:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8002cf8:	e008      	b.n	8002d0c <UART_SetConfig+0x490>
      default:
        pclk = 0U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 8002cfe:	231a      	movs	r3, #26
 8002d00:	2218      	movs	r2, #24
 8002d02:	189b      	adds	r3, r3, r2
 8002d04:	19db      	adds	r3, r3, r7
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
        break;
 8002d0a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d020      	beq.n	8002d54 <UART_SetConfig+0x4d8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	085a      	lsrs	r2, r3, #1
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	18d2      	adds	r2, r2, r3
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	685b      	ldr	r3, [r3, #4]
 8002d20:	0019      	movs	r1, r3
 8002d22:	0010      	movs	r0, r2
 8002d24:	f7fd f9fa 	bl	800011c <__udivsi3>
 8002d28:	0003      	movs	r3, r0
 8002d2a:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002d2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d2e:	2b0f      	cmp	r3, #15
 8002d30:	d90a      	bls.n	8002d48 <UART_SetConfig+0x4cc>
 8002d32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d34:	2380      	movs	r3, #128	; 0x80
 8002d36:	025b      	lsls	r3, r3, #9
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d205      	bcs.n	8002d48 <UART_SetConfig+0x4cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	b29a      	uxth	r2, r3
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	60da      	str	r2, [r3, #12]
 8002d46:	e005      	b.n	8002d54 <UART_SetConfig+0x4d8>
      }
      else
      {
        ret = HAL_ERROR;
 8002d48:	231a      	movs	r3, #26
 8002d4a:	2218      	movs	r2, #24
 8002d4c:	189b      	adds	r3, r3, r2
 8002d4e:	19db      	adds	r3, r3, r7
 8002d50:	2201      	movs	r2, #1
 8002d52:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002d54:	69fb      	ldr	r3, [r7, #28]
 8002d56:	2200      	movs	r2, #0
 8002d58:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	2200      	movs	r2, #0
 8002d5e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8002d60:	231a      	movs	r3, #26
 8002d62:	2218      	movs	r2, #24
 8002d64:	189b      	adds	r3, r3, r2
 8002d66:	19db      	adds	r3, r3, r7
 8002d68:	781b      	ldrb	r3, [r3, #0]
}
 8002d6a:	0018      	movs	r0, r3
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	b00e      	add	sp, #56	; 0x38
 8002d70:	bdb0      	pop	{r4, r5, r7, pc}
 8002d72:	46c0      	nop			; (mov r8, r8)
 8002d74:	40021000 	.word	0x40021000
 8002d78:	003d0900 	.word	0x003d0900
 8002d7c:	00f42400 	.word	0x00f42400
 8002d80:	08003b80 	.word	0x08003b80

08002d84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d90:	2201      	movs	r2, #1
 8002d92:	4013      	ands	r3, r2
 8002d94:	d00b      	beq.n	8002dae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4a4a      	ldr	r2, [pc, #296]	; (8002ec8 <UART_AdvFeatureConfig+0x144>)
 8002d9e:	4013      	ands	r3, r2
 8002da0:	0019      	movs	r1, r3
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	430a      	orrs	r2, r1
 8002dac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db2:	2202      	movs	r2, #2
 8002db4:	4013      	ands	r3, r2
 8002db6:	d00b      	beq.n	8002dd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a43      	ldr	r2, [pc, #268]	; (8002ecc <UART_AdvFeatureConfig+0x148>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	0019      	movs	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	4013      	ands	r3, r2
 8002dd8:	d00b      	beq.n	8002df2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	4a3b      	ldr	r2, [pc, #236]	; (8002ed0 <UART_AdvFeatureConfig+0x14c>)
 8002de2:	4013      	ands	r3, r2
 8002de4:	0019      	movs	r1, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	430a      	orrs	r2, r1
 8002df0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2208      	movs	r2, #8
 8002df8:	4013      	ands	r3, r2
 8002dfa:	d00b      	beq.n	8002e14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	4a34      	ldr	r2, [pc, #208]	; (8002ed4 <UART_AdvFeatureConfig+0x150>)
 8002e04:	4013      	ands	r3, r2
 8002e06:	0019      	movs	r1, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	430a      	orrs	r2, r1
 8002e12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e18:	2210      	movs	r2, #16
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	d00b      	beq.n	8002e36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	4a2c      	ldr	r2, [pc, #176]	; (8002ed8 <UART_AdvFeatureConfig+0x154>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	0019      	movs	r1, r3
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	430a      	orrs	r2, r1
 8002e34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e3a:	2220      	movs	r2, #32
 8002e3c:	4013      	ands	r3, r2
 8002e3e:	d00b      	beq.n	8002e58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	4a25      	ldr	r2, [pc, #148]	; (8002edc <UART_AdvFeatureConfig+0x158>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	0019      	movs	r1, r3
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	430a      	orrs	r2, r1
 8002e56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5c:	2240      	movs	r2, #64	; 0x40
 8002e5e:	4013      	ands	r3, r2
 8002e60:	d01d      	beq.n	8002e9e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <UART_AdvFeatureConfig+0x15c>)
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	0019      	movs	r1, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	430a      	orrs	r2, r1
 8002e78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002e7e:	2380      	movs	r3, #128	; 0x80
 8002e80:	035b      	lsls	r3, r3, #13
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d10b      	bne.n	8002e9e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <UART_AdvFeatureConfig+0x160>)
 8002e8e:	4013      	ands	r3, r2
 8002e90:	0019      	movs	r1, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ea2:	2280      	movs	r2, #128	; 0x80
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	d00b      	beq.n	8002ec0 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	685b      	ldr	r3, [r3, #4]
 8002eae:	4a0e      	ldr	r2, [pc, #56]	; (8002ee8 <UART_AdvFeatureConfig+0x164>)
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	0019      	movs	r1, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	430a      	orrs	r2, r1
 8002ebe:	605a      	str	r2, [r3, #4]
  }
}
 8002ec0:	46c0      	nop			; (mov r8, r8)
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	b002      	add	sp, #8
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	fffdffff 	.word	0xfffdffff
 8002ecc:	fffeffff 	.word	0xfffeffff
 8002ed0:	fffbffff 	.word	0xfffbffff
 8002ed4:	ffff7fff 	.word	0xffff7fff
 8002ed8:	ffffefff 	.word	0xffffefff
 8002edc:	ffffdfff 	.word	0xffffdfff
 8002ee0:	ffefffff 	.word	0xffefffff
 8002ee4:	ff9fffff 	.word	0xff9fffff
 8002ee8:	fff7ffff 	.word	0xfff7ffff

08002eec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b092      	sub	sp, #72	; 0x48
 8002ef0:	af02      	add	r7, sp, #8
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2284      	movs	r2, #132	; 0x84
 8002ef8:	2100      	movs	r1, #0
 8002efa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002efc:	f7fd ff78 	bl	8000df0 <HAL_GetTick>
 8002f00:	0003      	movs	r3, r0
 8002f02:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	4013      	ands	r3, r2
 8002f0e:	2b08      	cmp	r3, #8
 8002f10:	d12c      	bne.n	8002f6c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f14:	2280      	movs	r2, #128	; 0x80
 8002f16:	0391      	lsls	r1, r2, #14
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	4a46      	ldr	r2, [pc, #280]	; (8003034 <UART_CheckIdleState+0x148>)
 8002f1c:	9200      	str	r2, [sp, #0]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	f000 f88c 	bl	800303c <UART_WaitOnFlagUntilTimeout>
 8002f24:	1e03      	subs	r3, r0, #0
 8002f26:	d021      	beq.n	8002f6c <UART_CheckIdleState+0x80>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f28:	f3ef 8310 	mrs	r3, PRIMASK
 8002f2c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8002f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8002f30:	63bb      	str	r3, [r7, #56]	; 0x38
 8002f32:	2301      	movs	r3, #1
 8002f34:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f38:	f383 8810 	msr	PRIMASK, r3
}
 8002f3c:	46c0      	nop			; (mov r8, r8)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	681a      	ldr	r2, [r3, #0]
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2180      	movs	r1, #128	; 0x80
 8002f4a:	438a      	bics	r2, r1
 8002f4c:	601a      	str	r2, [r3, #0]
 8002f4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f54:	f383 8810 	msr	PRIMASK, r3
}
 8002f58:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2220      	movs	r2, #32
 8002f5e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	2278      	movs	r2, #120	; 0x78
 8002f64:	2100      	movs	r1, #0
 8002f66:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002f68:	2303      	movs	r3, #3
 8002f6a:	e05f      	b.n	800302c <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2204      	movs	r2, #4
 8002f74:	4013      	ands	r3, r2
 8002f76:	2b04      	cmp	r3, #4
 8002f78:	d146      	bne.n	8003008 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002f7c:	2280      	movs	r2, #128	; 0x80
 8002f7e:	03d1      	lsls	r1, r2, #15
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	4a2c      	ldr	r2, [pc, #176]	; (8003034 <UART_CheckIdleState+0x148>)
 8002f84:	9200      	str	r2, [sp, #0]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f000 f858 	bl	800303c <UART_WaitOnFlagUntilTimeout>
 8002f8c:	1e03      	subs	r3, r0, #0
 8002f8e:	d03b      	beq.n	8003008 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f90:	f3ef 8310 	mrs	r3, PRIMASK
 8002f94:	60fb      	str	r3, [r7, #12]
  return(result);
 8002f96:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f98:	637b      	str	r3, [r7, #52]	; 0x34
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f9e:	693b      	ldr	r3, [r7, #16]
 8002fa0:	f383 8810 	msr	PRIMASK, r3
}
 8002fa4:	46c0      	nop			; (mov r8, r8)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	4921      	ldr	r1, [pc, #132]	; (8003038 <UART_CheckIdleState+0x14c>)
 8002fb2:	400a      	ands	r2, r1
 8002fb4:	601a      	str	r2, [r3, #0]
 8002fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fb8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fba:	697b      	ldr	r3, [r7, #20]
 8002fbc:	f383 8810 	msr	PRIMASK, r3
}
 8002fc0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002fc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002fc6:	61bb      	str	r3, [r7, #24]
  return(result);
 8002fc8:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fca:	633b      	str	r3, [r7, #48]	; 0x30
 8002fcc:	2301      	movs	r3, #1
 8002fce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	f383 8810 	msr	PRIMASK, r3
}
 8002fd6:	46c0      	nop			; (mov r8, r8)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689a      	ldr	r2, [r3, #8]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	2101      	movs	r1, #1
 8002fe4:	438a      	bics	r2, r1
 8002fe6:	609a      	str	r2, [r3, #8]
 8002fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002fea:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fec:	6a3b      	ldr	r3, [r7, #32]
 8002fee:	f383 8810 	msr	PRIMASK, r3
}
 8002ff2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2280      	movs	r2, #128	; 0x80
 8002ff8:	2120      	movs	r1, #32
 8002ffa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	2278      	movs	r2, #120	; 0x78
 8003000:	2100      	movs	r1, #0
 8003002:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003004:	2303      	movs	r3, #3
 8003006:	e011      	b.n	800302c <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2220      	movs	r2, #32
 800300c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2280      	movs	r2, #128	; 0x80
 8003012:	2120      	movs	r1, #32
 8003014:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	2200      	movs	r2, #0
 8003020:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2278      	movs	r2, #120	; 0x78
 8003026:	2100      	movs	r1, #0
 8003028:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800302a:	2300      	movs	r3, #0
}
 800302c:	0018      	movs	r0, r3
 800302e:	46bd      	mov	sp, r7
 8003030:	b010      	add	sp, #64	; 0x40
 8003032:	bd80      	pop	{r7, pc}
 8003034:	01ffffff 	.word	0x01ffffff
 8003038:	fffffedf 	.word	0xfffffedf

0800303c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	603b      	str	r3, [r7, #0]
 8003048:	1dfb      	adds	r3, r7, #7
 800304a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800304c:	e04b      	b.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800304e:	69bb      	ldr	r3, [r7, #24]
 8003050:	3301      	adds	r3, #1
 8003052:	d048      	beq.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003054:	f7fd fecc 	bl	8000df0 <HAL_GetTick>
 8003058:	0002      	movs	r2, r0
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	1ad3      	subs	r3, r2, r3
 800305e:	69ba      	ldr	r2, [r7, #24]
 8003060:	429a      	cmp	r2, r3
 8003062:	d302      	bcc.n	800306a <UART_WaitOnFlagUntilTimeout+0x2e>
 8003064:	69bb      	ldr	r3, [r7, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d101      	bne.n	800306e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e04b      	b.n	8003106 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	2204      	movs	r2, #4
 8003076:	4013      	ands	r3, r2
 8003078:	d035      	beq.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	69db      	ldr	r3, [r3, #28]
 8003080:	2208      	movs	r2, #8
 8003082:	4013      	ands	r3, r2
 8003084:	2b08      	cmp	r3, #8
 8003086:	d111      	bne.n	80030ac <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	2208      	movs	r2, #8
 800308e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	0018      	movs	r0, r3
 8003094:	f000 f83c 	bl	8003110 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2284      	movs	r2, #132	; 0x84
 800309c:	2108      	movs	r1, #8
 800309e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2278      	movs	r2, #120	; 0x78
 80030a4:	2100      	movs	r1, #0
 80030a6:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e02c      	b.n	8003106 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	69da      	ldr	r2, [r3, #28]
 80030b2:	2380      	movs	r3, #128	; 0x80
 80030b4:	011b      	lsls	r3, r3, #4
 80030b6:	401a      	ands	r2, r3
 80030b8:	2380      	movs	r3, #128	; 0x80
 80030ba:	011b      	lsls	r3, r3, #4
 80030bc:	429a      	cmp	r2, r3
 80030be:	d112      	bne.n	80030e6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	2280      	movs	r2, #128	; 0x80
 80030c6:	0112      	lsls	r2, r2, #4
 80030c8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	0018      	movs	r0, r3
 80030ce:	f000 f81f 	bl	8003110 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2284      	movs	r2, #132	; 0x84
 80030d6:	2120      	movs	r1, #32
 80030d8:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2278      	movs	r2, #120	; 0x78
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e00f      	b.n	8003106 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	69db      	ldr	r3, [r3, #28]
 80030ec:	68ba      	ldr	r2, [r7, #8]
 80030ee:	4013      	ands	r3, r2
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	1ad3      	subs	r3, r2, r3
 80030f4:	425a      	negs	r2, r3
 80030f6:	4153      	adcs	r3, r2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	001a      	movs	r2, r3
 80030fc:	1dfb      	adds	r3, r7, #7
 80030fe:	781b      	ldrb	r3, [r3, #0]
 8003100:	429a      	cmp	r2, r3
 8003102:	d0a4      	beq.n	800304e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003104:	2300      	movs	r3, #0
}
 8003106:	0018      	movs	r0, r3
 8003108:	46bd      	mov	sp, r7
 800310a:	b004      	add	sp, #16
 800310c:	bd80      	pop	{r7, pc}
	...

08003110 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08e      	sub	sp, #56	; 0x38
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003118:	f3ef 8310 	mrs	r3, PRIMASK
 800311c:	617b      	str	r3, [r7, #20]
  return(result);
 800311e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003120:	637b      	str	r3, [r7, #52]	; 0x34
 8003122:	2301      	movs	r3, #1
 8003124:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003126:	69bb      	ldr	r3, [r7, #24]
 8003128:	f383 8810 	msr	PRIMASK, r3
}
 800312c:	46c0      	nop			; (mov r8, r8)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4926      	ldr	r1, [pc, #152]	; (80031d4 <UART_EndRxTransfer+0xc4>)
 800313a:	400a      	ands	r2, r1
 800313c:	601a      	str	r2, [r3, #0]
 800313e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003140:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	f383 8810 	msr	PRIMASK, r3
}
 8003148:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800314a:	f3ef 8310 	mrs	r3, PRIMASK
 800314e:	623b      	str	r3, [r7, #32]
  return(result);
 8003150:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003152:	633b      	str	r3, [r7, #48]	; 0x30
 8003154:	2301      	movs	r3, #1
 8003156:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800315a:	f383 8810 	msr	PRIMASK, r3
}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	689a      	ldr	r2, [r3, #8]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2101      	movs	r1, #1
 800316c:	438a      	bics	r2, r1
 800316e:	609a      	str	r2, [r3, #8]
 8003170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003172:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003176:	f383 8810 	msr	PRIMASK, r3
}
 800317a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003180:	2b01      	cmp	r3, #1
 8003182:	d118      	bne.n	80031b6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003184:	f3ef 8310 	mrs	r3, PRIMASK
 8003188:	60bb      	str	r3, [r7, #8]
  return(result);
 800318a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800318c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800318e:	2301      	movs	r3, #1
 8003190:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f383 8810 	msr	PRIMASK, r3
}
 8003198:	46c0      	nop			; (mov r8, r8)
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	681a      	ldr	r2, [r3, #0]
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	2110      	movs	r1, #16
 80031a6:	438a      	bics	r2, r1
 80031a8:	601a      	str	r2, [r3, #0]
 80031aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ac:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80031ae:	693b      	ldr	r3, [r7, #16]
 80031b0:	f383 8810 	msr	PRIMASK, r3
}
 80031b4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2280      	movs	r2, #128	; 0x80
 80031ba:	2120      	movs	r1, #32
 80031bc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2200      	movs	r2, #0
 80031c2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	669a      	str	r2, [r3, #104]	; 0x68
}
 80031ca:	46c0      	nop			; (mov r8, r8)
 80031cc:	46bd      	mov	sp, r7
 80031ce:	b00e      	add	sp, #56	; 0x38
 80031d0:	bd80      	pop	{r7, pc}
 80031d2:	46c0      	nop			; (mov r8, r8)
 80031d4:	fffffedf 	.word	0xfffffedf

080031d8 <__errno>:
 80031d8:	4b01      	ldr	r3, [pc, #4]	; (80031e0 <__errno+0x8>)
 80031da:	6818      	ldr	r0, [r3, #0]
 80031dc:	4770      	bx	lr
 80031de:	46c0      	nop			; (mov r8, r8)
 80031e0:	2000000c 	.word	0x2000000c

080031e4 <__libc_init_array>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	2600      	movs	r6, #0
 80031e8:	4d0c      	ldr	r5, [pc, #48]	; (800321c <__libc_init_array+0x38>)
 80031ea:	4c0d      	ldr	r4, [pc, #52]	; (8003220 <__libc_init_array+0x3c>)
 80031ec:	1b64      	subs	r4, r4, r5
 80031ee:	10a4      	asrs	r4, r4, #2
 80031f0:	42a6      	cmp	r6, r4
 80031f2:	d109      	bne.n	8003208 <__libc_init_array+0x24>
 80031f4:	2600      	movs	r6, #0
 80031f6:	f000 fc8b 	bl	8003b10 <_init>
 80031fa:	4d0a      	ldr	r5, [pc, #40]	; (8003224 <__libc_init_array+0x40>)
 80031fc:	4c0a      	ldr	r4, [pc, #40]	; (8003228 <__libc_init_array+0x44>)
 80031fe:	1b64      	subs	r4, r4, r5
 8003200:	10a4      	asrs	r4, r4, #2
 8003202:	42a6      	cmp	r6, r4
 8003204:	d105      	bne.n	8003212 <__libc_init_array+0x2e>
 8003206:	bd70      	pop	{r4, r5, r6, pc}
 8003208:	00b3      	lsls	r3, r6, #2
 800320a:	58eb      	ldr	r3, [r5, r3]
 800320c:	4798      	blx	r3
 800320e:	3601      	adds	r6, #1
 8003210:	e7ee      	b.n	80031f0 <__libc_init_array+0xc>
 8003212:	00b3      	lsls	r3, r6, #2
 8003214:	58eb      	ldr	r3, [r5, r3]
 8003216:	4798      	blx	r3
 8003218:	3601      	adds	r6, #1
 800321a:	e7f2      	b.n	8003202 <__libc_init_array+0x1e>
 800321c:	08003be0 	.word	0x08003be0
 8003220:	08003be0 	.word	0x08003be0
 8003224:	08003be0 	.word	0x08003be0
 8003228:	08003be4 	.word	0x08003be4

0800322c <memset>:
 800322c:	0003      	movs	r3, r0
 800322e:	1882      	adds	r2, r0, r2
 8003230:	4293      	cmp	r3, r2
 8003232:	d100      	bne.n	8003236 <memset+0xa>
 8003234:	4770      	bx	lr
 8003236:	7019      	strb	r1, [r3, #0]
 8003238:	3301      	adds	r3, #1
 800323a:	e7f9      	b.n	8003230 <memset+0x4>

0800323c <siprintf>:
 800323c:	b40e      	push	{r1, r2, r3}
 800323e:	b500      	push	{lr}
 8003240:	490b      	ldr	r1, [pc, #44]	; (8003270 <siprintf+0x34>)
 8003242:	b09c      	sub	sp, #112	; 0x70
 8003244:	ab1d      	add	r3, sp, #116	; 0x74
 8003246:	9002      	str	r0, [sp, #8]
 8003248:	9006      	str	r0, [sp, #24]
 800324a:	9107      	str	r1, [sp, #28]
 800324c:	9104      	str	r1, [sp, #16]
 800324e:	4809      	ldr	r0, [pc, #36]	; (8003274 <siprintf+0x38>)
 8003250:	4909      	ldr	r1, [pc, #36]	; (8003278 <siprintf+0x3c>)
 8003252:	cb04      	ldmia	r3!, {r2}
 8003254:	9105      	str	r1, [sp, #20]
 8003256:	6800      	ldr	r0, [r0, #0]
 8003258:	a902      	add	r1, sp, #8
 800325a:	9301      	str	r3, [sp, #4]
 800325c:	f000 f870 	bl	8003340 <_svfiprintf_r>
 8003260:	2300      	movs	r3, #0
 8003262:	9a02      	ldr	r2, [sp, #8]
 8003264:	7013      	strb	r3, [r2, #0]
 8003266:	b01c      	add	sp, #112	; 0x70
 8003268:	bc08      	pop	{r3}
 800326a:	b003      	add	sp, #12
 800326c:	4718      	bx	r3
 800326e:	46c0      	nop			; (mov r8, r8)
 8003270:	7fffffff 	.word	0x7fffffff
 8003274:	2000000c 	.word	0x2000000c
 8003278:	ffff0208 	.word	0xffff0208

0800327c <__ssputs_r>:
 800327c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800327e:	688e      	ldr	r6, [r1, #8]
 8003280:	b085      	sub	sp, #20
 8003282:	0007      	movs	r7, r0
 8003284:	000c      	movs	r4, r1
 8003286:	9203      	str	r2, [sp, #12]
 8003288:	9301      	str	r3, [sp, #4]
 800328a:	429e      	cmp	r6, r3
 800328c:	d83c      	bhi.n	8003308 <__ssputs_r+0x8c>
 800328e:	2390      	movs	r3, #144	; 0x90
 8003290:	898a      	ldrh	r2, [r1, #12]
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	421a      	tst	r2, r3
 8003296:	d034      	beq.n	8003302 <__ssputs_r+0x86>
 8003298:	6909      	ldr	r1, [r1, #16]
 800329a:	6823      	ldr	r3, [r4, #0]
 800329c:	6960      	ldr	r0, [r4, #20]
 800329e:	1a5b      	subs	r3, r3, r1
 80032a0:	9302      	str	r3, [sp, #8]
 80032a2:	2303      	movs	r3, #3
 80032a4:	4343      	muls	r3, r0
 80032a6:	0fdd      	lsrs	r5, r3, #31
 80032a8:	18ed      	adds	r5, r5, r3
 80032aa:	9b01      	ldr	r3, [sp, #4]
 80032ac:	9802      	ldr	r0, [sp, #8]
 80032ae:	3301      	adds	r3, #1
 80032b0:	181b      	adds	r3, r3, r0
 80032b2:	106d      	asrs	r5, r5, #1
 80032b4:	42ab      	cmp	r3, r5
 80032b6:	d900      	bls.n	80032ba <__ssputs_r+0x3e>
 80032b8:	001d      	movs	r5, r3
 80032ba:	0553      	lsls	r3, r2, #21
 80032bc:	d532      	bpl.n	8003324 <__ssputs_r+0xa8>
 80032be:	0029      	movs	r1, r5
 80032c0:	0038      	movs	r0, r7
 80032c2:	f000 fb53 	bl	800396c <_malloc_r>
 80032c6:	1e06      	subs	r6, r0, #0
 80032c8:	d109      	bne.n	80032de <__ssputs_r+0x62>
 80032ca:	230c      	movs	r3, #12
 80032cc:	603b      	str	r3, [r7, #0]
 80032ce:	2340      	movs	r3, #64	; 0x40
 80032d0:	2001      	movs	r0, #1
 80032d2:	89a2      	ldrh	r2, [r4, #12]
 80032d4:	4240      	negs	r0, r0
 80032d6:	4313      	orrs	r3, r2
 80032d8:	81a3      	strh	r3, [r4, #12]
 80032da:	b005      	add	sp, #20
 80032dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80032de:	9a02      	ldr	r2, [sp, #8]
 80032e0:	6921      	ldr	r1, [r4, #16]
 80032e2:	f000 faba 	bl	800385a <memcpy>
 80032e6:	89a3      	ldrh	r3, [r4, #12]
 80032e8:	4a14      	ldr	r2, [pc, #80]	; (800333c <__ssputs_r+0xc0>)
 80032ea:	401a      	ands	r2, r3
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	4313      	orrs	r3, r2
 80032f0:	81a3      	strh	r3, [r4, #12]
 80032f2:	9b02      	ldr	r3, [sp, #8]
 80032f4:	6126      	str	r6, [r4, #16]
 80032f6:	18f6      	adds	r6, r6, r3
 80032f8:	6026      	str	r6, [r4, #0]
 80032fa:	6165      	str	r5, [r4, #20]
 80032fc:	9e01      	ldr	r6, [sp, #4]
 80032fe:	1aed      	subs	r5, r5, r3
 8003300:	60a5      	str	r5, [r4, #8]
 8003302:	9b01      	ldr	r3, [sp, #4]
 8003304:	429e      	cmp	r6, r3
 8003306:	d900      	bls.n	800330a <__ssputs_r+0x8e>
 8003308:	9e01      	ldr	r6, [sp, #4]
 800330a:	0032      	movs	r2, r6
 800330c:	9903      	ldr	r1, [sp, #12]
 800330e:	6820      	ldr	r0, [r4, #0]
 8003310:	f000 faac 	bl	800386c <memmove>
 8003314:	68a3      	ldr	r3, [r4, #8]
 8003316:	2000      	movs	r0, #0
 8003318:	1b9b      	subs	r3, r3, r6
 800331a:	60a3      	str	r3, [r4, #8]
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	199e      	adds	r6, r3, r6
 8003320:	6026      	str	r6, [r4, #0]
 8003322:	e7da      	b.n	80032da <__ssputs_r+0x5e>
 8003324:	002a      	movs	r2, r5
 8003326:	0038      	movs	r0, r7
 8003328:	f000 fb96 	bl	8003a58 <_realloc_r>
 800332c:	1e06      	subs	r6, r0, #0
 800332e:	d1e0      	bne.n	80032f2 <__ssputs_r+0x76>
 8003330:	0038      	movs	r0, r7
 8003332:	6921      	ldr	r1, [r4, #16]
 8003334:	f000 faae 	bl	8003894 <_free_r>
 8003338:	e7c7      	b.n	80032ca <__ssputs_r+0x4e>
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	fffffb7f 	.word	0xfffffb7f

08003340 <_svfiprintf_r>:
 8003340:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003342:	b0a1      	sub	sp, #132	; 0x84
 8003344:	9003      	str	r0, [sp, #12]
 8003346:	001d      	movs	r5, r3
 8003348:	898b      	ldrh	r3, [r1, #12]
 800334a:	000f      	movs	r7, r1
 800334c:	0016      	movs	r6, r2
 800334e:	061b      	lsls	r3, r3, #24
 8003350:	d511      	bpl.n	8003376 <_svfiprintf_r+0x36>
 8003352:	690b      	ldr	r3, [r1, #16]
 8003354:	2b00      	cmp	r3, #0
 8003356:	d10e      	bne.n	8003376 <_svfiprintf_r+0x36>
 8003358:	2140      	movs	r1, #64	; 0x40
 800335a:	f000 fb07 	bl	800396c <_malloc_r>
 800335e:	6038      	str	r0, [r7, #0]
 8003360:	6138      	str	r0, [r7, #16]
 8003362:	2800      	cmp	r0, #0
 8003364:	d105      	bne.n	8003372 <_svfiprintf_r+0x32>
 8003366:	230c      	movs	r3, #12
 8003368:	9a03      	ldr	r2, [sp, #12]
 800336a:	3801      	subs	r0, #1
 800336c:	6013      	str	r3, [r2, #0]
 800336e:	b021      	add	sp, #132	; 0x84
 8003370:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003372:	2340      	movs	r3, #64	; 0x40
 8003374:	617b      	str	r3, [r7, #20]
 8003376:	2300      	movs	r3, #0
 8003378:	ac08      	add	r4, sp, #32
 800337a:	6163      	str	r3, [r4, #20]
 800337c:	3320      	adds	r3, #32
 800337e:	7663      	strb	r3, [r4, #25]
 8003380:	3310      	adds	r3, #16
 8003382:	76a3      	strb	r3, [r4, #26]
 8003384:	9507      	str	r5, [sp, #28]
 8003386:	0035      	movs	r5, r6
 8003388:	782b      	ldrb	r3, [r5, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d001      	beq.n	8003392 <_svfiprintf_r+0x52>
 800338e:	2b25      	cmp	r3, #37	; 0x25
 8003390:	d147      	bne.n	8003422 <_svfiprintf_r+0xe2>
 8003392:	1bab      	subs	r3, r5, r6
 8003394:	9305      	str	r3, [sp, #20]
 8003396:	42b5      	cmp	r5, r6
 8003398:	d00c      	beq.n	80033b4 <_svfiprintf_r+0x74>
 800339a:	0032      	movs	r2, r6
 800339c:	0039      	movs	r1, r7
 800339e:	9803      	ldr	r0, [sp, #12]
 80033a0:	f7ff ff6c 	bl	800327c <__ssputs_r>
 80033a4:	1c43      	adds	r3, r0, #1
 80033a6:	d100      	bne.n	80033aa <_svfiprintf_r+0x6a>
 80033a8:	e0ae      	b.n	8003508 <_svfiprintf_r+0x1c8>
 80033aa:	6962      	ldr	r2, [r4, #20]
 80033ac:	9b05      	ldr	r3, [sp, #20]
 80033ae:	4694      	mov	ip, r2
 80033b0:	4463      	add	r3, ip
 80033b2:	6163      	str	r3, [r4, #20]
 80033b4:	782b      	ldrb	r3, [r5, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d100      	bne.n	80033bc <_svfiprintf_r+0x7c>
 80033ba:	e0a5      	b.n	8003508 <_svfiprintf_r+0x1c8>
 80033bc:	2201      	movs	r2, #1
 80033be:	2300      	movs	r3, #0
 80033c0:	4252      	negs	r2, r2
 80033c2:	6062      	str	r2, [r4, #4]
 80033c4:	a904      	add	r1, sp, #16
 80033c6:	3254      	adds	r2, #84	; 0x54
 80033c8:	1852      	adds	r2, r2, r1
 80033ca:	1c6e      	adds	r6, r5, #1
 80033cc:	6023      	str	r3, [r4, #0]
 80033ce:	60e3      	str	r3, [r4, #12]
 80033d0:	60a3      	str	r3, [r4, #8]
 80033d2:	7013      	strb	r3, [r2, #0]
 80033d4:	65a3      	str	r3, [r4, #88]	; 0x58
 80033d6:	2205      	movs	r2, #5
 80033d8:	7831      	ldrb	r1, [r6, #0]
 80033da:	4854      	ldr	r0, [pc, #336]	; (800352c <_svfiprintf_r+0x1ec>)
 80033dc:	f000 fa32 	bl	8003844 <memchr>
 80033e0:	1c75      	adds	r5, r6, #1
 80033e2:	2800      	cmp	r0, #0
 80033e4:	d11f      	bne.n	8003426 <_svfiprintf_r+0xe6>
 80033e6:	6822      	ldr	r2, [r4, #0]
 80033e8:	06d3      	lsls	r3, r2, #27
 80033ea:	d504      	bpl.n	80033f6 <_svfiprintf_r+0xb6>
 80033ec:	2353      	movs	r3, #83	; 0x53
 80033ee:	a904      	add	r1, sp, #16
 80033f0:	185b      	adds	r3, r3, r1
 80033f2:	2120      	movs	r1, #32
 80033f4:	7019      	strb	r1, [r3, #0]
 80033f6:	0713      	lsls	r3, r2, #28
 80033f8:	d504      	bpl.n	8003404 <_svfiprintf_r+0xc4>
 80033fa:	2353      	movs	r3, #83	; 0x53
 80033fc:	a904      	add	r1, sp, #16
 80033fe:	185b      	adds	r3, r3, r1
 8003400:	212b      	movs	r1, #43	; 0x2b
 8003402:	7019      	strb	r1, [r3, #0]
 8003404:	7833      	ldrb	r3, [r6, #0]
 8003406:	2b2a      	cmp	r3, #42	; 0x2a
 8003408:	d016      	beq.n	8003438 <_svfiprintf_r+0xf8>
 800340a:	0035      	movs	r5, r6
 800340c:	2100      	movs	r1, #0
 800340e:	200a      	movs	r0, #10
 8003410:	68e3      	ldr	r3, [r4, #12]
 8003412:	782a      	ldrb	r2, [r5, #0]
 8003414:	1c6e      	adds	r6, r5, #1
 8003416:	3a30      	subs	r2, #48	; 0x30
 8003418:	2a09      	cmp	r2, #9
 800341a:	d94e      	bls.n	80034ba <_svfiprintf_r+0x17a>
 800341c:	2900      	cmp	r1, #0
 800341e:	d111      	bne.n	8003444 <_svfiprintf_r+0x104>
 8003420:	e017      	b.n	8003452 <_svfiprintf_r+0x112>
 8003422:	3501      	adds	r5, #1
 8003424:	e7b0      	b.n	8003388 <_svfiprintf_r+0x48>
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <_svfiprintf_r+0x1ec>)
 8003428:	6822      	ldr	r2, [r4, #0]
 800342a:	1ac0      	subs	r0, r0, r3
 800342c:	2301      	movs	r3, #1
 800342e:	4083      	lsls	r3, r0
 8003430:	4313      	orrs	r3, r2
 8003432:	002e      	movs	r6, r5
 8003434:	6023      	str	r3, [r4, #0]
 8003436:	e7ce      	b.n	80033d6 <_svfiprintf_r+0x96>
 8003438:	9b07      	ldr	r3, [sp, #28]
 800343a:	1d19      	adds	r1, r3, #4
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	9107      	str	r1, [sp, #28]
 8003440:	2b00      	cmp	r3, #0
 8003442:	db01      	blt.n	8003448 <_svfiprintf_r+0x108>
 8003444:	930b      	str	r3, [sp, #44]	; 0x2c
 8003446:	e004      	b.n	8003452 <_svfiprintf_r+0x112>
 8003448:	425b      	negs	r3, r3
 800344a:	60e3      	str	r3, [r4, #12]
 800344c:	2302      	movs	r3, #2
 800344e:	4313      	orrs	r3, r2
 8003450:	6023      	str	r3, [r4, #0]
 8003452:	782b      	ldrb	r3, [r5, #0]
 8003454:	2b2e      	cmp	r3, #46	; 0x2e
 8003456:	d10a      	bne.n	800346e <_svfiprintf_r+0x12e>
 8003458:	786b      	ldrb	r3, [r5, #1]
 800345a:	2b2a      	cmp	r3, #42	; 0x2a
 800345c:	d135      	bne.n	80034ca <_svfiprintf_r+0x18a>
 800345e:	9b07      	ldr	r3, [sp, #28]
 8003460:	3502      	adds	r5, #2
 8003462:	1d1a      	adds	r2, r3, #4
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	9207      	str	r2, [sp, #28]
 8003468:	2b00      	cmp	r3, #0
 800346a:	db2b      	blt.n	80034c4 <_svfiprintf_r+0x184>
 800346c:	9309      	str	r3, [sp, #36]	; 0x24
 800346e:	4e30      	ldr	r6, [pc, #192]	; (8003530 <_svfiprintf_r+0x1f0>)
 8003470:	2203      	movs	r2, #3
 8003472:	0030      	movs	r0, r6
 8003474:	7829      	ldrb	r1, [r5, #0]
 8003476:	f000 f9e5 	bl	8003844 <memchr>
 800347a:	2800      	cmp	r0, #0
 800347c:	d006      	beq.n	800348c <_svfiprintf_r+0x14c>
 800347e:	2340      	movs	r3, #64	; 0x40
 8003480:	1b80      	subs	r0, r0, r6
 8003482:	4083      	lsls	r3, r0
 8003484:	6822      	ldr	r2, [r4, #0]
 8003486:	3501      	adds	r5, #1
 8003488:	4313      	orrs	r3, r2
 800348a:	6023      	str	r3, [r4, #0]
 800348c:	7829      	ldrb	r1, [r5, #0]
 800348e:	2206      	movs	r2, #6
 8003490:	4828      	ldr	r0, [pc, #160]	; (8003534 <_svfiprintf_r+0x1f4>)
 8003492:	1c6e      	adds	r6, r5, #1
 8003494:	7621      	strb	r1, [r4, #24]
 8003496:	f000 f9d5 	bl	8003844 <memchr>
 800349a:	2800      	cmp	r0, #0
 800349c:	d03c      	beq.n	8003518 <_svfiprintf_r+0x1d8>
 800349e:	4b26      	ldr	r3, [pc, #152]	; (8003538 <_svfiprintf_r+0x1f8>)
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d125      	bne.n	80034f0 <_svfiprintf_r+0x1b0>
 80034a4:	2207      	movs	r2, #7
 80034a6:	9b07      	ldr	r3, [sp, #28]
 80034a8:	3307      	adds	r3, #7
 80034aa:	4393      	bics	r3, r2
 80034ac:	3308      	adds	r3, #8
 80034ae:	9307      	str	r3, [sp, #28]
 80034b0:	6963      	ldr	r3, [r4, #20]
 80034b2:	9a04      	ldr	r2, [sp, #16]
 80034b4:	189b      	adds	r3, r3, r2
 80034b6:	6163      	str	r3, [r4, #20]
 80034b8:	e765      	b.n	8003386 <_svfiprintf_r+0x46>
 80034ba:	4343      	muls	r3, r0
 80034bc:	0035      	movs	r5, r6
 80034be:	2101      	movs	r1, #1
 80034c0:	189b      	adds	r3, r3, r2
 80034c2:	e7a6      	b.n	8003412 <_svfiprintf_r+0xd2>
 80034c4:	2301      	movs	r3, #1
 80034c6:	425b      	negs	r3, r3
 80034c8:	e7d0      	b.n	800346c <_svfiprintf_r+0x12c>
 80034ca:	2300      	movs	r3, #0
 80034cc:	200a      	movs	r0, #10
 80034ce:	001a      	movs	r2, r3
 80034d0:	3501      	adds	r5, #1
 80034d2:	6063      	str	r3, [r4, #4]
 80034d4:	7829      	ldrb	r1, [r5, #0]
 80034d6:	1c6e      	adds	r6, r5, #1
 80034d8:	3930      	subs	r1, #48	; 0x30
 80034da:	2909      	cmp	r1, #9
 80034dc:	d903      	bls.n	80034e6 <_svfiprintf_r+0x1a6>
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d0c5      	beq.n	800346e <_svfiprintf_r+0x12e>
 80034e2:	9209      	str	r2, [sp, #36]	; 0x24
 80034e4:	e7c3      	b.n	800346e <_svfiprintf_r+0x12e>
 80034e6:	4342      	muls	r2, r0
 80034e8:	0035      	movs	r5, r6
 80034ea:	2301      	movs	r3, #1
 80034ec:	1852      	adds	r2, r2, r1
 80034ee:	e7f1      	b.n	80034d4 <_svfiprintf_r+0x194>
 80034f0:	ab07      	add	r3, sp, #28
 80034f2:	9300      	str	r3, [sp, #0]
 80034f4:	003a      	movs	r2, r7
 80034f6:	0021      	movs	r1, r4
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <_svfiprintf_r+0x1fc>)
 80034fa:	9803      	ldr	r0, [sp, #12]
 80034fc:	e000      	b.n	8003500 <_svfiprintf_r+0x1c0>
 80034fe:	bf00      	nop
 8003500:	9004      	str	r0, [sp, #16]
 8003502:	9b04      	ldr	r3, [sp, #16]
 8003504:	3301      	adds	r3, #1
 8003506:	d1d3      	bne.n	80034b0 <_svfiprintf_r+0x170>
 8003508:	89bb      	ldrh	r3, [r7, #12]
 800350a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800350c:	065b      	lsls	r3, r3, #25
 800350e:	d400      	bmi.n	8003512 <_svfiprintf_r+0x1d2>
 8003510:	e72d      	b.n	800336e <_svfiprintf_r+0x2e>
 8003512:	2001      	movs	r0, #1
 8003514:	4240      	negs	r0, r0
 8003516:	e72a      	b.n	800336e <_svfiprintf_r+0x2e>
 8003518:	ab07      	add	r3, sp, #28
 800351a:	9300      	str	r3, [sp, #0]
 800351c:	003a      	movs	r2, r7
 800351e:	0021      	movs	r1, r4
 8003520:	4b06      	ldr	r3, [pc, #24]	; (800353c <_svfiprintf_r+0x1fc>)
 8003522:	9803      	ldr	r0, [sp, #12]
 8003524:	f000 f87c 	bl	8003620 <_printf_i>
 8003528:	e7ea      	b.n	8003500 <_svfiprintf_r+0x1c0>
 800352a:	46c0      	nop			; (mov r8, r8)
 800352c:	08003ba4 	.word	0x08003ba4
 8003530:	08003baa 	.word	0x08003baa
 8003534:	08003bae 	.word	0x08003bae
 8003538:	00000000 	.word	0x00000000
 800353c:	0800327d 	.word	0x0800327d

08003540 <_printf_common>:
 8003540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003542:	0015      	movs	r5, r2
 8003544:	9301      	str	r3, [sp, #4]
 8003546:	688a      	ldr	r2, [r1, #8]
 8003548:	690b      	ldr	r3, [r1, #16]
 800354a:	000c      	movs	r4, r1
 800354c:	9000      	str	r0, [sp, #0]
 800354e:	4293      	cmp	r3, r2
 8003550:	da00      	bge.n	8003554 <_printf_common+0x14>
 8003552:	0013      	movs	r3, r2
 8003554:	0022      	movs	r2, r4
 8003556:	602b      	str	r3, [r5, #0]
 8003558:	3243      	adds	r2, #67	; 0x43
 800355a:	7812      	ldrb	r2, [r2, #0]
 800355c:	2a00      	cmp	r2, #0
 800355e:	d001      	beq.n	8003564 <_printf_common+0x24>
 8003560:	3301      	adds	r3, #1
 8003562:	602b      	str	r3, [r5, #0]
 8003564:	6823      	ldr	r3, [r4, #0]
 8003566:	069b      	lsls	r3, r3, #26
 8003568:	d502      	bpl.n	8003570 <_printf_common+0x30>
 800356a:	682b      	ldr	r3, [r5, #0]
 800356c:	3302      	adds	r3, #2
 800356e:	602b      	str	r3, [r5, #0]
 8003570:	6822      	ldr	r2, [r4, #0]
 8003572:	2306      	movs	r3, #6
 8003574:	0017      	movs	r7, r2
 8003576:	401f      	ands	r7, r3
 8003578:	421a      	tst	r2, r3
 800357a:	d027      	beq.n	80035cc <_printf_common+0x8c>
 800357c:	0023      	movs	r3, r4
 800357e:	3343      	adds	r3, #67	; 0x43
 8003580:	781b      	ldrb	r3, [r3, #0]
 8003582:	1e5a      	subs	r2, r3, #1
 8003584:	4193      	sbcs	r3, r2
 8003586:	6822      	ldr	r2, [r4, #0]
 8003588:	0692      	lsls	r2, r2, #26
 800358a:	d430      	bmi.n	80035ee <_printf_common+0xae>
 800358c:	0022      	movs	r2, r4
 800358e:	9901      	ldr	r1, [sp, #4]
 8003590:	9800      	ldr	r0, [sp, #0]
 8003592:	9e08      	ldr	r6, [sp, #32]
 8003594:	3243      	adds	r2, #67	; 0x43
 8003596:	47b0      	blx	r6
 8003598:	1c43      	adds	r3, r0, #1
 800359a:	d025      	beq.n	80035e8 <_printf_common+0xa8>
 800359c:	2306      	movs	r3, #6
 800359e:	6820      	ldr	r0, [r4, #0]
 80035a0:	682a      	ldr	r2, [r5, #0]
 80035a2:	68e1      	ldr	r1, [r4, #12]
 80035a4:	2500      	movs	r5, #0
 80035a6:	4003      	ands	r3, r0
 80035a8:	2b04      	cmp	r3, #4
 80035aa:	d103      	bne.n	80035b4 <_printf_common+0x74>
 80035ac:	1a8d      	subs	r5, r1, r2
 80035ae:	43eb      	mvns	r3, r5
 80035b0:	17db      	asrs	r3, r3, #31
 80035b2:	401d      	ands	r5, r3
 80035b4:	68a3      	ldr	r3, [r4, #8]
 80035b6:	6922      	ldr	r2, [r4, #16]
 80035b8:	4293      	cmp	r3, r2
 80035ba:	dd01      	ble.n	80035c0 <_printf_common+0x80>
 80035bc:	1a9b      	subs	r3, r3, r2
 80035be:	18ed      	adds	r5, r5, r3
 80035c0:	2700      	movs	r7, #0
 80035c2:	42bd      	cmp	r5, r7
 80035c4:	d120      	bne.n	8003608 <_printf_common+0xc8>
 80035c6:	2000      	movs	r0, #0
 80035c8:	e010      	b.n	80035ec <_printf_common+0xac>
 80035ca:	3701      	adds	r7, #1
 80035cc:	68e3      	ldr	r3, [r4, #12]
 80035ce:	682a      	ldr	r2, [r5, #0]
 80035d0:	1a9b      	subs	r3, r3, r2
 80035d2:	42bb      	cmp	r3, r7
 80035d4:	ddd2      	ble.n	800357c <_printf_common+0x3c>
 80035d6:	0022      	movs	r2, r4
 80035d8:	2301      	movs	r3, #1
 80035da:	9901      	ldr	r1, [sp, #4]
 80035dc:	9800      	ldr	r0, [sp, #0]
 80035de:	9e08      	ldr	r6, [sp, #32]
 80035e0:	3219      	adds	r2, #25
 80035e2:	47b0      	blx	r6
 80035e4:	1c43      	adds	r3, r0, #1
 80035e6:	d1f0      	bne.n	80035ca <_printf_common+0x8a>
 80035e8:	2001      	movs	r0, #1
 80035ea:	4240      	negs	r0, r0
 80035ec:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80035ee:	2030      	movs	r0, #48	; 0x30
 80035f0:	18e1      	adds	r1, r4, r3
 80035f2:	3143      	adds	r1, #67	; 0x43
 80035f4:	7008      	strb	r0, [r1, #0]
 80035f6:	0021      	movs	r1, r4
 80035f8:	1c5a      	adds	r2, r3, #1
 80035fa:	3145      	adds	r1, #69	; 0x45
 80035fc:	7809      	ldrb	r1, [r1, #0]
 80035fe:	18a2      	adds	r2, r4, r2
 8003600:	3243      	adds	r2, #67	; 0x43
 8003602:	3302      	adds	r3, #2
 8003604:	7011      	strb	r1, [r2, #0]
 8003606:	e7c1      	b.n	800358c <_printf_common+0x4c>
 8003608:	0022      	movs	r2, r4
 800360a:	2301      	movs	r3, #1
 800360c:	9901      	ldr	r1, [sp, #4]
 800360e:	9800      	ldr	r0, [sp, #0]
 8003610:	9e08      	ldr	r6, [sp, #32]
 8003612:	321a      	adds	r2, #26
 8003614:	47b0      	blx	r6
 8003616:	1c43      	adds	r3, r0, #1
 8003618:	d0e6      	beq.n	80035e8 <_printf_common+0xa8>
 800361a:	3701      	adds	r7, #1
 800361c:	e7d1      	b.n	80035c2 <_printf_common+0x82>
	...

08003620 <_printf_i>:
 8003620:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003622:	b08b      	sub	sp, #44	; 0x2c
 8003624:	9206      	str	r2, [sp, #24]
 8003626:	000a      	movs	r2, r1
 8003628:	3243      	adds	r2, #67	; 0x43
 800362a:	9307      	str	r3, [sp, #28]
 800362c:	9005      	str	r0, [sp, #20]
 800362e:	9204      	str	r2, [sp, #16]
 8003630:	7e0a      	ldrb	r2, [r1, #24]
 8003632:	000c      	movs	r4, r1
 8003634:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8003636:	2a78      	cmp	r2, #120	; 0x78
 8003638:	d807      	bhi.n	800364a <_printf_i+0x2a>
 800363a:	2a62      	cmp	r2, #98	; 0x62
 800363c:	d809      	bhi.n	8003652 <_printf_i+0x32>
 800363e:	2a00      	cmp	r2, #0
 8003640:	d100      	bne.n	8003644 <_printf_i+0x24>
 8003642:	e0c1      	b.n	80037c8 <_printf_i+0x1a8>
 8003644:	2a58      	cmp	r2, #88	; 0x58
 8003646:	d100      	bne.n	800364a <_printf_i+0x2a>
 8003648:	e08c      	b.n	8003764 <_printf_i+0x144>
 800364a:	0026      	movs	r6, r4
 800364c:	3642      	adds	r6, #66	; 0x42
 800364e:	7032      	strb	r2, [r6, #0]
 8003650:	e022      	b.n	8003698 <_printf_i+0x78>
 8003652:	0010      	movs	r0, r2
 8003654:	3863      	subs	r0, #99	; 0x63
 8003656:	2815      	cmp	r0, #21
 8003658:	d8f7      	bhi.n	800364a <_printf_i+0x2a>
 800365a:	f7fc fd55 	bl	8000108 <__gnu_thumb1_case_shi>
 800365e:	0016      	.short	0x0016
 8003660:	fff6001f 	.word	0xfff6001f
 8003664:	fff6fff6 	.word	0xfff6fff6
 8003668:	001ffff6 	.word	0x001ffff6
 800366c:	fff6fff6 	.word	0xfff6fff6
 8003670:	fff6fff6 	.word	0xfff6fff6
 8003674:	003600a8 	.word	0x003600a8
 8003678:	fff6009a 	.word	0xfff6009a
 800367c:	00b9fff6 	.word	0x00b9fff6
 8003680:	0036fff6 	.word	0x0036fff6
 8003684:	fff6fff6 	.word	0xfff6fff6
 8003688:	009e      	.short	0x009e
 800368a:	0026      	movs	r6, r4
 800368c:	681a      	ldr	r2, [r3, #0]
 800368e:	3642      	adds	r6, #66	; 0x42
 8003690:	1d11      	adds	r1, r2, #4
 8003692:	6019      	str	r1, [r3, #0]
 8003694:	6813      	ldr	r3, [r2, #0]
 8003696:	7033      	strb	r3, [r6, #0]
 8003698:	2301      	movs	r3, #1
 800369a:	e0a7      	b.n	80037ec <_printf_i+0x1cc>
 800369c:	6808      	ldr	r0, [r1, #0]
 800369e:	6819      	ldr	r1, [r3, #0]
 80036a0:	1d0a      	adds	r2, r1, #4
 80036a2:	0605      	lsls	r5, r0, #24
 80036a4:	d50b      	bpl.n	80036be <_printf_i+0x9e>
 80036a6:	680d      	ldr	r5, [r1, #0]
 80036a8:	601a      	str	r2, [r3, #0]
 80036aa:	2d00      	cmp	r5, #0
 80036ac:	da03      	bge.n	80036b6 <_printf_i+0x96>
 80036ae:	232d      	movs	r3, #45	; 0x2d
 80036b0:	9a04      	ldr	r2, [sp, #16]
 80036b2:	426d      	negs	r5, r5
 80036b4:	7013      	strb	r3, [r2, #0]
 80036b6:	4b61      	ldr	r3, [pc, #388]	; (800383c <_printf_i+0x21c>)
 80036b8:	270a      	movs	r7, #10
 80036ba:	9303      	str	r3, [sp, #12]
 80036bc:	e01b      	b.n	80036f6 <_printf_i+0xd6>
 80036be:	680d      	ldr	r5, [r1, #0]
 80036c0:	601a      	str	r2, [r3, #0]
 80036c2:	0641      	lsls	r1, r0, #25
 80036c4:	d5f1      	bpl.n	80036aa <_printf_i+0x8a>
 80036c6:	b22d      	sxth	r5, r5
 80036c8:	e7ef      	b.n	80036aa <_printf_i+0x8a>
 80036ca:	680d      	ldr	r5, [r1, #0]
 80036cc:	6819      	ldr	r1, [r3, #0]
 80036ce:	1d08      	adds	r0, r1, #4
 80036d0:	6018      	str	r0, [r3, #0]
 80036d2:	062e      	lsls	r6, r5, #24
 80036d4:	d501      	bpl.n	80036da <_printf_i+0xba>
 80036d6:	680d      	ldr	r5, [r1, #0]
 80036d8:	e003      	b.n	80036e2 <_printf_i+0xc2>
 80036da:	066d      	lsls	r5, r5, #25
 80036dc:	d5fb      	bpl.n	80036d6 <_printf_i+0xb6>
 80036de:	680d      	ldr	r5, [r1, #0]
 80036e0:	b2ad      	uxth	r5, r5
 80036e2:	4b56      	ldr	r3, [pc, #344]	; (800383c <_printf_i+0x21c>)
 80036e4:	2708      	movs	r7, #8
 80036e6:	9303      	str	r3, [sp, #12]
 80036e8:	2a6f      	cmp	r2, #111	; 0x6f
 80036ea:	d000      	beq.n	80036ee <_printf_i+0xce>
 80036ec:	3702      	adds	r7, #2
 80036ee:	0023      	movs	r3, r4
 80036f0:	2200      	movs	r2, #0
 80036f2:	3343      	adds	r3, #67	; 0x43
 80036f4:	701a      	strb	r2, [r3, #0]
 80036f6:	6863      	ldr	r3, [r4, #4]
 80036f8:	60a3      	str	r3, [r4, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	db03      	blt.n	8003706 <_printf_i+0xe6>
 80036fe:	2204      	movs	r2, #4
 8003700:	6821      	ldr	r1, [r4, #0]
 8003702:	4391      	bics	r1, r2
 8003704:	6021      	str	r1, [r4, #0]
 8003706:	2d00      	cmp	r5, #0
 8003708:	d102      	bne.n	8003710 <_printf_i+0xf0>
 800370a:	9e04      	ldr	r6, [sp, #16]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00c      	beq.n	800372a <_printf_i+0x10a>
 8003710:	9e04      	ldr	r6, [sp, #16]
 8003712:	0028      	movs	r0, r5
 8003714:	0039      	movs	r1, r7
 8003716:	f7fc fd87 	bl	8000228 <__aeabi_uidivmod>
 800371a:	9b03      	ldr	r3, [sp, #12]
 800371c:	3e01      	subs	r6, #1
 800371e:	5c5b      	ldrb	r3, [r3, r1]
 8003720:	7033      	strb	r3, [r6, #0]
 8003722:	002b      	movs	r3, r5
 8003724:	0005      	movs	r5, r0
 8003726:	429f      	cmp	r7, r3
 8003728:	d9f3      	bls.n	8003712 <_printf_i+0xf2>
 800372a:	2f08      	cmp	r7, #8
 800372c:	d109      	bne.n	8003742 <_printf_i+0x122>
 800372e:	6823      	ldr	r3, [r4, #0]
 8003730:	07db      	lsls	r3, r3, #31
 8003732:	d506      	bpl.n	8003742 <_printf_i+0x122>
 8003734:	6863      	ldr	r3, [r4, #4]
 8003736:	6922      	ldr	r2, [r4, #16]
 8003738:	4293      	cmp	r3, r2
 800373a:	dc02      	bgt.n	8003742 <_printf_i+0x122>
 800373c:	2330      	movs	r3, #48	; 0x30
 800373e:	3e01      	subs	r6, #1
 8003740:	7033      	strb	r3, [r6, #0]
 8003742:	9b04      	ldr	r3, [sp, #16]
 8003744:	1b9b      	subs	r3, r3, r6
 8003746:	6123      	str	r3, [r4, #16]
 8003748:	9b07      	ldr	r3, [sp, #28]
 800374a:	0021      	movs	r1, r4
 800374c:	9300      	str	r3, [sp, #0]
 800374e:	9805      	ldr	r0, [sp, #20]
 8003750:	9b06      	ldr	r3, [sp, #24]
 8003752:	aa09      	add	r2, sp, #36	; 0x24
 8003754:	f7ff fef4 	bl	8003540 <_printf_common>
 8003758:	1c43      	adds	r3, r0, #1
 800375a:	d14c      	bne.n	80037f6 <_printf_i+0x1d6>
 800375c:	2001      	movs	r0, #1
 800375e:	4240      	negs	r0, r0
 8003760:	b00b      	add	sp, #44	; 0x2c
 8003762:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003764:	3145      	adds	r1, #69	; 0x45
 8003766:	700a      	strb	r2, [r1, #0]
 8003768:	4a34      	ldr	r2, [pc, #208]	; (800383c <_printf_i+0x21c>)
 800376a:	9203      	str	r2, [sp, #12]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	6821      	ldr	r1, [r4, #0]
 8003770:	ca20      	ldmia	r2!, {r5}
 8003772:	601a      	str	r2, [r3, #0]
 8003774:	0608      	lsls	r0, r1, #24
 8003776:	d516      	bpl.n	80037a6 <_printf_i+0x186>
 8003778:	07cb      	lsls	r3, r1, #31
 800377a:	d502      	bpl.n	8003782 <_printf_i+0x162>
 800377c:	2320      	movs	r3, #32
 800377e:	4319      	orrs	r1, r3
 8003780:	6021      	str	r1, [r4, #0]
 8003782:	2710      	movs	r7, #16
 8003784:	2d00      	cmp	r5, #0
 8003786:	d1b2      	bne.n	80036ee <_printf_i+0xce>
 8003788:	2320      	movs	r3, #32
 800378a:	6822      	ldr	r2, [r4, #0]
 800378c:	439a      	bics	r2, r3
 800378e:	6022      	str	r2, [r4, #0]
 8003790:	e7ad      	b.n	80036ee <_printf_i+0xce>
 8003792:	2220      	movs	r2, #32
 8003794:	6809      	ldr	r1, [r1, #0]
 8003796:	430a      	orrs	r2, r1
 8003798:	6022      	str	r2, [r4, #0]
 800379a:	0022      	movs	r2, r4
 800379c:	2178      	movs	r1, #120	; 0x78
 800379e:	3245      	adds	r2, #69	; 0x45
 80037a0:	7011      	strb	r1, [r2, #0]
 80037a2:	4a27      	ldr	r2, [pc, #156]	; (8003840 <_printf_i+0x220>)
 80037a4:	e7e1      	b.n	800376a <_printf_i+0x14a>
 80037a6:	0648      	lsls	r0, r1, #25
 80037a8:	d5e6      	bpl.n	8003778 <_printf_i+0x158>
 80037aa:	b2ad      	uxth	r5, r5
 80037ac:	e7e4      	b.n	8003778 <_printf_i+0x158>
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	680d      	ldr	r5, [r1, #0]
 80037b2:	1d10      	adds	r0, r2, #4
 80037b4:	6949      	ldr	r1, [r1, #20]
 80037b6:	6018      	str	r0, [r3, #0]
 80037b8:	6813      	ldr	r3, [r2, #0]
 80037ba:	062e      	lsls	r6, r5, #24
 80037bc:	d501      	bpl.n	80037c2 <_printf_i+0x1a2>
 80037be:	6019      	str	r1, [r3, #0]
 80037c0:	e002      	b.n	80037c8 <_printf_i+0x1a8>
 80037c2:	066d      	lsls	r5, r5, #25
 80037c4:	d5fb      	bpl.n	80037be <_printf_i+0x19e>
 80037c6:	8019      	strh	r1, [r3, #0]
 80037c8:	2300      	movs	r3, #0
 80037ca:	9e04      	ldr	r6, [sp, #16]
 80037cc:	6123      	str	r3, [r4, #16]
 80037ce:	e7bb      	b.n	8003748 <_printf_i+0x128>
 80037d0:	681a      	ldr	r2, [r3, #0]
 80037d2:	1d11      	adds	r1, r2, #4
 80037d4:	6019      	str	r1, [r3, #0]
 80037d6:	6816      	ldr	r6, [r2, #0]
 80037d8:	2100      	movs	r1, #0
 80037da:	0030      	movs	r0, r6
 80037dc:	6862      	ldr	r2, [r4, #4]
 80037de:	f000 f831 	bl	8003844 <memchr>
 80037e2:	2800      	cmp	r0, #0
 80037e4:	d001      	beq.n	80037ea <_printf_i+0x1ca>
 80037e6:	1b80      	subs	r0, r0, r6
 80037e8:	6060      	str	r0, [r4, #4]
 80037ea:	6863      	ldr	r3, [r4, #4]
 80037ec:	6123      	str	r3, [r4, #16]
 80037ee:	2300      	movs	r3, #0
 80037f0:	9a04      	ldr	r2, [sp, #16]
 80037f2:	7013      	strb	r3, [r2, #0]
 80037f4:	e7a8      	b.n	8003748 <_printf_i+0x128>
 80037f6:	6923      	ldr	r3, [r4, #16]
 80037f8:	0032      	movs	r2, r6
 80037fa:	9906      	ldr	r1, [sp, #24]
 80037fc:	9805      	ldr	r0, [sp, #20]
 80037fe:	9d07      	ldr	r5, [sp, #28]
 8003800:	47a8      	blx	r5
 8003802:	1c43      	adds	r3, r0, #1
 8003804:	d0aa      	beq.n	800375c <_printf_i+0x13c>
 8003806:	6823      	ldr	r3, [r4, #0]
 8003808:	079b      	lsls	r3, r3, #30
 800380a:	d415      	bmi.n	8003838 <_printf_i+0x218>
 800380c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800380e:	68e0      	ldr	r0, [r4, #12]
 8003810:	4298      	cmp	r0, r3
 8003812:	daa5      	bge.n	8003760 <_printf_i+0x140>
 8003814:	0018      	movs	r0, r3
 8003816:	e7a3      	b.n	8003760 <_printf_i+0x140>
 8003818:	0022      	movs	r2, r4
 800381a:	2301      	movs	r3, #1
 800381c:	9906      	ldr	r1, [sp, #24]
 800381e:	9805      	ldr	r0, [sp, #20]
 8003820:	9e07      	ldr	r6, [sp, #28]
 8003822:	3219      	adds	r2, #25
 8003824:	47b0      	blx	r6
 8003826:	1c43      	adds	r3, r0, #1
 8003828:	d098      	beq.n	800375c <_printf_i+0x13c>
 800382a:	3501      	adds	r5, #1
 800382c:	68e3      	ldr	r3, [r4, #12]
 800382e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8003830:	1a9b      	subs	r3, r3, r2
 8003832:	42ab      	cmp	r3, r5
 8003834:	dcf0      	bgt.n	8003818 <_printf_i+0x1f8>
 8003836:	e7e9      	b.n	800380c <_printf_i+0x1ec>
 8003838:	2500      	movs	r5, #0
 800383a:	e7f7      	b.n	800382c <_printf_i+0x20c>
 800383c:	08003bb5 	.word	0x08003bb5
 8003840:	08003bc6 	.word	0x08003bc6

08003844 <memchr>:
 8003844:	b2c9      	uxtb	r1, r1
 8003846:	1882      	adds	r2, r0, r2
 8003848:	4290      	cmp	r0, r2
 800384a:	d101      	bne.n	8003850 <memchr+0xc>
 800384c:	2000      	movs	r0, #0
 800384e:	4770      	bx	lr
 8003850:	7803      	ldrb	r3, [r0, #0]
 8003852:	428b      	cmp	r3, r1
 8003854:	d0fb      	beq.n	800384e <memchr+0xa>
 8003856:	3001      	adds	r0, #1
 8003858:	e7f6      	b.n	8003848 <memchr+0x4>

0800385a <memcpy>:
 800385a:	2300      	movs	r3, #0
 800385c:	b510      	push	{r4, lr}
 800385e:	429a      	cmp	r2, r3
 8003860:	d100      	bne.n	8003864 <memcpy+0xa>
 8003862:	bd10      	pop	{r4, pc}
 8003864:	5ccc      	ldrb	r4, [r1, r3]
 8003866:	54c4      	strb	r4, [r0, r3]
 8003868:	3301      	adds	r3, #1
 800386a:	e7f8      	b.n	800385e <memcpy+0x4>

0800386c <memmove>:
 800386c:	b510      	push	{r4, lr}
 800386e:	4288      	cmp	r0, r1
 8003870:	d902      	bls.n	8003878 <memmove+0xc>
 8003872:	188b      	adds	r3, r1, r2
 8003874:	4298      	cmp	r0, r3
 8003876:	d303      	bcc.n	8003880 <memmove+0x14>
 8003878:	2300      	movs	r3, #0
 800387a:	e007      	b.n	800388c <memmove+0x20>
 800387c:	5c8b      	ldrb	r3, [r1, r2]
 800387e:	5483      	strb	r3, [r0, r2]
 8003880:	3a01      	subs	r2, #1
 8003882:	d2fb      	bcs.n	800387c <memmove+0x10>
 8003884:	bd10      	pop	{r4, pc}
 8003886:	5ccc      	ldrb	r4, [r1, r3]
 8003888:	54c4      	strb	r4, [r0, r3]
 800388a:	3301      	adds	r3, #1
 800388c:	429a      	cmp	r2, r3
 800388e:	d1fa      	bne.n	8003886 <memmove+0x1a>
 8003890:	e7f8      	b.n	8003884 <memmove+0x18>
	...

08003894 <_free_r>:
 8003894:	b570      	push	{r4, r5, r6, lr}
 8003896:	0005      	movs	r5, r0
 8003898:	2900      	cmp	r1, #0
 800389a:	d010      	beq.n	80038be <_free_r+0x2a>
 800389c:	1f0c      	subs	r4, r1, #4
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	da00      	bge.n	80038a6 <_free_r+0x12>
 80038a4:	18e4      	adds	r4, r4, r3
 80038a6:	0028      	movs	r0, r5
 80038a8:	f000 f918 	bl	8003adc <__malloc_lock>
 80038ac:	4a1d      	ldr	r2, [pc, #116]	; (8003924 <_free_r+0x90>)
 80038ae:	6813      	ldr	r3, [r2, #0]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d105      	bne.n	80038c0 <_free_r+0x2c>
 80038b4:	6063      	str	r3, [r4, #4]
 80038b6:	6014      	str	r4, [r2, #0]
 80038b8:	0028      	movs	r0, r5
 80038ba:	f000 f917 	bl	8003aec <__malloc_unlock>
 80038be:	bd70      	pop	{r4, r5, r6, pc}
 80038c0:	42a3      	cmp	r3, r4
 80038c2:	d908      	bls.n	80038d6 <_free_r+0x42>
 80038c4:	6821      	ldr	r1, [r4, #0]
 80038c6:	1860      	adds	r0, r4, r1
 80038c8:	4283      	cmp	r3, r0
 80038ca:	d1f3      	bne.n	80038b4 <_free_r+0x20>
 80038cc:	6818      	ldr	r0, [r3, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	1841      	adds	r1, r0, r1
 80038d2:	6021      	str	r1, [r4, #0]
 80038d4:	e7ee      	b.n	80038b4 <_free_r+0x20>
 80038d6:	001a      	movs	r2, r3
 80038d8:	685b      	ldr	r3, [r3, #4]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <_free_r+0x4e>
 80038de:	42a3      	cmp	r3, r4
 80038e0:	d9f9      	bls.n	80038d6 <_free_r+0x42>
 80038e2:	6811      	ldr	r1, [r2, #0]
 80038e4:	1850      	adds	r0, r2, r1
 80038e6:	42a0      	cmp	r0, r4
 80038e8:	d10b      	bne.n	8003902 <_free_r+0x6e>
 80038ea:	6820      	ldr	r0, [r4, #0]
 80038ec:	1809      	adds	r1, r1, r0
 80038ee:	1850      	adds	r0, r2, r1
 80038f0:	6011      	str	r1, [r2, #0]
 80038f2:	4283      	cmp	r3, r0
 80038f4:	d1e0      	bne.n	80038b8 <_free_r+0x24>
 80038f6:	6818      	ldr	r0, [r3, #0]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	1841      	adds	r1, r0, r1
 80038fc:	6011      	str	r1, [r2, #0]
 80038fe:	6053      	str	r3, [r2, #4]
 8003900:	e7da      	b.n	80038b8 <_free_r+0x24>
 8003902:	42a0      	cmp	r0, r4
 8003904:	d902      	bls.n	800390c <_free_r+0x78>
 8003906:	230c      	movs	r3, #12
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	e7d5      	b.n	80038b8 <_free_r+0x24>
 800390c:	6821      	ldr	r1, [r4, #0]
 800390e:	1860      	adds	r0, r4, r1
 8003910:	4283      	cmp	r3, r0
 8003912:	d103      	bne.n	800391c <_free_r+0x88>
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	1841      	adds	r1, r0, r1
 800391a:	6021      	str	r1, [r4, #0]
 800391c:	6063      	str	r3, [r4, #4]
 800391e:	6054      	str	r4, [r2, #4]
 8003920:	e7ca      	b.n	80038b8 <_free_r+0x24>
 8003922:	46c0      	nop			; (mov r8, r8)
 8003924:	20000218 	.word	0x20000218

08003928 <sbrk_aligned>:
 8003928:	b570      	push	{r4, r5, r6, lr}
 800392a:	4e0f      	ldr	r6, [pc, #60]	; (8003968 <sbrk_aligned+0x40>)
 800392c:	000d      	movs	r5, r1
 800392e:	6831      	ldr	r1, [r6, #0]
 8003930:	0004      	movs	r4, r0
 8003932:	2900      	cmp	r1, #0
 8003934:	d102      	bne.n	800393c <sbrk_aligned+0x14>
 8003936:	f000 f8bf 	bl	8003ab8 <_sbrk_r>
 800393a:	6030      	str	r0, [r6, #0]
 800393c:	0029      	movs	r1, r5
 800393e:	0020      	movs	r0, r4
 8003940:	f000 f8ba 	bl	8003ab8 <_sbrk_r>
 8003944:	1c43      	adds	r3, r0, #1
 8003946:	d00a      	beq.n	800395e <sbrk_aligned+0x36>
 8003948:	2303      	movs	r3, #3
 800394a:	1cc5      	adds	r5, r0, #3
 800394c:	439d      	bics	r5, r3
 800394e:	42a8      	cmp	r0, r5
 8003950:	d007      	beq.n	8003962 <sbrk_aligned+0x3a>
 8003952:	1a29      	subs	r1, r5, r0
 8003954:	0020      	movs	r0, r4
 8003956:	f000 f8af 	bl	8003ab8 <_sbrk_r>
 800395a:	1c43      	adds	r3, r0, #1
 800395c:	d101      	bne.n	8003962 <sbrk_aligned+0x3a>
 800395e:	2501      	movs	r5, #1
 8003960:	426d      	negs	r5, r5
 8003962:	0028      	movs	r0, r5
 8003964:	bd70      	pop	{r4, r5, r6, pc}
 8003966:	46c0      	nop			; (mov r8, r8)
 8003968:	2000021c 	.word	0x2000021c

0800396c <_malloc_r>:
 800396c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800396e:	2203      	movs	r2, #3
 8003970:	1ccb      	adds	r3, r1, #3
 8003972:	4393      	bics	r3, r2
 8003974:	3308      	adds	r3, #8
 8003976:	0006      	movs	r6, r0
 8003978:	001f      	movs	r7, r3
 800397a:	2b0c      	cmp	r3, #12
 800397c:	d232      	bcs.n	80039e4 <_malloc_r+0x78>
 800397e:	270c      	movs	r7, #12
 8003980:	42b9      	cmp	r1, r7
 8003982:	d831      	bhi.n	80039e8 <_malloc_r+0x7c>
 8003984:	0030      	movs	r0, r6
 8003986:	f000 f8a9 	bl	8003adc <__malloc_lock>
 800398a:	4d32      	ldr	r5, [pc, #200]	; (8003a54 <_malloc_r+0xe8>)
 800398c:	682b      	ldr	r3, [r5, #0]
 800398e:	001c      	movs	r4, r3
 8003990:	2c00      	cmp	r4, #0
 8003992:	d12e      	bne.n	80039f2 <_malloc_r+0x86>
 8003994:	0039      	movs	r1, r7
 8003996:	0030      	movs	r0, r6
 8003998:	f7ff ffc6 	bl	8003928 <sbrk_aligned>
 800399c:	0004      	movs	r4, r0
 800399e:	1c43      	adds	r3, r0, #1
 80039a0:	d11e      	bne.n	80039e0 <_malloc_r+0x74>
 80039a2:	682c      	ldr	r4, [r5, #0]
 80039a4:	0025      	movs	r5, r4
 80039a6:	2d00      	cmp	r5, #0
 80039a8:	d14a      	bne.n	8003a40 <_malloc_r+0xd4>
 80039aa:	6823      	ldr	r3, [r4, #0]
 80039ac:	0029      	movs	r1, r5
 80039ae:	18e3      	adds	r3, r4, r3
 80039b0:	0030      	movs	r0, r6
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	f000 f880 	bl	8003ab8 <_sbrk_r>
 80039b8:	9b01      	ldr	r3, [sp, #4]
 80039ba:	4283      	cmp	r3, r0
 80039bc:	d143      	bne.n	8003a46 <_malloc_r+0xda>
 80039be:	6823      	ldr	r3, [r4, #0]
 80039c0:	3703      	adds	r7, #3
 80039c2:	1aff      	subs	r7, r7, r3
 80039c4:	2303      	movs	r3, #3
 80039c6:	439f      	bics	r7, r3
 80039c8:	3708      	adds	r7, #8
 80039ca:	2f0c      	cmp	r7, #12
 80039cc:	d200      	bcs.n	80039d0 <_malloc_r+0x64>
 80039ce:	270c      	movs	r7, #12
 80039d0:	0039      	movs	r1, r7
 80039d2:	0030      	movs	r0, r6
 80039d4:	f7ff ffa8 	bl	8003928 <sbrk_aligned>
 80039d8:	1c43      	adds	r3, r0, #1
 80039da:	d034      	beq.n	8003a46 <_malloc_r+0xda>
 80039dc:	6823      	ldr	r3, [r4, #0]
 80039de:	19df      	adds	r7, r3, r7
 80039e0:	6027      	str	r7, [r4, #0]
 80039e2:	e013      	b.n	8003a0c <_malloc_r+0xa0>
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	dacb      	bge.n	8003980 <_malloc_r+0x14>
 80039e8:	230c      	movs	r3, #12
 80039ea:	2500      	movs	r5, #0
 80039ec:	6033      	str	r3, [r6, #0]
 80039ee:	0028      	movs	r0, r5
 80039f0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80039f2:	6822      	ldr	r2, [r4, #0]
 80039f4:	1bd1      	subs	r1, r2, r7
 80039f6:	d420      	bmi.n	8003a3a <_malloc_r+0xce>
 80039f8:	290b      	cmp	r1, #11
 80039fa:	d917      	bls.n	8003a2c <_malloc_r+0xc0>
 80039fc:	19e2      	adds	r2, r4, r7
 80039fe:	6027      	str	r7, [r4, #0]
 8003a00:	42a3      	cmp	r3, r4
 8003a02:	d111      	bne.n	8003a28 <_malloc_r+0xbc>
 8003a04:	602a      	str	r2, [r5, #0]
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	6011      	str	r1, [r2, #0]
 8003a0a:	6053      	str	r3, [r2, #4]
 8003a0c:	0030      	movs	r0, r6
 8003a0e:	0025      	movs	r5, r4
 8003a10:	f000 f86c 	bl	8003aec <__malloc_unlock>
 8003a14:	2207      	movs	r2, #7
 8003a16:	350b      	adds	r5, #11
 8003a18:	1d23      	adds	r3, r4, #4
 8003a1a:	4395      	bics	r5, r2
 8003a1c:	1aea      	subs	r2, r5, r3
 8003a1e:	429d      	cmp	r5, r3
 8003a20:	d0e5      	beq.n	80039ee <_malloc_r+0x82>
 8003a22:	1b5b      	subs	r3, r3, r5
 8003a24:	50a3      	str	r3, [r4, r2]
 8003a26:	e7e2      	b.n	80039ee <_malloc_r+0x82>
 8003a28:	605a      	str	r2, [r3, #4]
 8003a2a:	e7ec      	b.n	8003a06 <_malloc_r+0x9a>
 8003a2c:	6862      	ldr	r2, [r4, #4]
 8003a2e:	42a3      	cmp	r3, r4
 8003a30:	d101      	bne.n	8003a36 <_malloc_r+0xca>
 8003a32:	602a      	str	r2, [r5, #0]
 8003a34:	e7ea      	b.n	8003a0c <_malloc_r+0xa0>
 8003a36:	605a      	str	r2, [r3, #4]
 8003a38:	e7e8      	b.n	8003a0c <_malloc_r+0xa0>
 8003a3a:	0023      	movs	r3, r4
 8003a3c:	6864      	ldr	r4, [r4, #4]
 8003a3e:	e7a7      	b.n	8003990 <_malloc_r+0x24>
 8003a40:	002c      	movs	r4, r5
 8003a42:	686d      	ldr	r5, [r5, #4]
 8003a44:	e7af      	b.n	80039a6 <_malloc_r+0x3a>
 8003a46:	230c      	movs	r3, #12
 8003a48:	0030      	movs	r0, r6
 8003a4a:	6033      	str	r3, [r6, #0]
 8003a4c:	f000 f84e 	bl	8003aec <__malloc_unlock>
 8003a50:	e7cd      	b.n	80039ee <_malloc_r+0x82>
 8003a52:	46c0      	nop			; (mov r8, r8)
 8003a54:	20000218 	.word	0x20000218

08003a58 <_realloc_r>:
 8003a58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a5a:	0007      	movs	r7, r0
 8003a5c:	000e      	movs	r6, r1
 8003a5e:	0014      	movs	r4, r2
 8003a60:	2900      	cmp	r1, #0
 8003a62:	d105      	bne.n	8003a70 <_realloc_r+0x18>
 8003a64:	0011      	movs	r1, r2
 8003a66:	f7ff ff81 	bl	800396c <_malloc_r>
 8003a6a:	0005      	movs	r5, r0
 8003a6c:	0028      	movs	r0, r5
 8003a6e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8003a70:	2a00      	cmp	r2, #0
 8003a72:	d103      	bne.n	8003a7c <_realloc_r+0x24>
 8003a74:	f7ff ff0e 	bl	8003894 <_free_r>
 8003a78:	0025      	movs	r5, r4
 8003a7a:	e7f7      	b.n	8003a6c <_realloc_r+0x14>
 8003a7c:	f000 f83e 	bl	8003afc <_malloc_usable_size_r>
 8003a80:	9001      	str	r0, [sp, #4]
 8003a82:	4284      	cmp	r4, r0
 8003a84:	d803      	bhi.n	8003a8e <_realloc_r+0x36>
 8003a86:	0035      	movs	r5, r6
 8003a88:	0843      	lsrs	r3, r0, #1
 8003a8a:	42a3      	cmp	r3, r4
 8003a8c:	d3ee      	bcc.n	8003a6c <_realloc_r+0x14>
 8003a8e:	0021      	movs	r1, r4
 8003a90:	0038      	movs	r0, r7
 8003a92:	f7ff ff6b 	bl	800396c <_malloc_r>
 8003a96:	1e05      	subs	r5, r0, #0
 8003a98:	d0e8      	beq.n	8003a6c <_realloc_r+0x14>
 8003a9a:	9b01      	ldr	r3, [sp, #4]
 8003a9c:	0022      	movs	r2, r4
 8003a9e:	429c      	cmp	r4, r3
 8003aa0:	d900      	bls.n	8003aa4 <_realloc_r+0x4c>
 8003aa2:	001a      	movs	r2, r3
 8003aa4:	0031      	movs	r1, r6
 8003aa6:	0028      	movs	r0, r5
 8003aa8:	f7ff fed7 	bl	800385a <memcpy>
 8003aac:	0031      	movs	r1, r6
 8003aae:	0038      	movs	r0, r7
 8003ab0:	f7ff fef0 	bl	8003894 <_free_r>
 8003ab4:	e7da      	b.n	8003a6c <_realloc_r+0x14>
	...

08003ab8 <_sbrk_r>:
 8003ab8:	2300      	movs	r3, #0
 8003aba:	b570      	push	{r4, r5, r6, lr}
 8003abc:	4d06      	ldr	r5, [pc, #24]	; (8003ad8 <_sbrk_r+0x20>)
 8003abe:	0004      	movs	r4, r0
 8003ac0:	0008      	movs	r0, r1
 8003ac2:	602b      	str	r3, [r5, #0]
 8003ac4:	f7fd f8c8 	bl	8000c58 <_sbrk>
 8003ac8:	1c43      	adds	r3, r0, #1
 8003aca:	d103      	bne.n	8003ad4 <_sbrk_r+0x1c>
 8003acc:	682b      	ldr	r3, [r5, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d000      	beq.n	8003ad4 <_sbrk_r+0x1c>
 8003ad2:	6023      	str	r3, [r4, #0]
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	46c0      	nop			; (mov r8, r8)
 8003ad8:	20000220 	.word	0x20000220

08003adc <__malloc_lock>:
 8003adc:	b510      	push	{r4, lr}
 8003ade:	4802      	ldr	r0, [pc, #8]	; (8003ae8 <__malloc_lock+0xc>)
 8003ae0:	f000 f814 	bl	8003b0c <__retarget_lock_acquire_recursive>
 8003ae4:	bd10      	pop	{r4, pc}
 8003ae6:	46c0      	nop			; (mov r8, r8)
 8003ae8:	20000224 	.word	0x20000224

08003aec <__malloc_unlock>:
 8003aec:	b510      	push	{r4, lr}
 8003aee:	4802      	ldr	r0, [pc, #8]	; (8003af8 <__malloc_unlock+0xc>)
 8003af0:	f000 f80d 	bl	8003b0e <__retarget_lock_release_recursive>
 8003af4:	bd10      	pop	{r4, pc}
 8003af6:	46c0      	nop			; (mov r8, r8)
 8003af8:	20000224 	.word	0x20000224

08003afc <_malloc_usable_size_r>:
 8003afc:	1f0b      	subs	r3, r1, #4
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	1f18      	subs	r0, r3, #4
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	da01      	bge.n	8003b0a <_malloc_usable_size_r+0xe>
 8003b06:	580b      	ldr	r3, [r1, r0]
 8003b08:	18c0      	adds	r0, r0, r3
 8003b0a:	4770      	bx	lr

08003b0c <__retarget_lock_acquire_recursive>:
 8003b0c:	4770      	bx	lr

08003b0e <__retarget_lock_release_recursive>:
 8003b0e:	4770      	bx	lr

08003b10 <_init>:
 8003b10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b12:	46c0      	nop			; (mov r8, r8)
 8003b14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b16:	bc08      	pop	{r3}
 8003b18:	469e      	mov	lr, r3
 8003b1a:	4770      	bx	lr

08003b1c <_fini>:
 8003b1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b1e:	46c0      	nop			; (mov r8, r8)
 8003b20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b22:	bc08      	pop	{r3}
 8003b24:	469e      	mov	lr, r3
 8003b26:	4770      	bx	lr
